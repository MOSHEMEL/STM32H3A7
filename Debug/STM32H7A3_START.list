
STM32H7A3_START.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a44  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08007cf4  08007cf4  00017cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dd4  08007dd4  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007dd4  08007dd4  00017dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ddc  08007ddc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ddc  08007ddc  00017ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007de0  08007de0  00017de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  24000000  08007de4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a4c  24000014  08007df8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004a60  08007df8  00024a60  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026222  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bd0  00000000  00000000  00046264  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001710  00000000  00000000  00049e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015a8  00000000  00000000  0004b548  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003d2d  00000000  00000000  0004caf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013614  00000000  00000000  0005081d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001474c9  00000000  00000000  00063e31  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ab2fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061b4  00000000  00000000  001ab378  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000014 	.word	0x24000014
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08007cdc 	.word	0x08007cdc

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000018 	.word	0x24000018
 80002ec:	08007cdc 	.word	0x08007cdc

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fc06 	bl	8000e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f836 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f92e 	bl	800085c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000600:	f000 f8d8 	bl	80007b4 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000604:	f000 f922 	bl	800084c <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000608:	f004 fdf4 	bl	80051f4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800060c:	4a0d      	ldr	r2, [pc, #52]	; (8000644 <main+0x54>)
 800060e:	2100      	movs	r1, #0
 8000610:	480d      	ldr	r0, [pc, #52]	; (8000648 <main+0x58>)
 8000612:	f004 fe59 	bl	80052c8 <osThreadNew>
 8000616:	4602      	mov	r2, r0
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <main+0x5c>)
 800061a:	601a      	str	r2, [r3, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 800061c:	4a0c      	ldr	r2, [pc, #48]	; (8000650 <main+0x60>)
 800061e:	2100      	movs	r1, #0
 8000620:	480c      	ldr	r0, [pc, #48]	; (8000654 <main+0x64>)
 8000622:	f004 fe51 	bl	80052c8 <osThreadNew>
 8000626:	4602      	mov	r2, r0
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <main+0x68>)
 800062a:	601a      	str	r2, [r3, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 800062c:	4a0b      	ldr	r2, [pc, #44]	; (800065c <main+0x6c>)
 800062e:	2100      	movs	r1, #0
 8000630:	480b      	ldr	r0, [pc, #44]	; (8000660 <main+0x70>)
 8000632:	f004 fe49 	bl	80052c8 <osThreadNew>
 8000636:	4602      	mov	r2, r0
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <main+0x74>)
 800063a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800063c:	f004 fe0e 	bl	800525c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000640:	e7fe      	b.n	8000640 <main+0x50>
 8000642:	bf00      	nop
 8000644:	08007d40 	.word	0x08007d40
 8000648:	08000a91 	.word	0x08000a91
 800064c:	24004938 	.word	0x24004938
 8000650:	08007d64 	.word	0x08007d64
 8000654:	08000aa1 	.word	0x08000aa1
 8000658:	240049c8 	.word	0x240049c8
 800065c:	08007d88 	.word	0x08007d88
 8000660:	08000ab1 	.word	0x08000ab1
 8000664:	240049cc 	.word	0x240049cc

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b0ca      	sub	sp, #296	; 0x128
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000672:	224c      	movs	r2, #76	; 0x4c
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f007 fb27 	bl	8007cca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000680:	2220      	movs	r2, #32
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f007 fb20 	bl	8007cca <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	4618      	mov	r0, r3
 800068e:	23b8      	movs	r3, #184	; 0xb8
 8000690:	461a      	mov	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	f007 fb19 	bl	8007cca <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000698:	2004      	movs	r0, #4
 800069a:	f000 feb9 	bl	8001410 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800069e:	463b      	mov	r3, r7
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	4b41      	ldr	r3, [pc, #260]	; (80007ac <SystemClock_Config+0x144>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a40      	ldr	r2, [pc, #256]	; (80007ac <SystemClock_Config+0x144>)
 80006aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b3e      	ldr	r3, [pc, #248]	; (80007ac <SystemClock_Config+0x144>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80006b8:	463b      	mov	r3, r7
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	463b      	mov	r3, r7
 80006be:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c0:	bf00      	nop
 80006c2:	4b3a      	ldr	r3, [pc, #232]	; (80007ac <SystemClock_Config+0x144>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006ce:	d1f8      	bne.n	80006c2 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006d0:	2321      	movs	r3, #33	; 0x21
 80006d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006d6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006de:	2301      	movs	r3, #1
 80006e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ea:	2302      	movs	r3, #2
 80006ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLN = 70;
 80006f6:	2346      	movs	r3, #70	; 0x46
 80006f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000702:	2304      	movs	r3, #4
 8000704:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000708:	2302      	movs	r3, #2
 800070a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800070e:	230c      	movs	r3, #12
 8000710:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000714:	2300      	movs	r3, #0
 8000716:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fecd 	bl	80014c4 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000730:	f000 f9d8 	bl	8000ae4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	233f      	movs	r3, #63	; 0x3f
 8000736:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2303      	movs	r3, #3
 800073c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV8;
 8000746:	230a      	movs	r3, #10
 8000748:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000764:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f001 fa92 	bl	8001c94 <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000776:	f000 f9b5 	bl	8000ae4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4a0c      	ldr	r2, [pc, #48]	; (80007b0 <SystemClock_Config+0x148>)
 800077e:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2200      	movs	r2, #0
 8000784:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800078c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	4618      	mov	r0, r3
 8000794:	f001 fe44 	bl	8002420 <HAL_RCCEx_PeriphCLKConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x13a>
  {
    Error_Handler();
 800079e:	f000 f9a1 	bl	8000ae4 <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	58024800 	.word	0x58024800
 80007b0:	00040002 	.word	0x00040002

080007b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007b8:	4b22      	ldr	r3, [pc, #136]	; (8000844 <MX_USART3_UART_Init+0x90>)
 80007ba:	4a23      	ldr	r2, [pc, #140]	; (8000848 <MX_USART3_UART_Init+0x94>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007be:	4b21      	ldr	r3, [pc, #132]	; (8000844 <MX_USART3_UART_Init+0x90>)
 80007c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_USART3_UART_Init+0x90>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_USART3_UART_Init+0x90>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_USART3_UART_Init+0x90>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_USART3_UART_Init+0x90>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_USART3_UART_Init+0x90>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_USART3_UART_Init+0x90>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_USART3_UART_Init+0x90>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_USART3_UART_Init+0x90>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <MX_USART3_UART_Init+0x90>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007fc:	4811      	ldr	r0, [pc, #68]	; (8000844 <MX_USART3_UART_Init+0x90>)
 80007fe:	f003 fb6d 	bl	8003edc <HAL_UART_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000808:	f000 f96c 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800080c:	2100      	movs	r1, #0
 800080e:	480d      	ldr	r0, [pc, #52]	; (8000844 <MX_USART3_UART_Init+0x90>)
 8000810:	f004 fc03 	bl	800501a <HAL_UARTEx_SetTxFifoThreshold>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800081a:	f000 f963 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800081e:	2100      	movs	r1, #0
 8000820:	4808      	ldr	r0, [pc, #32]	; (8000844 <MX_USART3_UART_Init+0x90>)
 8000822:	f004 fc38 	bl	8005096 <HAL_UARTEx_SetRxFifoThreshold>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800082c:	f000 f95a 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_USART3_UART_Init+0x90>)
 8000832:	f004 fbb9 	bl	8004fa8 <HAL_UARTEx_DisableFifoMode>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800083c:	f000 f952 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	2400493c 	.word	0x2400493c
 8000848:	40004800 	.word	0x40004800

0800084c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
	...

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08e      	sub	sp, #56	; 0x38
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	4b7f      	ldr	r3, [pc, #508]	; (8000a70 <MX_GPIO_Init+0x214>)
 8000874:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000878:	4a7d      	ldr	r2, [pc, #500]	; (8000a70 <MX_GPIO_Init+0x214>)
 800087a:	f043 0304 	orr.w	r3, r3, #4
 800087e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000882:	4b7b      	ldr	r3, [pc, #492]	; (8000a70 <MX_GPIO_Init+0x214>)
 8000884:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000888:	f003 0304 	and.w	r3, r3, #4
 800088c:	623b      	str	r3, [r7, #32]
 800088e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000890:	4b77      	ldr	r3, [pc, #476]	; (8000a70 <MX_GPIO_Init+0x214>)
 8000892:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000896:	4a76      	ldr	r2, [pc, #472]	; (8000a70 <MX_GPIO_Init+0x214>)
 8000898:	f043 0320 	orr.w	r3, r3, #32
 800089c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008a0:	4b73      	ldr	r3, [pc, #460]	; (8000a70 <MX_GPIO_Init+0x214>)
 80008a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008a6:	f003 0320 	and.w	r3, r3, #32
 80008aa:	61fb      	str	r3, [r7, #28]
 80008ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ae:	4b70      	ldr	r3, [pc, #448]	; (8000a70 <MX_GPIO_Init+0x214>)
 80008b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b4:	4a6e      	ldr	r2, [pc, #440]	; (8000a70 <MX_GPIO_Init+0x214>)
 80008b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008be:	4b6c      	ldr	r3, [pc, #432]	; (8000a70 <MX_GPIO_Init+0x214>)
 80008c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c8:	61bb      	str	r3, [r7, #24]
 80008ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008cc:	4b68      	ldr	r3, [pc, #416]	; (8000a70 <MX_GPIO_Init+0x214>)
 80008ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008d2:	4a67      	ldr	r2, [pc, #412]	; (8000a70 <MX_GPIO_Init+0x214>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008dc:	4b64      	ldr	r3, [pc, #400]	; (8000a70 <MX_GPIO_Init+0x214>)
 80008de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ea:	4b61      	ldr	r3, [pc, #388]	; (8000a70 <MX_GPIO_Init+0x214>)
 80008ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008f0:	4a5f      	ldr	r2, [pc, #380]	; (8000a70 <MX_GPIO_Init+0x214>)
 80008f2:	f043 0308 	orr.w	r3, r3, #8
 80008f6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008fa:	4b5d      	ldr	r3, [pc, #372]	; (8000a70 <MX_GPIO_Init+0x214>)
 80008fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000900:	f003 0308 	and.w	r3, r3, #8
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000908:	4b59      	ldr	r3, [pc, #356]	; (8000a70 <MX_GPIO_Init+0x214>)
 800090a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800090e:	4a58      	ldr	r2, [pc, #352]	; (8000a70 <MX_GPIO_Init+0x214>)
 8000910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000914:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000918:	4b55      	ldr	r3, [pc, #340]	; (8000a70 <MX_GPIO_Init+0x214>)
 800091a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800091e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b52      	ldr	r3, [pc, #328]	; (8000a70 <MX_GPIO_Init+0x214>)
 8000928:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800092c:	4a50      	ldr	r2, [pc, #320]	; (8000a70 <MX_GPIO_Init+0x214>)
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000936:	4b4e      	ldr	r3, [pc, #312]	; (8000a70 <MX_GPIO_Init+0x214>)
 8000938:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000944:	4b4a      	ldr	r3, [pc, #296]	; (8000a70 <MX_GPIO_Init+0x214>)
 8000946:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800094a:	4a49      	ldr	r2, [pc, #292]	; (8000a70 <MX_GPIO_Init+0x214>)
 800094c:	f043 0310 	orr.w	r3, r3, #16
 8000950:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000954:	4b46      	ldr	r3, [pc, #280]	; (8000a70 <MX_GPIO_Init+0x214>)
 8000956:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800095a:	f003 0310 	and.w	r3, r3, #16
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000968:	4842      	ldr	r0, [pc, #264]	; (8000a74 <MX_GPIO_Init+0x218>)
 800096a:	f000 fd37 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	f244 0101 	movw	r1, #16385	; 0x4001
 8000974:	4840      	ldr	r0, [pc, #256]	; (8000a78 <MX_GPIO_Init+0x21c>)
 8000976:	f000 fd31 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2102      	movs	r1, #2
 800097e:	483f      	ldr	r0, [pc, #252]	; (8000a7c <MX_GPIO_Init+0x220>)
 8000980:	f000 fd2c 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000996:	4619      	mov	r1, r3
 8000998:	4839      	ldr	r0, [pc, #228]	; (8000a80 <MX_GPIO_Init+0x224>)
 800099a:	f000 fb6f 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800099e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b4:	4619      	mov	r1, r3
 80009b6:	482f      	ldr	r0, [pc, #188]	; (8000a74 <MX_GPIO_Init+0x218>)
 80009b8:	f000 fb60 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009bc:	f244 0301 	movw	r3, #16385	; 0x4001
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	4828      	ldr	r0, [pc, #160]	; (8000a78 <MX_GPIO_Init+0x21c>)
 80009d6:	f000 fb51 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80009da:	2380      	movs	r3, #128	; 0x80
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009de:	4b29      	ldr	r3, [pc, #164]	; (8000a84 <MX_GPIO_Init+0x228>)
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ea:	4619      	mov	r1, r3
 80009ec:	4826      	ldr	r0, [pc, #152]	; (8000a88 <MX_GPIO_Init+0x22c>)
 80009ee:	f000 fb45 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80009f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a04:	4619      	mov	r1, r3
 8000a06:	4821      	ldr	r0, [pc, #132]	; (8000a8c <MX_GPIO_Init+0x230>)
 8000a08:	f000 fb38 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000a1e:	230a      	movs	r3, #10
 8000a20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a26:	4619      	mov	r1, r3
 8000a28:	4818      	ldr	r0, [pc, #96]	; (8000a8c <MX_GPIO_Init+0x230>)
 8000a2a:	f000 fb27 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000a2e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a44:	4619      	mov	r1, r3
 8000a46:	4811      	ldr	r0, [pc, #68]	; (8000a8c <MX_GPIO_Init+0x230>)
 8000a48:	f000 fb18 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a60:	4619      	mov	r1, r3
 8000a62:	4806      	ldr	r0, [pc, #24]	; (8000a7c <MX_GPIO_Init+0x220>)
 8000a64:	f000 fb0a 	bl	800107c <HAL_GPIO_Init>

}
 8000a68:	bf00      	nop
 8000a6a:	3738      	adds	r7, #56	; 0x38
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	58024400 	.word	0x58024400
 8000a74:	58021400 	.word	0x58021400
 8000a78:	58020400 	.word	0x58020400
 8000a7c:	58021000 	.word	0x58021000
 8000a80:	58020800 	.word	0x58020800
 8000a84:	11110000 	.word	0x11110000
 8000a88:	58021800 	.word	0x58021800
 8000a8c:	58020000 	.word	0x58020000

08000a90 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f004 fcbb 	bl	8005414 <osDelay>
 8000a9e:	e7fb      	b.n	8000a98 <StartDefaultTask+0x8>

08000aa0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f004 fcb3 	bl	8005414 <osDelay>
 8000aae:	e7fb      	b.n	8000aa8 <StartTask02+0x8>

08000ab0 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f004 fcab 	bl	8005414 <osDelay>
 8000abe:	e7fb      	b.n	8000ab8 <StartTask03+0x8>

08000ac0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d101      	bne.n	8000ad6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ad2:	f000 f9d3 	bl	8000e7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40001400 	.word	0x40001400

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <HAL_MspInit+0x30>)
 8000afc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b00:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_MspInit+0x30>)
 8000b02:	f043 0302 	orr.w	r3, r3, #2
 8000b06:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_MspInit+0x30>)
 8000b0c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	58024400 	.word	0x58024400

08000b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a1a      	ldr	r2, [pc, #104]	; (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d12e      	bne.n	8000ba8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <HAL_UART_MspInit+0x8c>)
 8000b4c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b50:	4a18      	ldr	r2, [pc, #96]	; (8000bb4 <HAL_UART_MspInit+0x8c>)
 8000b52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b56:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000b5a:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <HAL_UART_MspInit+0x8c>)
 8000b5c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_UART_MspInit+0x8c>)
 8000b6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b6e:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <HAL_UART_MspInit+0x8c>)
 8000b70:	f043 0308 	orr.w	r3, r3, #8
 8000b74:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b78:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <HAL_UART_MspInit+0x8c>)
 8000b7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b7e:	f003 0308 	and.w	r3, r3, #8
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b98:	2307      	movs	r3, #7
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <HAL_UART_MspInit+0x90>)
 8000ba4:	f000 fa6a 	bl	800107c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ba8:	bf00      	nop
 8000baa:	3728      	adds	r7, #40	; 0x28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40004800 	.word	0x40004800
 8000bb4:	58024400 	.word	0x58024400
 8000bb8:	58020c00 	.word	0x58020c00

08000bbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08e      	sub	sp, #56	; 0x38
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	2037      	movs	r0, #55	; 0x37
 8000bd2:	f000 fa2b 	bl	800102c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000bd6:	2037      	movs	r0, #55	; 0x37
 8000bd8:	f000 fa42 	bl	8001060 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000bdc:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <HAL_InitTick+0xa4>)
 8000bde:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000be2:	4a1f      	ldr	r2, [pc, #124]	; (8000c60 <HAL_InitTick+0xa4>)
 8000be4:	f043 0320 	orr.w	r3, r3, #32
 8000be8:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000bec:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <HAL_InitTick+0xa4>)
 8000bee:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000bf2:	f003 0320 	and.w	r3, r3, #32
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bfa:	f107 020c 	add.w	r2, r7, #12
 8000bfe:	f107 0310 	add.w	r3, r7, #16
 8000c02:	4611      	mov	r1, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f001 fbc9 	bl	800239c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c0a:	f001 fb9b 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 8000c0e:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c12:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <HAL_InitTick+0xa8>)
 8000c14:	fba2 2303 	umull	r2, r3, r2, r3
 8000c18:	0c9b      	lsrs	r3, r3, #18
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_InitTick+0xac>)
 8000c20:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <HAL_InitTick+0xb0>)
 8000c22:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8000c24:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <HAL_InitTick+0xac>)
 8000c26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c2a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000c2c:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <HAL_InitTick+0xac>)
 8000c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c30:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000c32:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <HAL_InitTick+0xac>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <HAL_InitTick+0xac>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000c3e:	480a      	ldr	r0, [pc, #40]	; (8000c68 <HAL_InitTick+0xac>)
 8000c40:	f002 feb4 	bl	80039ac <HAL_TIM_Base_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d104      	bne.n	8000c54 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000c4a:	4807      	ldr	r0, [pc, #28]	; (8000c68 <HAL_InitTick+0xac>)
 8000c4c:	f002 ff10 	bl	8003a70 <HAL_TIM_Base_Start_IT>
 8000c50:	4603      	mov	r3, r0
 8000c52:	e000      	b.n	8000c56 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3738      	adds	r7, #56	; 0x38
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	58024400 	.word	0x58024400
 8000c64:	431bde83 	.word	0x431bde83
 8000c68:	240049d0 	.word	0x240049d0
 8000c6c:	40001400 	.word	0x40001400

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <BusFault_Handler+0x4>

08000c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <UsageFault_Handler+0x4>

08000c96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <TIM7_IRQHandler+0x10>)
 8000caa:	f002 ff17 	bl	8003adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	240049d0 	.word	0x240049d0

08000cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cbc:	4b34      	ldr	r3, [pc, #208]	; (8000d90 <SystemInit+0xd8>)
 8000cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc2:	4a33      	ldr	r2, [pc, #204]	; (8000d90 <SystemInit+0xd8>)
 8000cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ccc:	4b31      	ldr	r3, [pc, #196]	; (8000d94 <SystemInit+0xdc>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f003 030f 	and.w	r3, r3, #15
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d807      	bhi.n	8000ce8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cd8:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <SystemInit+0xdc>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f023 030f 	bic.w	r3, r3, #15
 8000ce0:	4a2c      	ldr	r2, [pc, #176]	; (8000d94 <SystemInit+0xdc>)
 8000ce2:	f043 0303 	orr.w	r3, r3, #3
 8000ce6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ce8:	4b2b      	ldr	r3, [pc, #172]	; (8000d98 <SystemInit+0xe0>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a2a      	ldr	r2, [pc, #168]	; (8000d98 <SystemInit+0xe0>)
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000cf4:	4b28      	ldr	r3, [pc, #160]	; (8000d98 <SystemInit+0xe0>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000cfa:	4b27      	ldr	r3, [pc, #156]	; (8000d98 <SystemInit+0xe0>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	4926      	ldr	r1, [pc, #152]	; (8000d98 <SystemInit+0xe0>)
 8000d00:	4b26      	ldr	r3, [pc, #152]	; (8000d9c <SystemInit+0xe4>)
 8000d02:	4013      	ands	r3, r2
 8000d04:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d06:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <SystemInit+0xdc>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	d907      	bls.n	8000d22 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d12:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <SystemInit+0xdc>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f023 030f 	bic.w	r3, r3, #15
 8000d1a:	4a1e      	ldr	r2, [pc, #120]	; (8000d94 <SystemInit+0xdc>)
 8000d1c:	f043 0303 	orr.w	r3, r3, #3
 8000d20:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000d22:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <SystemInit+0xe0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000d28:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <SystemInit+0xe0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000d2e:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <SystemInit+0xe0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d34:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <SystemInit+0xe0>)
 8000d36:	4a1a      	ldr	r2, [pc, #104]	; (8000da0 <SystemInit+0xe8>)
 8000d38:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <SystemInit+0xe0>)
 8000d3c:	4a19      	ldr	r2, [pc, #100]	; (8000da4 <SystemInit+0xec>)
 8000d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d40:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <SystemInit+0xe0>)
 8000d42:	4a19      	ldr	r2, [pc, #100]	; (8000da8 <SystemInit+0xf0>)
 8000d44:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <SystemInit+0xe0>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <SystemInit+0xe0>)
 8000d4e:	4a16      	ldr	r2, [pc, #88]	; (8000da8 <SystemInit+0xf0>)
 8000d50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <SystemInit+0xe0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <SystemInit+0xe0>)
 8000d5a:	4a13      	ldr	r2, [pc, #76]	; (8000da8 <SystemInit+0xf0>)
 8000d5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <SystemInit+0xe0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <SystemInit+0xe0>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0b      	ldr	r2, [pc, #44]	; (8000d98 <SystemInit+0xe0>)
 8000d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d6e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <SystemInit+0xe0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d76:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <SystemInit+0xf4>)
 8000d78:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d7c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d7e:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <SystemInit+0xd8>)
 8000d80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d84:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00
 8000d94:	52002000 	.word	0x52002000
 8000d98:	58024400 	.word	0x58024400
 8000d9c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000da0:	02020200 	.word	0x02020200
 8000da4:	01ff0000 	.word	0x01ff0000
 8000da8:	01010280 	.word	0x01010280
 8000dac:	52004000 	.word	0x52004000

08000db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000db4:	f7ff ff80 	bl	8000cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000db8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dba:	e003      	b.n	8000dc4 <LoopCopyDataInit>

08000dbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000dbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dc2:	3104      	adds	r1, #4

08000dc4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000dc4:	480a      	ldr	r0, [pc, #40]	; (8000df0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000dc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000dca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000dcc:	d3f6      	bcc.n	8000dbc <CopyDataInit>
  ldr  r2, =_sbss
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000dd0:	e002      	b.n	8000dd8 <LoopFillZerobss>

08000dd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000dd2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000dd4:	f842 3b04 	str.w	r3, [r2], #4

08000dd8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000dda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ddc:	d3f9      	bcc.n	8000dd2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dde:	f006 ff45 	bl	8007c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de2:	f7ff fc05 	bl	80005f0 <main>
  bx  lr
 8000de6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000de8:	24100000 	.word	0x24100000
  ldr  r3, =_sidata
 8000dec:	08007de4 	.word	0x08007de4
  ldr  r0, =_sdata
 8000df0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000df4:	24000014 	.word	0x24000014
  ldr  r2, =_sbss
 8000df8:	24000014 	.word	0x24000014
  ldr  r3, = _ebss
 8000dfc:	24004a60 	.word	0x24004a60

08000e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <ADC_IRQHandler>
	...

08000e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0a:	2003      	movs	r0, #3
 8000e0c:	f000 f903 	bl	8001016 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000e10:	f001 f8f6 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 8000e14:	4601      	mov	r1, r0
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_Init+0x68>)
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	0a1b      	lsrs	r3, r3, #8
 8000e1c:	f003 030f 	and.w	r3, r3, #15
 8000e20:	4a13      	ldr	r2, [pc, #76]	; (8000e70 <HAL_Init+0x6c>)
 8000e22:	5cd3      	ldrb	r3, [r2, r3]
 8000e24:	f003 031f 	and.w	r3, r3, #31
 8000e28:	fa21 f303 	lsr.w	r3, r1, r3
 8000e2c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <HAL_Init+0x68>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	4a0e      	ldr	r2, [pc, #56]	; (8000e70 <HAL_Init+0x6c>)
 8000e38:	5cd3      	ldrb	r3, [r2, r3]
 8000e3a:	f003 031f 	and.w	r3, r3, #31
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	fa22 f303 	lsr.w	r3, r2, r3
 8000e44:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <HAL_Init+0x70>)
 8000e46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e48:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <HAL_Init+0x74>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff feb4 	bl	8000bbc <HAL_InitTick>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e002      	b.n	8000e64 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e5e:	f7ff fe49 	bl	8000af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	58024400 	.word	0x58024400
 8000e70:	08007dac 	.word	0x08007dac
 8000e74:	24000004 	.word	0x24000004
 8000e78:	24000000 	.word	0x24000000

08000e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_IncTick+0x20>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e8e:	6013      	str	r3, [r2, #0]
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	2400000c 	.word	0x2400000c
 8000ea0:	24004a1c 	.word	0x24004a1c

08000ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <HAL_GetTick+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	24004a1c 	.word	0x24004a1c

08000ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <__NVIC_SetPriorityGrouping+0x40>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eea:	4a04      	ldr	r2, [pc, #16]	; (8000efc <__NVIC_SetPriorityGrouping+0x40>)
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	60d3      	str	r3, [r2, #12]
}
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00
 8000f00:	05fa0000 	.word	0x05fa0000

08000f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <__NVIC_GetPriorityGrouping+0x18>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	0a1b      	lsrs	r3, r3, #8
 8000f0e:	f003 0307 	and.w	r3, r3, #7
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	db0b      	blt.n	8000f4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	f003 021f 	and.w	r2, r3, #31
 8000f38:	4907      	ldr	r1, [pc, #28]	; (8000f58 <__NVIC_EnableIRQ+0x38>)
 8000f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f3e:	095b      	lsrs	r3, r3, #5
 8000f40:	2001      	movs	r0, #1
 8000f42:	fa00 f202 	lsl.w	r2, r0, r2
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000e100 	.word	0xe000e100

08000f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db0a      	blt.n	8000f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <__NVIC_SetPriority+0x4c>)
 8000f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	440b      	add	r3, r1
 8000f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f84:	e00a      	b.n	8000f9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4908      	ldr	r1, [pc, #32]	; (8000fac <__NVIC_SetPriority+0x50>)
 8000f8c:	88fb      	ldrh	r3, [r7, #6]
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	3b04      	subs	r3, #4
 8000f94:	0112      	lsls	r2, r2, #4
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	440b      	add	r3, r1
 8000f9a:	761a      	strb	r2, [r3, #24]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000e100 	.word	0xe000e100
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f1c3 0307 	rsb	r3, r3, #7
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	bf28      	it	cs
 8000fce:	2304      	movcs	r3, #4
 8000fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d902      	bls.n	8000fe0 <NVIC_EncodePriority+0x30>
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3b03      	subs	r3, #3
 8000fde:	e000      	b.n	8000fe2 <NVIC_EncodePriority+0x32>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	43d9      	mvns	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	4313      	orrs	r3, r2
         );
}
 800100a:	4618      	mov	r0, r3
 800100c:	3724      	adds	r7, #36	; 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ff4c 	bl	8000ebc <__NVIC_SetPriorityGrouping>
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
 8001038:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800103a:	f7ff ff63 	bl	8000f04 <__NVIC_GetPriorityGrouping>
 800103e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	68b9      	ldr	r1, [r7, #8]
 8001044:	6978      	ldr	r0, [r7, #20]
 8001046:	f7ff ffb3 	bl	8000fb0 <NVIC_EncodePriority>
 800104a:	4602      	mov	r2, r0
 800104c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001050:	4611      	mov	r1, r2
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff82 	bl	8000f5c <__NVIC_SetPriority>
}
 8001058:	bf00      	nop
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800106a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ff56 	bl	8000f20 <__NVIC_EnableIRQ>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	; 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800108a:	4b89      	ldr	r3, [pc, #548]	; (80012b0 <HAL_GPIO_Init+0x234>)
 800108c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800108e:	e194      	b.n	80013ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	2101      	movs	r1, #1
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 8186 	beq.w	80013b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d00b      	beq.n	80010c8 <HAL_GPIO_Init+0x4c>
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d007      	beq.n	80010c8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010bc:	2b11      	cmp	r3, #17
 80010be:	d003      	beq.n	80010c8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b12      	cmp	r3, #18
 80010c6:	d130      	bne.n	800112a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	2203      	movs	r2, #3
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010fe:	2201      	movs	r2, #1
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	091b      	lsrs	r3, r3, #4
 8001114:	f003 0201 	and.w	r2, r3, #1
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	2203      	movs	r2, #3
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b02      	cmp	r3, #2
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0xee>
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b12      	cmp	r3, #18
 8001168:	d123      	bne.n	80011b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	08da      	lsrs	r2, r3, #3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3208      	adds	r2, #8
 8001172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	220f      	movs	r2, #15
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	691a      	ldr	r2, [r3, #16]
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	08da      	lsrs	r2, r3, #3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3208      	adds	r2, #8
 80011ac:	69b9      	ldr	r1, [r7, #24]
 80011ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	2203      	movs	r2, #3
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0203 	and.w	r2, r3, #3
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 80e0 	beq.w	80013b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f4:	4b2f      	ldr	r3, [pc, #188]	; (80012b4 <HAL_GPIO_Init+0x238>)
 80011f6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011fa:	4a2e      	ldr	r2, [pc, #184]	; (80012b4 <HAL_GPIO_Init+0x238>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001204:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <HAL_GPIO_Init+0x238>)
 8001206:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001212:	4a29      	ldr	r2, [pc, #164]	; (80012b8 <HAL_GPIO_Init+0x23c>)
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	089b      	lsrs	r3, r3, #2
 8001218:	3302      	adds	r3, #2
 800121a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	220f      	movs	r2, #15
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a20      	ldr	r2, [pc, #128]	; (80012bc <HAL_GPIO_Init+0x240>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d052      	beq.n	80012e4 <HAL_GPIO_Init+0x268>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a1f      	ldr	r2, [pc, #124]	; (80012c0 <HAL_GPIO_Init+0x244>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d031      	beq.n	80012aa <HAL_GPIO_Init+0x22e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a1e      	ldr	r2, [pc, #120]	; (80012c4 <HAL_GPIO_Init+0x248>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d02b      	beq.n	80012a6 <HAL_GPIO_Init+0x22a>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a1d      	ldr	r2, [pc, #116]	; (80012c8 <HAL_GPIO_Init+0x24c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d025      	beq.n	80012a2 <HAL_GPIO_Init+0x226>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a1c      	ldr	r2, [pc, #112]	; (80012cc <HAL_GPIO_Init+0x250>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d01f      	beq.n	800129e <HAL_GPIO_Init+0x222>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a1b      	ldr	r2, [pc, #108]	; (80012d0 <HAL_GPIO_Init+0x254>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d019      	beq.n	800129a <HAL_GPIO_Init+0x21e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a1a      	ldr	r2, [pc, #104]	; (80012d4 <HAL_GPIO_Init+0x258>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d013      	beq.n	8001296 <HAL_GPIO_Init+0x21a>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a19      	ldr	r2, [pc, #100]	; (80012d8 <HAL_GPIO_Init+0x25c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d00d      	beq.n	8001292 <HAL_GPIO_Init+0x216>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a18      	ldr	r2, [pc, #96]	; (80012dc <HAL_GPIO_Init+0x260>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d007      	beq.n	800128e <HAL_GPIO_Init+0x212>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <HAL_GPIO_Init+0x264>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d101      	bne.n	800128a <HAL_GPIO_Init+0x20e>
 8001286:	2309      	movs	r3, #9
 8001288:	e02d      	b.n	80012e6 <HAL_GPIO_Init+0x26a>
 800128a:	230a      	movs	r3, #10
 800128c:	e02b      	b.n	80012e6 <HAL_GPIO_Init+0x26a>
 800128e:	2308      	movs	r3, #8
 8001290:	e029      	b.n	80012e6 <HAL_GPIO_Init+0x26a>
 8001292:	2307      	movs	r3, #7
 8001294:	e027      	b.n	80012e6 <HAL_GPIO_Init+0x26a>
 8001296:	2306      	movs	r3, #6
 8001298:	e025      	b.n	80012e6 <HAL_GPIO_Init+0x26a>
 800129a:	2305      	movs	r3, #5
 800129c:	e023      	b.n	80012e6 <HAL_GPIO_Init+0x26a>
 800129e:	2304      	movs	r3, #4
 80012a0:	e021      	b.n	80012e6 <HAL_GPIO_Init+0x26a>
 80012a2:	2303      	movs	r3, #3
 80012a4:	e01f      	b.n	80012e6 <HAL_GPIO_Init+0x26a>
 80012a6:	2302      	movs	r3, #2
 80012a8:	e01d      	b.n	80012e6 <HAL_GPIO_Init+0x26a>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e01b      	b.n	80012e6 <HAL_GPIO_Init+0x26a>
 80012ae:	bf00      	nop
 80012b0:	58000080 	.word	0x58000080
 80012b4:	58024400 	.word	0x58024400
 80012b8:	58000400 	.word	0x58000400
 80012bc:	58020000 	.word	0x58020000
 80012c0:	58020400 	.word	0x58020400
 80012c4:	58020800 	.word	0x58020800
 80012c8:	58020c00 	.word	0x58020c00
 80012cc:	58021000 	.word	0x58021000
 80012d0:	58021400 	.word	0x58021400
 80012d4:	58021800 	.word	0x58021800
 80012d8:	58021c00 	.word	0x58021c00
 80012dc:	58022000 	.word	0x58022000
 80012e0:	58022400 	.word	0x58022400
 80012e4:	2300      	movs	r3, #0
 80012e6:	69fa      	ldr	r2, [r7, #28]
 80012e8:	f002 0203 	and.w	r2, r2, #3
 80012ec:	0092      	lsls	r2, r2, #2
 80012ee:	4093      	lsls	r3, r2
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012f6:	4938      	ldr	r1, [pc, #224]	; (80013d8 <HAL_GPIO_Init+0x35c>)
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	3302      	adds	r3, #2
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	43db      	mvns	r3, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4013      	ands	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800137e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001386:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80013ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	3301      	adds	r3, #1
 80013b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	fa22 f303 	lsr.w	r3, r2, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f47f ae63 	bne.w	8001090 <HAL_GPIO_Init+0x14>
  }
}
 80013ca:	bf00      	nop
 80013cc:	3724      	adds	r7, #36	; 0x24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	58000400 	.word	0x58000400

080013dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	807b      	strh	r3, [r7, #2]
 80013e8:	4613      	mov	r3, r2
 80013ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013ec:	787b      	ldrb	r3, [r7, #1]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013f2:	887a      	ldrh	r2, [r7, #2]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80013f8:	e003      	b.n	8001402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013fa:	887b      	ldrh	r3, [r7, #2]
 80013fc:	041a      	lsls	r2, r3, #16
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	619a      	str	r2, [r3, #24]
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001418:	4b29      	ldr	r3, [pc, #164]	; (80014c0 <HAL_PWREx_ConfigSupply+0xb0>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	f003 0307 	and.w	r3, r3, #7
 8001420:	2b06      	cmp	r3, #6
 8001422:	d00a      	beq.n	800143a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001424:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	429a      	cmp	r2, r3
 8001430:	d001      	beq.n	8001436 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e040      	b.n	80014b8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	e03e      	b.n	80014b8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800143a:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <HAL_PWREx_ConfigSupply+0xb0>)
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001442:	491f      	ldr	r1, [pc, #124]	; (80014c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4313      	orrs	r3, r2
 8001448:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800144a:	f7ff fd2b 	bl	8000ea4 <HAL_GetTick>
 800144e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001450:	e009      	b.n	8001466 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001452:	f7ff fd27 	bl	8000ea4 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001460:	d901      	bls.n	8001466 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e028      	b.n	80014b8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001466:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800146e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001472:	d1ee      	bne.n	8001452 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b1e      	cmp	r3, #30
 8001478:	d008      	beq.n	800148c <HAL_PWREx_ConfigSupply+0x7c>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b2e      	cmp	r3, #46	; 0x2e
 800147e:	d005      	beq.n	800148c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b1d      	cmp	r3, #29
 8001484:	d002      	beq.n	800148c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b2d      	cmp	r3, #45	; 0x2d
 800148a:	d114      	bne.n	80014b6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800148c:	f7ff fd0a 	bl	8000ea4 <HAL_GetTick>
 8001490:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001492:	e009      	b.n	80014a8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001494:	f7ff fd06 	bl	8000ea4 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014a2:	d901      	bls.n	80014a8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e007      	b.n	80014b8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <HAL_PWREx_ConfigSupply+0xb0>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b4:	d1ee      	bne.n	8001494 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	58024800 	.word	0x58024800

080014c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08c      	sub	sp, #48	; 0x30
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e3d7      	b.n	8001c86 <HAL_RCC_OscConfig+0x7c2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 80b3 	beq.w	800164a <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014e4:	4b90      	ldr	r3, [pc, #576]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014ee:	4b8e      	ldr	r3, [pc, #568]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 80014f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80014f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f6:	2b10      	cmp	r3, #16
 80014f8:	d007      	beq.n	800150a <HAL_RCC_OscConfig+0x46>
 80014fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fc:	2b18      	cmp	r3, #24
 80014fe:	d112      	bne.n	8001526 <HAL_RCC_OscConfig+0x62>
 8001500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d10d      	bne.n	8001526 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150a:	4b87      	ldr	r3, [pc, #540]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 8098 	beq.w	8001648 <HAL_RCC_OscConfig+0x184>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	f040 8093 	bne.w	8001648 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e3af      	b.n	8001c86 <HAL_RCC_OscConfig+0x7c2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152e:	d106      	bne.n	800153e <HAL_RCC_OscConfig+0x7a>
 8001530:	4b7d      	ldr	r3, [pc, #500]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a7c      	ldr	r2, [pc, #496]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 8001536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	e058      	b.n	80015f0 <HAL_RCC_OscConfig+0x12c>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d112      	bne.n	800156c <HAL_RCC_OscConfig+0xa8>
 8001546:	4b78      	ldr	r3, [pc, #480]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a77      	ldr	r2, [pc, #476]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 800154c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b75      	ldr	r3, [pc, #468]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a74      	ldr	r2, [pc, #464]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 8001558:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	4b72      	ldr	r3, [pc, #456]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a71      	ldr	r2, [pc, #452]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 8001564:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e041      	b.n	80015f0 <HAL_RCC_OscConfig+0x12c>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001574:	d112      	bne.n	800159c <HAL_RCC_OscConfig+0xd8>
 8001576:	4b6c      	ldr	r3, [pc, #432]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a6b      	ldr	r2, [pc, #428]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 800157c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	4b69      	ldr	r3, [pc, #420]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a68      	ldr	r2, [pc, #416]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 8001588:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	4b66      	ldr	r3, [pc, #408]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a65      	ldr	r2, [pc, #404]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 8001594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e029      	b.n	80015f0 <HAL_RCC_OscConfig+0x12c>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80015a4:	d112      	bne.n	80015cc <HAL_RCC_OscConfig+0x108>
 80015a6:	4b60      	ldr	r3, [pc, #384]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a5f      	ldr	r2, [pc, #380]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 80015ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	4b5d      	ldr	r3, [pc, #372]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a5c      	ldr	r2, [pc, #368]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 80015b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	4b5a      	ldr	r3, [pc, #360]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a59      	ldr	r2, [pc, #356]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 80015c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	e011      	b.n	80015f0 <HAL_RCC_OscConfig+0x12c>
 80015cc:	4b56      	ldr	r3, [pc, #344]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a55      	ldr	r2, [pc, #340]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 80015d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	4b53      	ldr	r3, [pc, #332]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a52      	ldr	r2, [pc, #328]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 80015de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	4b50      	ldr	r3, [pc, #320]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a4f      	ldr	r2, [pc, #316]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 80015ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80015ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d013      	beq.n	8001620 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f8:	f7ff fc54 	bl	8000ea4 <HAL_GetTick>
 80015fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001600:	f7ff fc50 	bl	8000ea4 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b64      	cmp	r3, #100	; 0x64
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e339      	b.n	8001c86 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001612:	4b45      	ldr	r3, [pc, #276]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0f0      	beq.n	8001600 <HAL_RCC_OscConfig+0x13c>
 800161e:	e014      	b.n	800164a <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001620:	f7ff fc40 	bl	8000ea4 <HAL_GetTick>
 8001624:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001628:	f7ff fc3c 	bl	8000ea4 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b64      	cmp	r3, #100	; 0x64
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e325      	b.n	8001c86 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800163a:	4b3b      	ldr	r3, [pc, #236]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x164>
 8001646:	e000      	b.n	800164a <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d070      	beq.n	8001738 <HAL_RCC_OscConfig+0x274>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001656:	4b34      	ldr	r3, [pc, #208]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800165e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001660:	4b31      	ldr	r3, [pc, #196]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001666:	6a3b      	ldr	r3, [r7, #32]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d007      	beq.n	800167c <HAL_RCC_OscConfig+0x1b8>
 800166c:	6a3b      	ldr	r3, [r7, #32]
 800166e:	2b18      	cmp	r3, #24
 8001670:	d11b      	bne.n	80016aa <HAL_RCC_OscConfig+0x1e6>
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	2b00      	cmp	r3, #0
 800167a:	d116      	bne.n	80016aa <HAL_RCC_OscConfig+0x1e6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800167c:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	d005      	beq.n	8001694 <HAL_RCC_OscConfig+0x1d0>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_RCC_OscConfig+0x1d0>
      {
        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e2f8      	b.n	8001c86 <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001694:	4b24      	ldr	r3, [pc, #144]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	061b      	lsls	r3, r3, #24
 80016a2:	4921      	ldr	r1, [pc, #132]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016a8:	e046      	b.n	8001738 <HAL_RCC_OscConfig+0x274>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d026      	beq.n	8001700 <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016b2:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 0219 	bic.w	r2, r3, #25
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	491a      	ldr	r1, [pc, #104]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c4:	f7ff fbee 	bl	8000ea4 <HAL_GetTick>
 80016c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016cc:	f7ff fbea 	bl	8000ea4 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e2d3      	b.n	8001c86 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0x208>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	061b      	lsls	r3, r3, #24
 80016f8:	490b      	ldr	r1, [pc, #44]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	604b      	str	r3, [r1, #4]
 80016fe:	e01b      	b.n	8001738 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a08      	ldr	r2, [pc, #32]	; (8001728 <HAL_RCC_OscConfig+0x264>)
 8001706:	f023 0301 	bic.w	r3, r3, #1
 800170a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170c:	f7ff fbca 	bl	8000ea4 <HAL_GetTick>
 8001710:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001712:	e00b      	b.n	800172c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001714:	f7ff fbc6 	bl	8000ea4 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d904      	bls.n	800172c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e2af      	b.n	8001c86 <HAL_RCC_OscConfig+0x7c2>
 8001726:	bf00      	nop
 8001728:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800172c:	4b99      	ldr	r3, [pc, #612]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1ed      	bne.n	8001714 <HAL_RCC_OscConfig+0x250>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0310 	and.w	r3, r3, #16
 8001740:	2b00      	cmp	r3, #0
 8001742:	d06a      	beq.n	800181a <HAL_RCC_OscConfig+0x356>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001744:	4b93      	ldr	r3, [pc, #588]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800174c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800174e:	4b91      	ldr	r3, [pc, #580]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001752:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	2b08      	cmp	r3, #8
 8001758:	d007      	beq.n	800176a <HAL_RCC_OscConfig+0x2a6>
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	2b18      	cmp	r3, #24
 800175e:	d11b      	bne.n	8001798 <HAL_RCC_OscConfig+0x2d4>
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	2b01      	cmp	r3, #1
 8001768:	d116      	bne.n	8001798 <HAL_RCC_OscConfig+0x2d4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800176a:	4b8a      	ldr	r3, [pc, #552]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001772:	2b00      	cmp	r3, #0
 8001774:	d005      	beq.n	8001782 <HAL_RCC_OscConfig+0x2be>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	2b80      	cmp	r3, #128	; 0x80
 800177c:	d001      	beq.n	8001782 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e281      	b.n	8001c86 <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001782:	4b84      	ldr	r3, [pc, #528]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	061b      	lsls	r3, r3, #24
 8001790:	4980      	ldr	r1, [pc, #512]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001792:	4313      	orrs	r3, r2
 8001794:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001796:	e040      	b.n	800181a <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d023      	beq.n	80017e8 <HAL_RCC_OscConfig+0x324>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80017a0:	4b7c      	ldr	r3, [pc, #496]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a7b      	ldr	r2, [pc, #492]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 80017a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ac:	f7ff fb7a 	bl	8000ea4 <HAL_GetTick>
 80017b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x302>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80017b4:	f7ff fb76 	bl	8000ea4 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e25f      	b.n	8001c86 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017c6:	4b73      	ldr	r3, [pc, #460]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0x2f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017d2:	4b70      	ldr	r3, [pc, #448]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	061b      	lsls	r3, r3, #24
 80017e0:	496c      	ldr	r1, [pc, #432]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	60cb      	str	r3, [r1, #12]
 80017e6:	e018      	b.n	800181a <HAL_RCC_OscConfig+0x356>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80017e8:	4b6a      	ldr	r3, [pc, #424]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a69      	ldr	r2, [pc, #420]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 80017ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f4:	f7ff fb56 	bl	8000ea4 <HAL_GetTick>
 80017f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x34a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80017fc:	f7ff fb52 	bl	8000ea4 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x34a>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e23b      	b.n	8001c86 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800180e:	4b61      	ldr	r3, [pc, #388]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x338>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	2b00      	cmp	r3, #0
 8001824:	d036      	beq.n	8001894 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d019      	beq.n	8001862 <HAL_RCC_OscConfig+0x39e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800182e:	4b59      	ldr	r3, [pc, #356]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001832:	4a58      	ldr	r2, [pc, #352]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183a:	f7ff fb33 	bl	8000ea4 <HAL_GetTick>
 800183e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x390>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001842:	f7ff fb2f 	bl	8000ea4 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x390>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e218      	b.n	8001c86 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001854:	4b4f      	ldr	r3, [pc, #316]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x37e>
 8001860:	e018      	b.n	8001894 <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001862:	4b4c      	ldr	r3, [pc, #304]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001866:	4a4b      	ldr	r2, [pc, #300]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001868:	f023 0301 	bic.w	r3, r3, #1
 800186c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186e:	f7ff fb19 	bl	8000ea4 <HAL_GetTick>
 8001872:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001876:	f7ff fb15 	bl	8000ea4 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e1fe      	b.n	8001c86 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001888:	4b42      	ldr	r3, [pc, #264]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 800188a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1f0      	bne.n	8001876 <HAL_RCC_OscConfig+0x3b2>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0320 	and.w	r3, r3, #32
 800189c:	2b00      	cmp	r3, #0
 800189e:	d036      	beq.n	800190e <HAL_RCC_OscConfig+0x44a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d019      	beq.n	80018dc <HAL_RCC_OscConfig+0x418>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018a8:	4b3a      	ldr	r3, [pc, #232]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a39      	ldr	r2, [pc, #228]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 80018ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80018b4:	f7ff faf6 	bl	8000ea4 <HAL_GetTick>
 80018b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80018bc:	f7ff faf2 	bl	8000ea4 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e1db      	b.n	8001c86 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018ce:	4b31      	ldr	r3, [pc, #196]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x3f8>
 80018da:	e018      	b.n	800190e <HAL_RCC_OscConfig+0x44a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018dc:	4b2d      	ldr	r3, [pc, #180]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a2c      	ldr	r2, [pc, #176]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 80018e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80018e8:	f7ff fadc 	bl	8000ea4 <HAL_GetTick>
 80018ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x43e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80018f0:	f7ff fad8 	bl	8000ea4 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e1c1      	b.n	8001c86 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001902:	4b24      	ldr	r3, [pc, #144]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f0      	bne.n	80018f0 <HAL_RCC_OscConfig+0x42c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 80af 	beq.w	8001a7a <HAL_RCC_OscConfig+0x5b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800191c:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <HAL_RCC_OscConfig+0x4d4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a1d      	ldr	r2, [pc, #116]	; (8001998 <HAL_RCC_OscConfig+0x4d4>)
 8001922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001926:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001928:	f7ff fabc 	bl	8000ea4 <HAL_GetTick>
 800192c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x47e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001930:	f7ff fab8 	bl	8000ea4 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	; 0x64
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e1a1      	b.n	8001c86 <HAL_RCC_OscConfig+0x7c2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <HAL_RCC_OscConfig+0x4d4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0x46c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d106      	bne.n	8001964 <HAL_RCC_OscConfig+0x4a0>
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195a:	4a0e      	ldr	r2, [pc, #56]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6713      	str	r3, [r2, #112]	; 0x70
 8001962:	e05b      	b.n	8001a1c <HAL_RCC_OscConfig+0x558>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d117      	bne.n	800199c <HAL_RCC_OscConfig+0x4d8>
 800196c:	4b09      	ldr	r3, [pc, #36]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 800196e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001970:	4a08      	ldr	r2, [pc, #32]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001972:	f023 0301 	bic.w	r3, r3, #1
 8001976:	6713      	str	r3, [r2, #112]	; 0x70
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 800197a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197c:	4a05      	ldr	r2, [pc, #20]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 800197e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001982:	6713      	str	r3, [r2, #112]	; 0x70
 8001984:	4b03      	ldr	r3, [pc, #12]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 8001986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001988:	4a02      	ldr	r2, [pc, #8]	; (8001994 <HAL_RCC_OscConfig+0x4d0>)
 800198a:	f023 0304 	bic.w	r3, r3, #4
 800198e:	6713      	str	r3, [r2, #112]	; 0x70
 8001990:	e044      	b.n	8001a1c <HAL_RCC_OscConfig+0x558>
 8001992:	bf00      	nop
 8001994:	58024400 	.word	0x58024400
 8001998:	58024800 	.word	0x58024800
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d112      	bne.n	80019ca <HAL_RCC_OscConfig+0x506>
 80019a4:	4b95      	ldr	r3, [pc, #596]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 80019a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a8:	4a94      	ldr	r2, [pc, #592]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 80019aa:	f043 0304 	orr.w	r3, r3, #4
 80019ae:	6713      	str	r3, [r2, #112]	; 0x70
 80019b0:	4b92      	ldr	r3, [pc, #584]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 80019b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b4:	4a91      	ldr	r2, [pc, #580]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 80019b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019ba:	6713      	str	r3, [r2, #112]	; 0x70
 80019bc:	4b8f      	ldr	r3, [pc, #572]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 80019be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c0:	4a8e      	ldr	r2, [pc, #568]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6713      	str	r3, [r2, #112]	; 0x70
 80019c8:	e028      	b.n	8001a1c <HAL_RCC_OscConfig+0x558>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b85      	cmp	r3, #133	; 0x85
 80019d0:	d112      	bne.n	80019f8 <HAL_RCC_OscConfig+0x534>
 80019d2:	4b8a      	ldr	r3, [pc, #552]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 80019d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d6:	4a89      	ldr	r2, [pc, #548]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 80019d8:	f043 0304 	orr.w	r3, r3, #4
 80019dc:	6713      	str	r3, [r2, #112]	; 0x70
 80019de:	4b87      	ldr	r3, [pc, #540]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 80019e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e2:	4a86      	ldr	r2, [pc, #536]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 80019e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019e8:	6713      	str	r3, [r2, #112]	; 0x70
 80019ea:	4b84      	ldr	r3, [pc, #528]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 80019ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ee:	4a83      	ldr	r2, [pc, #524]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6713      	str	r3, [r2, #112]	; 0x70
 80019f6:	e011      	b.n	8001a1c <HAL_RCC_OscConfig+0x558>
 80019f8:	4b80      	ldr	r3, [pc, #512]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 80019fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fc:	4a7f      	ldr	r2, [pc, #508]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 80019fe:	f023 0301 	bic.w	r3, r3, #1
 8001a02:	6713      	str	r3, [r2, #112]	; 0x70
 8001a04:	4b7d      	ldr	r3, [pc, #500]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a08:	4a7c      	ldr	r2, [pc, #496]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001a0a:	f023 0304 	bic.w	r3, r3, #4
 8001a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a10:	4b7a      	ldr	r3, [pc, #488]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a14:	4a79      	ldr	r2, [pc, #484]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001a16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d015      	beq.n	8001a50 <HAL_RCC_OscConfig+0x58c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a24:	f7ff fa3e 	bl	8000ea4 <HAL_GetTick>
 8001a28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a2a:	e00a      	b.n	8001a42 <HAL_RCC_OscConfig+0x57e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a2c:	f7ff fa3a 	bl	8000ea4 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e121      	b.n	8001c86 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a42:	4b6e      	ldr	r3, [pc, #440]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0ee      	beq.n	8001a2c <HAL_RCC_OscConfig+0x568>
 8001a4e:	e014      	b.n	8001a7a <HAL_RCC_OscConfig+0x5b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a50:	f7ff fa28 	bl	8000ea4 <HAL_GetTick>
 8001a54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_OscConfig+0x5aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a58:	f7ff fa24 	bl	8000ea4 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e10b      	b.n	8001c86 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a6e:	4b63      	ldr	r3, [pc, #396]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1ee      	bne.n	8001a58 <HAL_RCC_OscConfig+0x594>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8100 	beq.w	8001c84 <HAL_RCC_OscConfig+0x7c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001a84:	4b5d      	ldr	r3, [pc, #372]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a8c:	2b18      	cmp	r3, #24
 8001a8e:	f000 80bb 	beq.w	8001c08 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	f040 8095 	bne.w	8001bc6 <HAL_RCC_OscConfig+0x702>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9c:	4b57      	ldr	r3, [pc, #348]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a56      	ldr	r2, [pc, #344]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7ff f9fc 	bl	8000ea4 <HAL_GetTick>
 8001aac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab0:	f7ff f9f8 	bl	8000ea4 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e0e1      	b.n	8001c86 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ac2:	4b4e      	ldr	r3, [pc, #312]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x5ec>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ace:	4b4b      	ldr	r3, [pc, #300]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001ad0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ad2:	4b4b      	ldr	r3, [pc, #300]	; (8001c00 <HAL_RCC_OscConfig+0x73c>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ade:	0112      	lsls	r2, r2, #4
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	4946      	ldr	r1, [pc, #280]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	628b      	str	r3, [r1, #40]	; 0x28
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aec:	3b01      	subs	r3, #1
 8001aee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af6:	3b01      	subs	r3, #1
 8001af8:	025b      	lsls	r3, r3, #9
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	431a      	orrs	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b02:	3b01      	subs	r3, #1
 8001b04:	041b      	lsls	r3, r3, #16
 8001b06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b10:	3b01      	subs	r3, #1
 8001b12:	061b      	lsls	r3, r3, #24
 8001b14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001b18:	4938      	ldr	r1, [pc, #224]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001b1e:	4b37      	ldr	r3, [pc, #220]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b22:	4a36      	ldr	r2, [pc, #216]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b2a:	4b34      	ldr	r3, [pc, #208]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b2e:	4b35      	ldr	r3, [pc, #212]	; (8001c04 <HAL_RCC_OscConfig+0x740>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b36:	00d2      	lsls	r2, r2, #3
 8001b38:	4930      	ldr	r1, [pc, #192]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001b3e:	4b2f      	ldr	r3, [pc, #188]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b42:	f023 020c 	bic.w	r2, r3, #12
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	492c      	ldr	r1, [pc, #176]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001b50:	4b2a      	ldr	r3, [pc, #168]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	f023 0202 	bic.w	r2, r3, #2
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5c:	4927      	ldr	r1, [pc, #156]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001b62:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	4a25      	ldr	r2, [pc, #148]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b6e:	4b23      	ldr	r3, [pc, #140]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b72:	4a22      	ldr	r2, [pc, #136]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001b7a:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7e:	4a1f      	ldr	r2, [pc, #124]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001b86:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8a:	4a1c      	ldr	r2, [pc, #112]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b92:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a19      	ldr	r2, [pc, #100]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001b98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9e:	f7ff f981 	bl	8000ea4 <HAL_GetTick>
 8001ba2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x6f4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba6:	f7ff f97d 	bl	8000ea4 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e066      	b.n	8001c86 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bb8:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0f0      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x6e2>
 8001bc4:	e05e      	b.n	8001c84 <HAL_RCC_OscConfig+0x7c0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc6:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a0c      	ldr	r2, [pc, #48]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001bcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd2:	f7ff f967 	bl	8000ea4 <HAL_GetTick>
 8001bd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x728>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bda:	f7ff f963 	bl	8000ea4 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x728>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e04c      	b.n	8001c86 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bec:	4b03      	ldr	r3, [pc, #12]	; (8001bfc <HAL_RCC_OscConfig+0x738>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1f0      	bne.n	8001bda <HAL_RCC_OscConfig+0x716>
 8001bf8:	e044      	b.n	8001c84 <HAL_RCC_OscConfig+0x7c0>
 8001bfa:	bf00      	nop
 8001bfc:	58024400 	.word	0x58024400
 8001c00:	fffffc0c 	.word	0xfffffc0c
 8001c04:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001c08:	4b21      	ldr	r3, [pc, #132]	; (8001c90 <HAL_RCC_OscConfig+0x7cc>)
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001c0e:	4b20      	ldr	r3, [pc, #128]	; (8001c90 <HAL_RCC_OscConfig+0x7cc>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d031      	beq.n	8001c80 <HAL_RCC_OscConfig+0x7bc>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	f003 0203 	and.w	r2, r3, #3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d12a      	bne.n	8001c80 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d122      	bne.n	8001c80 <HAL_RCC_OscConfig+0x7bc>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d11a      	bne.n	8001c80 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	0a5b      	lsrs	r3, r3, #9
 8001c4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c56:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d111      	bne.n	8001c80 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	0c1b      	lsrs	r3, r3, #16
 8001c60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c68:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d108      	bne.n	8001c80 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	0e1b      	lsrs	r3, r3, #24
 8001c72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_OscConfig+0x7c0>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e000      	b.n	8001c86 <HAL_RCC_OscConfig+0x7c2>
      }
    }
  }
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3730      	adds	r7, #48	; 0x30
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	58024400 	.word	0x58024400

08001c94 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e19c      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca8:	4b8a      	ldr	r3, [pc, #552]	; (8001ed4 <HAL_RCC_ClockConfig+0x240>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d910      	bls.n	8001cd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb6:	4b87      	ldr	r3, [pc, #540]	; (8001ed4 <HAL_RCC_ClockConfig+0x240>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f023 020f 	bic.w	r2, r3, #15
 8001cbe:	4985      	ldr	r1, [pc, #532]	; (8001ed4 <HAL_RCC_ClockConfig+0x240>)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc6:	4b83      	ldr	r3, [pc, #524]	; (8001ed4 <HAL_RCC_ClockConfig+0x240>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e184      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d010      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	4b7b      	ldr	r3, [pc, #492]	; (8001ed8 <HAL_RCC_ClockConfig+0x244>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d908      	bls.n	8001d06 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001cf4:	4b78      	ldr	r3, [pc, #480]	; (8001ed8 <HAL_RCC_ClockConfig+0x244>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	4975      	ldr	r1, [pc, #468]	; (8001ed8 <HAL_RCC_ClockConfig+0x244>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d010      	beq.n	8001d34 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	4b70      	ldr	r3, [pc, #448]	; (8001ed8 <HAL_RCC_ClockConfig+0x244>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d908      	bls.n	8001d34 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d22:	4b6d      	ldr	r3, [pc, #436]	; (8001ed8 <HAL_RCC_ClockConfig+0x244>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	496a      	ldr	r1, [pc, #424]	; (8001ed8 <HAL_RCC_ClockConfig+0x244>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d010      	beq.n	8001d62 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	699a      	ldr	r2, [r3, #24]
 8001d44:	4b64      	ldr	r3, [pc, #400]	; (8001ed8 <HAL_RCC_ClockConfig+0x244>)
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d908      	bls.n	8001d62 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d50:	4b61      	ldr	r3, [pc, #388]	; (8001ed8 <HAL_RCC_ClockConfig+0x244>)
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	495e      	ldr	r1, [pc, #376]	; (8001ed8 <HAL_RCC_ClockConfig+0x244>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0320 	and.w	r3, r3, #32
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d010      	beq.n	8001d90 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69da      	ldr	r2, [r3, #28]
 8001d72:	4b59      	ldr	r3, [pc, #356]	; (8001ed8 <HAL_RCC_ClockConfig+0x244>)
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d908      	bls.n	8001d90 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001d7e:	4b56      	ldr	r3, [pc, #344]	; (8001ed8 <HAL_RCC_ClockConfig+0x244>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	4953      	ldr	r1, [pc, #332]	; (8001ed8 <HAL_RCC_ClockConfig+0x244>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d010      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	4b4d      	ldr	r3, [pc, #308]	; (8001ed8 <HAL_RCC_ClockConfig+0x244>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	f003 030f 	and.w	r3, r3, #15
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d908      	bls.n	8001dbe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dac:	4b4a      	ldr	r3, [pc, #296]	; (8001ed8 <HAL_RCC_ClockConfig+0x244>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	f023 020f 	bic.w	r2, r3, #15
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	4947      	ldr	r1, [pc, #284]	; (8001ed8 <HAL_RCC_ClockConfig+0x244>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d055      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001dca:	4b43      	ldr	r3, [pc, #268]	; (8001ed8 <HAL_RCC_ClockConfig+0x244>)
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	4940      	ldr	r1, [pc, #256]	; (8001ed8 <HAL_RCC_ClockConfig+0x244>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d107      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001de4:	4b3c      	ldr	r3, [pc, #240]	; (8001ed8 <HAL_RCC_ClockConfig+0x244>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d121      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0f6      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d107      	bne.n	8001e0c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dfc:	4b36      	ldr	r3, [pc, #216]	; (8001ed8 <HAL_RCC_ClockConfig+0x244>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d115      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0ea      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d107      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e14:	4b30      	ldr	r3, [pc, #192]	; (8001ed8 <HAL_RCC_ClockConfig+0x244>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d109      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0de      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e24:	4b2c      	ldr	r3, [pc, #176]	; (8001ed8 <HAL_RCC_ClockConfig+0x244>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0d6      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e34:	4b28      	ldr	r3, [pc, #160]	; (8001ed8 <HAL_RCC_ClockConfig+0x244>)
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	f023 0207 	bic.w	r2, r3, #7
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	4925      	ldr	r1, [pc, #148]	; (8001ed8 <HAL_RCC_ClockConfig+0x244>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e46:	f7ff f82d 	bl	8000ea4 <HAL_GetTick>
 8001e4a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4c:	e00a      	b.n	8001e64 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4e:	f7ff f829 	bl	8000ea4 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e0be      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e64:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <HAL_RCC_ClockConfig+0x244>)
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d1eb      	bne.n	8001e4e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d010      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <HAL_RCC_ClockConfig+0x244>)
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d208      	bcs.n	8001ea4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e92:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <HAL_RCC_ClockConfig+0x244>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f023 020f 	bic.w	r2, r3, #15
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	490e      	ldr	r1, [pc, #56]	; (8001ed8 <HAL_RCC_ClockConfig+0x244>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_RCC_ClockConfig+0x240>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d214      	bcs.n	8001edc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb2:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <HAL_RCC_ClockConfig+0x240>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f023 020f 	bic.w	r2, r3, #15
 8001eba:	4906      	ldr	r1, [pc, #24]	; (8001ed4 <HAL_RCC_ClockConfig+0x240>)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec2:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <HAL_RCC_ClockConfig+0x240>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d005      	beq.n	8001edc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e086      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x34e>
 8001ed4:	52002000 	.word	0x52002000
 8001ed8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d010      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	4b3f      	ldr	r3, [pc, #252]	; (8001fec <HAL_RCC_ClockConfig+0x358>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d208      	bcs.n	8001f0a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ef8:	4b3c      	ldr	r3, [pc, #240]	; (8001fec <HAL_RCC_ClockConfig+0x358>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	4939      	ldr	r1, [pc, #228]	; (8001fec <HAL_RCC_ClockConfig+0x358>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d010      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	4b34      	ldr	r3, [pc, #208]	; (8001fec <HAL_RCC_ClockConfig+0x358>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d208      	bcs.n	8001f38 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f26:	4b31      	ldr	r3, [pc, #196]	; (8001fec <HAL_RCC_ClockConfig+0x358>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	492e      	ldr	r1, [pc, #184]	; (8001fec <HAL_RCC_ClockConfig+0x358>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0310 	and.w	r3, r3, #16
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d010      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699a      	ldr	r2, [r3, #24]
 8001f48:	4b28      	ldr	r3, [pc, #160]	; (8001fec <HAL_RCC_ClockConfig+0x358>)
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d208      	bcs.n	8001f66 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f54:	4b25      	ldr	r3, [pc, #148]	; (8001fec <HAL_RCC_ClockConfig+0x358>)
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	4922      	ldr	r1, [pc, #136]	; (8001fec <HAL_RCC_ClockConfig+0x358>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0320 	and.w	r3, r3, #32
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d010      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69da      	ldr	r2, [r3, #28]
 8001f76:	4b1d      	ldr	r3, [pc, #116]	; (8001fec <HAL_RCC_ClockConfig+0x358>)
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d208      	bcs.n	8001f94 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001f82:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <HAL_RCC_ClockConfig+0x358>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	4917      	ldr	r1, [pc, #92]	; (8001fec <HAL_RCC_ClockConfig+0x358>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001f94:	f000 f834 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 8001f98:	4601      	mov	r1, r0
 8001f9a:	4b14      	ldr	r3, [pc, #80]	; (8001fec <HAL_RCC_ClockConfig+0x358>)
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	4a12      	ldr	r2, [pc, #72]	; (8001ff0 <HAL_RCC_ClockConfig+0x35c>)
 8001fa6:	5cd3      	ldrb	r3, [r2, r3]
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	fa21 f303 	lsr.w	r3, r1, r3
 8001fb0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <HAL_RCC_ClockConfig+0x358>)
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	4a0d      	ldr	r2, [pc, #52]	; (8001ff0 <HAL_RCC_ClockConfig+0x35c>)
 8001fbc:	5cd3      	ldrb	r3, [r2, r3]
 8001fbe:	f003 031f 	and.w	r3, r3, #31
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc8:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <HAL_RCC_ClockConfig+0x360>)
 8001fca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fcc:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <HAL_RCC_ClockConfig+0x364>)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <HAL_RCC_ClockConfig+0x368>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fdf0 	bl	8000bbc <HAL_InitTick>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	58024400 	.word	0x58024400
 8001ff0:	08007dac 	.word	0x08007dac
 8001ff4:	24000004 	.word	0x24000004
 8001ff8:	24000000 	.word	0x24000000
 8001ffc:	24000008 	.word	0x24000008

08002000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	; 0x24
 8002004:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002006:	4baf      	ldr	r3, [pc, #700]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800200e:	2b18      	cmp	r3, #24
 8002010:	f200 814e 	bhi.w	80022b0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8002014:	a201      	add	r2, pc, #4	; (adr r2, 800201c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201a:	bf00      	nop
 800201c:	08002081 	.word	0x08002081
 8002020:	080022b1 	.word	0x080022b1
 8002024:	080022b1 	.word	0x080022b1
 8002028:	080022b1 	.word	0x080022b1
 800202c:	080022b1 	.word	0x080022b1
 8002030:	080022b1 	.word	0x080022b1
 8002034:	080022b1 	.word	0x080022b1
 8002038:	080022b1 	.word	0x080022b1
 800203c:	080020a7 	.word	0x080020a7
 8002040:	080022b1 	.word	0x080022b1
 8002044:	080022b1 	.word	0x080022b1
 8002048:	080022b1 	.word	0x080022b1
 800204c:	080022b1 	.word	0x080022b1
 8002050:	080022b1 	.word	0x080022b1
 8002054:	080022b1 	.word	0x080022b1
 8002058:	080022b1 	.word	0x080022b1
 800205c:	080020ad 	.word	0x080020ad
 8002060:	080022b1 	.word	0x080022b1
 8002064:	080022b1 	.word	0x080022b1
 8002068:	080022b1 	.word	0x080022b1
 800206c:	080022b1 	.word	0x080022b1
 8002070:	080022b1 	.word	0x080022b1
 8002074:	080022b1 	.word	0x080022b1
 8002078:	080022b1 	.word	0x080022b1
 800207c:	080020b3 	.word	0x080020b3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002080:	4b90      	ldr	r3, [pc, #576]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0320 	and.w	r3, r3, #32
 8002088:	2b00      	cmp	r3, #0
 800208a:	d009      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800208c:	4b8d      	ldr	r3, [pc, #564]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	08db      	lsrs	r3, r3, #3
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	4a8c      	ldr	r2, [pc, #560]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
 800209c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800209e:	e10a      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80020a0:	4b89      	ldr	r3, [pc, #548]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80020a2:	61bb      	str	r3, [r7, #24]
    break;
 80020a4:	e107      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80020a6:	4b89      	ldr	r3, [pc, #548]	; (80022cc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80020a8:	61bb      	str	r3, [r7, #24]
    break;
 80020aa:	e104      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80020ac:	4b88      	ldr	r3, [pc, #544]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80020ae:	61bb      	str	r3, [r7, #24]
    break;
 80020b0:	e101      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80020b2:	4b84      	ldr	r3, [pc, #528]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80020b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80020bc:	4b81      	ldr	r3, [pc, #516]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80020be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c0:	091b      	lsrs	r3, r3, #4
 80020c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020c6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80020c8:	4b7e      	ldr	r3, [pc, #504]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80020d2:	4b7c      	ldr	r3, [pc, #496]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80020d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d6:	08db      	lsrs	r3, r3, #3
 80020d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	fb02 f303 	mul.w	r3, r2, r3
 80020e2:	ee07 3a90 	vmov	s15, r3
 80020e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ea:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80da 	beq.w	80022aa <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d05a      	beq.n	80021b2 <HAL_RCC_GetSysClockFreq+0x1b2>
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d302      	bcc.n	8002106 <HAL_RCC_GetSysClockFreq+0x106>
 8002100:	2b02      	cmp	r3, #2
 8002102:	d078      	beq.n	80021f6 <HAL_RCC_GetSysClockFreq+0x1f6>
 8002104:	e099      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002106:	4b6f      	ldr	r3, [pc, #444]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0320 	and.w	r3, r3, #32
 800210e:	2b00      	cmp	r3, #0
 8002110:	d02d      	beq.n	800216e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002112:	4b6c      	ldr	r3, [pc, #432]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	08db      	lsrs	r3, r3, #3
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	4a6a      	ldr	r2, [pc, #424]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800211e:	fa22 f303 	lsr.w	r3, r2, r3
 8002122:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	ee07 3a90 	vmov	s15, r3
 800212a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	ee07 3a90 	vmov	s15, r3
 8002134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002138:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800213c:	4b61      	ldr	r3, [pc, #388]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800213e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002144:	ee07 3a90 	vmov	s15, r3
 8002148:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800214c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002150:	eddf 5a60 	vldr	s11, [pc, #384]	; 80022d4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002154:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002158:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800215c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002160:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002168:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800216c:	e087      	b.n	800227e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	ee07 3a90 	vmov	s15, r3
 8002174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002178:	eddf 6a57 	vldr	s13, [pc, #348]	; 80022d8 <HAL_RCC_GetSysClockFreq+0x2d8>
 800217c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002180:	4b50      	ldr	r3, [pc, #320]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002188:	ee07 3a90 	vmov	s15, r3
 800218c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002190:	ed97 6a02 	vldr	s12, [r7, #8]
 8002194:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80022d4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002198:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800219c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80021b0:	e065      	b.n	800227e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	ee07 3a90 	vmov	s15, r3
 80021b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021bc:	eddf 6a47 	vldr	s13, [pc, #284]	; 80022dc <HAL_RCC_GetSysClockFreq+0x2dc>
 80021c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021c4:	4b3f      	ldr	r3, [pc, #252]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021cc:	ee07 3a90 	vmov	s15, r3
 80021d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80021d8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80022d4 <HAL_RCC_GetSysClockFreq+0x2d4>
 80021dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80021f4:	e043      	b.n	800227e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	ee07 3a90 	vmov	s15, r3
 80021fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002200:	eddf 6a37 	vldr	s13, [pc, #220]	; 80022e0 <HAL_RCC_GetSysClockFreq+0x2e0>
 8002204:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002208:	4b2e      	ldr	r3, [pc, #184]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002210:	ee07 3a90 	vmov	s15, r3
 8002214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002218:	ed97 6a02 	vldr	s12, [r7, #8]
 800221c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80022d4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002220:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002224:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002228:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800222c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002234:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002238:	e021      	b.n	800227e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	ee07 3a90 	vmov	s15, r3
 8002240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002244:	eddf 6a25 	vldr	s13, [pc, #148]	; 80022dc <HAL_RCC_GetSysClockFreq+0x2dc>
 8002248:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800224c:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800224e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002254:	ee07 3a90 	vmov	s15, r3
 8002258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800225c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002260:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80022d4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002264:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002268:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800226c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002270:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002278:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800227c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800227e:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	0a5b      	lsrs	r3, r3, #9
 8002284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002288:	3301      	adds	r3, #1
 800228a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	ee07 3a90 	vmov	s15, r3
 8002292:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002296:	edd7 6a07 	vldr	s13, [r7, #28]
 800229a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800229e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022a2:	ee17 3a90 	vmov	r3, s15
 80022a6:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80022a8:	e005      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
    break;
 80022ae:	e002      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80022b2:	61bb      	str	r3, [r7, #24]
    break;
 80022b4:	bf00      	nop
  }

  return sysclockfreq;
 80022b6:	69bb      	ldr	r3, [r7, #24]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3724      	adds	r7, #36	; 0x24
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	58024400 	.word	0x58024400
 80022c8:	03d09000 	.word	0x03d09000
 80022cc:	003d0900 	.word	0x003d0900
 80022d0:	007a1200 	.word	0x007a1200
 80022d4:	46000000 	.word	0x46000000
 80022d8:	4c742400 	.word	0x4c742400
 80022dc:	4a742400 	.word	0x4a742400
 80022e0:	4af42400 	.word	0x4af42400

080022e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80022ea:	f7ff fe89 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 80022ee:	4601      	mov	r1, r0
 80022f0:	4b10      	ldr	r3, [pc, #64]	; (8002334 <HAL_RCC_GetHCLKFreq+0x50>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	4a0f      	ldr	r2, [pc, #60]	; (8002338 <HAL_RCC_GetHCLKFreq+0x54>)
 80022fc:	5cd3      	ldrb	r3, [r2, r3]
 80022fe:	f003 031f 	and.w	r3, r3, #31
 8002302:	fa21 f303 	lsr.w	r3, r1, r3
 8002306:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002308:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_RCC_GetHCLKFreq+0x50>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f003 030f 	and.w	r3, r3, #15
 8002310:	4a09      	ldr	r2, [pc, #36]	; (8002338 <HAL_RCC_GetHCLKFreq+0x54>)
 8002312:	5cd3      	ldrb	r3, [r2, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	fa22 f303 	lsr.w	r3, r2, r3
 800231e:	4a07      	ldr	r2, [pc, #28]	; (800233c <HAL_RCC_GetHCLKFreq+0x58>)
 8002320:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002322:	4a07      	ldr	r2, [pc, #28]	; (8002340 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002328:	4b04      	ldr	r3, [pc, #16]	; (800233c <HAL_RCC_GetHCLKFreq+0x58>)
 800232a:	681b      	ldr	r3, [r3, #0]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	58024400 	.word	0x58024400
 8002338:	08007dac 	.word	0x08007dac
 800233c:	24000004 	.word	0x24000004
 8002340:	24000000 	.word	0x24000000

08002344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002348:	f7ff ffcc 	bl	80022e4 <HAL_RCC_GetHCLKFreq>
 800234c:	4601      	mov	r1, r0
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	091b      	lsrs	r3, r3, #4
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	4a04      	ldr	r2, [pc, #16]	; (800236c <HAL_RCC_GetPCLK1Freq+0x28>)
 800235a:	5cd3      	ldrb	r3, [r2, r3]
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8002364:	4618      	mov	r0, r3
 8002366:	bd80      	pop	{r7, pc}
 8002368:	58024400 	.word	0x58024400
 800236c:	08007dac 	.word	0x08007dac

08002370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002374:	f7ff ffb6 	bl	80022e4 <HAL_RCC_GetHCLKFreq>
 8002378:	4601      	mov	r1, r0
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_RCC_GetPCLK2Freq+0x24>)
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	0a1b      	lsrs	r3, r3, #8
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	4a04      	ldr	r2, [pc, #16]	; (8002398 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002386:	5cd3      	ldrb	r3, [r2, r3]
 8002388:	f003 031f 	and.w	r3, r3, #31
 800238c:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8002390:	4618      	mov	r0, r3
 8002392:	bd80      	pop	{r7, pc}
 8002394:	58024400 	.word	0x58024400
 8002398:	08007dac 	.word	0x08007dac

0800239c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	223f      	movs	r2, #63	; 0x3f
 80023aa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023ac:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <HAL_RCC_GetClockConfig+0x7c>)
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	f003 0207 	and.w	r2, r3, #7
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 80023b8:	4b17      	ldr	r3, [pc, #92]	; (8002418 <HAL_RCC_GetClockConfig+0x7c>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 80023c4:	4b14      	ldr	r3, [pc, #80]	; (8002418 <HAL_RCC_GetClockConfig+0x7c>)
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	f003 020f 	and.w	r2, r3, #15
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <HAL_RCC_GetClockConfig+0x7c>)
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 80023dc:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <HAL_RCC_GetClockConfig+0x7c>)
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 80023e8:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <HAL_RCC_GetClockConfig+0x7c>)
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <HAL_RCC_GetClockConfig+0x7c>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_RCC_GetClockConfig+0x80>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 020f 	and.w	r2, r3, #15
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	601a      	str	r2, [r3, #0]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	58024400 	.word	0x58024400
 800241c:	52002000 	.word	0x52002000

08002420 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002428:	2300      	movs	r3, #0
 800242a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800242c:	2300      	movs	r3, #0
 800242e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d03d      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002440:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002444:	d013      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800244a:	d802      	bhi.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800244c:	2b00      	cmp	r3, #0
 800244e:	d007      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002450:	e01f      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002452:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002456:	d013      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002458:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800245c:	d01c      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800245e:	e018      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002460:	4bad      	ldr	r3, [pc, #692]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002464:	4aac      	ldr	r2, [pc, #688]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800246a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800246c:	e015      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3304      	adds	r3, #4
 8002472:	2102      	movs	r1, #2
 8002474:	4618      	mov	r0, r3
 8002476:	f001 f935 	bl	80036e4 <RCCEx_PLL2_Config>
 800247a:	4603      	mov	r3, r0
 800247c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800247e:	e00c      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3324      	adds	r3, #36	; 0x24
 8002484:	2102      	movs	r1, #2
 8002486:	4618      	mov	r0, r3
 8002488:	f001 f9de 	bl	8003848 <RCCEx_PLL3_Config>
 800248c:	4603      	mov	r3, r0
 800248e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002490:	e003      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	75fb      	strb	r3, [r7, #23]
      break;
 8002496:	e000      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002498:	bf00      	nop
    }

    if(ret == HAL_OK)
 800249a:	7dfb      	ldrb	r3, [r7, #23]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d109      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80024a0:	4b9d      	ldr	r3, [pc, #628]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80024a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024ac:	499a      	ldr	r1, [pc, #616]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	650b      	str	r3, [r1, #80]	; 0x50
 80024b2:	e001      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024b4:	7dfb      	ldrb	r3, [r7, #23]
 80024b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d03d      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d826      	bhi.n	800251a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80024cc:	a201      	add	r2, pc, #4	; (adr r2, 80024d4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80024ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d2:	bf00      	nop
 80024d4:	080024e9 	.word	0x080024e9
 80024d8:	080024f7 	.word	0x080024f7
 80024dc:	08002509 	.word	0x08002509
 80024e0:	08002521 	.word	0x08002521
 80024e4:	08002521 	.word	0x08002521
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024e8:	4b8b      	ldr	r3, [pc, #556]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	4a8a      	ldr	r2, [pc, #552]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80024ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024f4:	e015      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3304      	adds	r3, #4
 80024fa:	2100      	movs	r1, #0
 80024fc:	4618      	mov	r0, r3
 80024fe:	f001 f8f1 	bl	80036e4 <RCCEx_PLL2_Config>
 8002502:	4603      	mov	r3, r0
 8002504:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002506:	e00c      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3324      	adds	r3, #36	; 0x24
 800250c:	2100      	movs	r1, #0
 800250e:	4618      	mov	r0, r3
 8002510:	f001 f99a 	bl	8003848 <RCCEx_PLL3_Config>
 8002514:	4603      	mov	r3, r0
 8002516:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002518:	e003      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	75fb      	strb	r3, [r7, #23]
      break;
 800251e:	e000      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8002520:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002522:	7dfb      	ldrb	r3, [r7, #23]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d109      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002528:	4b7b      	ldr	r3, [pc, #492]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800252a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800252c:	f023 0207 	bic.w	r2, r3, #7
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002534:	4978      	ldr	r1, [pc, #480]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002536:	4313      	orrs	r3, r2
 8002538:	650b      	str	r3, [r1, #80]	; 0x50
 800253a:	e001      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800253c:	7dfb      	ldrb	r3, [r7, #23]
 800253e:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002548:	2b00      	cmp	r3, #0
 800254a:	d043      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002550:	2b80      	cmp	r3, #128	; 0x80
 8002552:	d01f      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002554:	2b80      	cmp	r3, #128	; 0x80
 8002556:	d804      	bhi.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00b      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800255c:	2b40      	cmp	r3, #64	; 0x40
 800255e:	d010      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8002560:	e021      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002566:	d021      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002568:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800256c:	d020      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800256e:	2bc0      	cmp	r3, #192	; 0xc0
 8002570:	d020      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8002572:	e018      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002574:	4b68      	ldr	r3, [pc, #416]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	4a67      	ldr	r2, [pc, #412]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800257a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002580:	e019      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3304      	adds	r3, #4
 8002586:	2100      	movs	r1, #0
 8002588:	4618      	mov	r0, r3
 800258a:	f001 f8ab 	bl	80036e4 <RCCEx_PLL2_Config>
 800258e:	4603      	mov	r3, r0
 8002590:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002592:	e010      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3324      	adds	r3, #36	; 0x24
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f001 f954 	bl	8003848 <RCCEx_PLL3_Config>
 80025a0:	4603      	mov	r3, r0
 80025a2:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80025a4:	e007      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	75fb      	strb	r3, [r7, #23]
      break;
 80025aa:	e004      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 80025ac:	bf00      	nop
 80025ae:	e002      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 80025b0:	bf00      	nop
 80025b2:	e000      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 80025b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025b6:	7dfb      	ldrb	r3, [r7, #23]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d109      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80025bc:	4b56      	ldr	r3, [pc, #344]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80025be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c0:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c8:	4953      	ldr	r1, [pc, #332]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	650b      	str	r3, [r1, #80]	; 0x50
 80025ce:	e001      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025d0:	7dfb      	ldrb	r3, [r7, #23]
 80025d2:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d047      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e8:	d022      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80025ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ee:	d805      	bhi.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00d      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80025f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025f8:	d011      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80025fa:	e022      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80025fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002600:	d022      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8002602:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002606:	d021      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8002608:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800260c:	d020      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800260e:	e018      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x222>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002610:	4b41      	ldr	r3, [pc, #260]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	4a40      	ldr	r2, [pc, #256]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800261a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800261c:	e019      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3304      	adds	r3, #4
 8002622:	2100      	movs	r1, #0
 8002624:	4618      	mov	r0, r3
 8002626:	f001 f85d 	bl	80036e4 <RCCEx_PLL2_Config>
 800262a:	4603      	mov	r3, r0
 800262c:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800262e:	e010      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3324      	adds	r3, #36	; 0x24
 8002634:	2100      	movs	r1, #0
 8002636:	4618      	mov	r0, r3
 8002638:	f001 f906 	bl	8003848 <RCCEx_PLL3_Config>
 800263c:	4603      	mov	r3, r0
 800263e:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002640:	e007      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x232>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	75fb      	strb	r3, [r7, #23]
      break;
 8002646:	e004      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8002648:	bf00      	nop
 800264a:	e002      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 800264c:	bf00      	nop
 800264e:	e000      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8002650:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002652:	7dfb      	ldrb	r3, [r7, #23]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d109      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002658:	4b2f      	ldr	r3, [pc, #188]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800265a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800265c:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002664:	492c      	ldr	r1, [pc, #176]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002666:	4313      	orrs	r3, r2
 8002668:	650b      	str	r3, [r1, #80]	; 0x50
 800266a:	e001      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x250>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800266c:	7dfb      	ldrb	r3, [r7, #23]
 800266e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d032      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002680:	2b10      	cmp	r3, #16
 8002682:	d009      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8002684:	2b10      	cmp	r3, #16
 8002686:	d802      	bhi.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002688:	2b00      	cmp	r3, #0
 800268a:	d018      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x29e>
 800268c:	e014      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800268e:	2b20      	cmp	r3, #32
 8002690:	d009      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002692:	2b30      	cmp	r3, #48	; 0x30
 8002694:	d015      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8002696:	e00f      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002698:	4b1f      	ldr	r3, [pc, #124]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800269a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269c:	4a1e      	ldr	r2, [pc, #120]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800269e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80026a4:	e00e      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	3304      	adds	r3, #4
 80026aa:	2102      	movs	r1, #2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f001 f819 	bl	80036e4 <RCCEx_PLL2_Config>
 80026b2:	4603      	mov	r3, r0
 80026b4:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80026b6:	e005      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	75fb      	strb	r3, [r7, #23]
      break;
 80026bc:	e002      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 80026be:	bf00      	nop
 80026c0:	e000      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 80026c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026c4:	7dfb      	ldrb	r3, [r7, #23]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d109      	bne.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80026ca:	4b13      	ldr	r3, [pc, #76]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80026cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d6:	4910      	ldr	r1, [pc, #64]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	64cb      	str	r3, [r1, #76]	; 0x4c
 80026dc:	e001      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026de:	7dfb      	ldrb	r3, [r7, #23]
 80026e0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d044      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026f6:	d021      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80026f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026fc:	d805      	bhi.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00c      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002706:	d010      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8002708:	e021      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800270a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800270e:	d021      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x334>
 8002710:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002714:	d020      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8002716:	e01a      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8002718:	58024400 	.word	0x58024400
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800271c:	4ba6      	ldr	r3, [pc, #664]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	4aa5      	ldr	r2, [pc, #660]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8002722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002726:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002728:	e017      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3304      	adds	r3, #4
 800272e:	2100      	movs	r1, #0
 8002730:	4618      	mov	r0, r3
 8002732:	f000 ffd7 	bl	80036e4 <RCCEx_PLL2_Config>
 8002736:	4603      	mov	r3, r0
 8002738:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800273a:	e00e      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3324      	adds	r3, #36	; 0x24
 8002740:	2100      	movs	r1, #0
 8002742:	4618      	mov	r0, r3
 8002744:	f001 f880 	bl	8003848 <RCCEx_PLL3_Config>
 8002748:	4603      	mov	r3, r0
 800274a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800274c:	e005      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x33a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	75fb      	strb	r3, [r7, #23]
      break;
 8002752:	e002      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 8002754:	bf00      	nop
 8002756:	e000      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 8002758:	bf00      	nop
    }

    if(ret == HAL_OK)
 800275a:	7dfb      	ldrb	r3, [r7, #23]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d109      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x354>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002760:	4b95      	ldr	r3, [pc, #596]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8002762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002764:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800276c:	4992      	ldr	r1, [pc, #584]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800276e:	4313      	orrs	r3, r2
 8002770:	650b      	str	r3, [r1, #80]	; 0x50
 8002772:	e001      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x358>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002774:	7dfb      	ldrb	r3, [r7, #23]
 8002776:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d042      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002788:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800278c:	d01b      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 800278e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002792:	d805      	bhi.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8002794:	2b00      	cmp	r3, #0
 8002796:	d022      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x3be>
 8002798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800279c:	d00a      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x394>
 800279e:	e01b      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 80027a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027a4:	d01d      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 80027a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027aa:	d01c      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 80027ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027b0:	d01b      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 80027b2:	e011      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3304      	adds	r3, #4
 80027b8:	2101      	movs	r1, #1
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 ff92 	bl	80036e4 <RCCEx_PLL2_Config>
 80027c0:	4603      	mov	r3, r0
 80027c2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80027c4:	e012      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3324      	adds	r3, #36	; 0x24
 80027ca:	2101      	movs	r1, #1
 80027cc:	4618      	mov	r0, r3
 80027ce:	f001 f83b 	bl	8003848 <RCCEx_PLL3_Config>
 80027d2:	4603      	mov	r3, r0
 80027d4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80027d6:	e009      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	75fb      	strb	r3, [r7, #23]
      break;
 80027dc:	e006      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 80027de:	bf00      	nop
 80027e0:	e004      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 80027e2:	bf00      	nop
 80027e4:	e002      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 80027e6:	bf00      	nop
 80027e8:	e000      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 80027ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027ec:	7dfb      	ldrb	r3, [r7, #23]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d109      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80027f2:	4b71      	ldr	r3, [pc, #452]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80027f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027fe:	496e      	ldr	r1, [pc, #440]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8002800:	4313      	orrs	r3, r2
 8002802:	650b      	str	r3, [r1, #80]	; 0x50
 8002804:	e001      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002806:	7dfb      	ldrb	r3, [r7, #23]
 8002808:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d049      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800281c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002820:	d02a      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8002822:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002826:	d808      	bhi.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002828:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800282c:	d00f      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800282e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002832:	d015      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002834:	2b00      	cmp	r3, #0
 8002836:	d021      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8002838:	e01b      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800283a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800283e:	d01f      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8002840:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002844:	d01e      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284a:	d01d      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x468>
 800284c:	e011      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x452>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3304      	adds	r3, #4
 8002852:	2101      	movs	r1, #1
 8002854:	4618      	mov	r0, r3
 8002856:	f000 ff45 	bl	80036e4 <RCCEx_PLL2_Config>
 800285a:	4603      	mov	r3, r0
 800285c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800285e:	e014      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3324      	adds	r3, #36	; 0x24
 8002864:	2101      	movs	r1, #1
 8002866:	4618      	mov	r0, r3
 8002868:	f000 ffee 	bl	8003848 <RCCEx_PLL3_Config>
 800286c:	4603      	mov	r3, r0
 800286e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002870:	e00b      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x46a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	75fb      	strb	r3, [r7, #23]
      break;
 8002876:	e008      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8002878:	bf00      	nop
 800287a:	e006      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 800287c:	bf00      	nop
 800287e:	e004      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8002880:	bf00      	nop
 8002882:	e002      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8002884:	bf00      	nop
 8002886:	e000      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8002888:	bf00      	nop
    }

    if(ret == HAL_OK)
 800288a:	7dfb      	ldrb	r3, [r7, #23]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10a      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x486>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002890:	4b49      	ldr	r3, [pc, #292]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8002892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002894:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800289e:	4946      	ldr	r1, [pc, #280]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	658b      	str	r3, [r1, #88]	; 0x58
 80028a4:	e001      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a6:	7dfb      	ldrb	r3, [r7, #23]
 80028a8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d02d      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028be:	d005      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 80028c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028c4:	d009      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d013      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80028ca:	e00f      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028cc:	4b3a      	ldr	r3, [pc, #232]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	4a39      	ldr	r2, [pc, #228]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80028d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80028d8:	e00c      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3304      	adds	r3, #4
 80028de:	2101      	movs	r1, #1
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 feff 	bl	80036e4 <RCCEx_PLL2_Config>
 80028e6:	4603      	mov	r3, r0
 80028e8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80028ea:	e003      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	75fb      	strb	r3, [r7, #23]
      break;
 80028f0:	e000      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      break;
 80028f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028f4:	7dfb      	ldrb	r3, [r7, #23]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d109      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80028fa:	4b2f      	ldr	r3, [pc, #188]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80028fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002906:	492c      	ldr	r1, [pc, #176]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8002908:	4313      	orrs	r3, r2
 800290a:	650b      	str	r3, [r1, #80]	; 0x50
 800290c:	e001      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800290e:	7dfb      	ldrb	r3, [r7, #23]
 8002910:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d031      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x562>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	2b03      	cmp	r3, #3
 8002924:	d81a      	bhi.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x53c>
 8002926:	a201      	add	r2, pc, #4	; (adr r2, 800292c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292c:	08002963 	.word	0x08002963
 8002930:	0800293d 	.word	0x0800293d
 8002934:	0800294b 	.word	0x0800294b
 8002938:	08002963 	.word	0x08002963
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800293c:	4b1e      	ldr	r3, [pc, #120]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	4a1d      	ldr	r2, [pc, #116]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8002942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002946:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002948:	e00c      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x544>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3304      	adds	r3, #4
 800294e:	2102      	movs	r1, #2
 8002950:	4618      	mov	r0, r3
 8002952:	f000 fec7 	bl	80036e4 <RCCEx_PLL2_Config>
 8002956:	4603      	mov	r3, r0
 8002958:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800295a:	e003      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x544>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	75fb      	strb	r3, [r7, #23]
      break;
 8002960:	e000      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x544>
      break;
 8002962:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002964:	7dfb      	ldrb	r3, [r7, #23]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d109      	bne.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800296a:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800296c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296e:	f023 0203 	bic.w	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	4910      	ldr	r1, [pc, #64]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8002978:	4313      	orrs	r3, r2
 800297a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800297c:	e001      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x562>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800297e:	7dfb      	ldrb	r3, [r7, #23]
 8002980:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 808a 	beq.w	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x684>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002990:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a09      	ldr	r2, [pc, #36]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8002996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800299c:	f7fe fa82 	bl	8000ea4 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029a2:	e00d      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a4:	f7fe fa7e 	bl	8000ea4 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	; 0x64
 80029b0:	d906      	bls.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        ret = HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	75fb      	strb	r3, [r7, #23]
        break;
 80029b6:	e009      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80029b8:	58024400 	.word	0x58024400
 80029bc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029c0:	4bba      	ldr	r3, [pc, #744]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x88c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0eb      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      }
    }

    if(ret == HAL_OK)
 80029cc:	7dfb      	ldrb	r3, [r7, #23]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d166      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80029d2:	4bb7      	ldr	r3, [pc, #732]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80029d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80029dc:	4053      	eors	r3, r2
 80029de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d013      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029e6:	4bb2      	ldr	r3, [pc, #712]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80029e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ee:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029f0:	4baf      	ldr	r3, [pc, #700]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f4:	4aae      	ldr	r2, [pc, #696]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80029f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029fc:	4bac      	ldr	r3, [pc, #688]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80029fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a00:	4aab      	ldr	r2, [pc, #684]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8002a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a06:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002a08:	4aa9      	ldr	r2, [pc, #676]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a18:	d115      	bne.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x626>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1a:	f7fe fa43 	bl	8000ea4 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a20:	e00b      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a22:	f7fe fa3f 	bl	8000ea4 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d902      	bls.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x61a>
          {
            ret = HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	75fb      	strb	r3, [r7, #23]
            break;
 8002a38:	e005      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x626>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a3a:	4b9d      	ldr	r3, [pc, #628]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8002a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0ed      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x602>
          }
        }
      }

      if(ret == HAL_OK)
 8002a46:	7dfb      	ldrb	r3, [r7, #23]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d126      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a5a:	d10d      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x658>
 8002a5c:	4b94      	ldr	r3, [pc, #592]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a6a:	0919      	lsrs	r1, r3, #4
 8002a6c:	4b91      	ldr	r3, [pc, #580]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8002a6e:	400b      	ands	r3, r1
 8002a70:	498f      	ldr	r1, [pc, #572]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	610b      	str	r3, [r1, #16]
 8002a76:	e005      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002a78:	4b8d      	ldr	r3, [pc, #564]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	4a8c      	ldr	r2, [pc, #560]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8002a7e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002a82:	6113      	str	r3, [r2, #16]
 8002a84:	4b8a      	ldr	r3, [pc, #552]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8002a86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a92:	4987      	ldr	r1, [pc, #540]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	670b      	str	r3, [r1, #112]	; 0x70
 8002a98:	e004      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a9a:	7dfb      	ldrb	r3, [r7, #23]
 8002a9c:	75bb      	strb	r3, [r7, #22]
 8002a9e:	e001      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa0:	7dfb      	ldrb	r3, [r7, #23]
 8002aa2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d07f      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x790>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ab6:	2b28      	cmp	r3, #40	; 0x28
 8002ab8:	d866      	bhi.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x768>
 8002aba:	a201      	add	r2, pc, #4	; (adr r2, 8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>)
 8002abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac0:	08002b8f 	.word	0x08002b8f
 8002ac4:	08002b89 	.word	0x08002b89
 8002ac8:	08002b89 	.word	0x08002b89
 8002acc:	08002b89 	.word	0x08002b89
 8002ad0:	08002b89 	.word	0x08002b89
 8002ad4:	08002b89 	.word	0x08002b89
 8002ad8:	08002b89 	.word	0x08002b89
 8002adc:	08002b89 	.word	0x08002b89
 8002ae0:	08002b65 	.word	0x08002b65
 8002ae4:	08002b89 	.word	0x08002b89
 8002ae8:	08002b89 	.word	0x08002b89
 8002aec:	08002b89 	.word	0x08002b89
 8002af0:	08002b89 	.word	0x08002b89
 8002af4:	08002b89 	.word	0x08002b89
 8002af8:	08002b89 	.word	0x08002b89
 8002afc:	08002b89 	.word	0x08002b89
 8002b00:	08002b77 	.word	0x08002b77
 8002b04:	08002b89 	.word	0x08002b89
 8002b08:	08002b89 	.word	0x08002b89
 8002b0c:	08002b89 	.word	0x08002b89
 8002b10:	08002b89 	.word	0x08002b89
 8002b14:	08002b89 	.word	0x08002b89
 8002b18:	08002b89 	.word	0x08002b89
 8002b1c:	08002b89 	.word	0x08002b89
 8002b20:	08002b8f 	.word	0x08002b8f
 8002b24:	08002b89 	.word	0x08002b89
 8002b28:	08002b89 	.word	0x08002b89
 8002b2c:	08002b89 	.word	0x08002b89
 8002b30:	08002b89 	.word	0x08002b89
 8002b34:	08002b89 	.word	0x08002b89
 8002b38:	08002b89 	.word	0x08002b89
 8002b3c:	08002b89 	.word	0x08002b89
 8002b40:	08002b8f 	.word	0x08002b8f
 8002b44:	08002b89 	.word	0x08002b89
 8002b48:	08002b89 	.word	0x08002b89
 8002b4c:	08002b89 	.word	0x08002b89
 8002b50:	08002b89 	.word	0x08002b89
 8002b54:	08002b89 	.word	0x08002b89
 8002b58:	08002b89 	.word	0x08002b89
 8002b5c:	08002b89 	.word	0x08002b89
 8002b60:	08002b8f 	.word	0x08002b8f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3304      	adds	r3, #4
 8002b68:	2101      	movs	r1, #1
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fdba 	bl	80036e4 <RCCEx_PLL2_Config>
 8002b70:	4603      	mov	r3, r0
 8002b72:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002b74:	e00c      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x770>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3324      	adds	r3, #36	; 0x24
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 fe63 	bl	8003848 <RCCEx_PLL3_Config>
 8002b82:	4603      	mov	r3, r0
 8002b84:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002b86:	e003      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x770>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b8c:	e000      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x770>
      break;
 8002b8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b90:	7dfb      	ldrb	r3, [r7, #23]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10a      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x78c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002b96:	4b46      	ldr	r3, [pc, #280]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8002b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ba4:	4942      	ldr	r1, [pc, #264]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	654b      	str	r3, [r1, #84]	; 0x54
 8002baa:	e001      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x790>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bac:	7dfb      	ldrb	r3, [r7, #23]
 8002bae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d038      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x80e>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bc0:	2b05      	cmp	r3, #5
 8002bc2:	d821      	bhi.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
 8002bc4:	a201      	add	r2, pc, #4	; (adr r2, 8002bcc <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 8002bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bca:	bf00      	nop
 8002bcc:	08002c0f 	.word	0x08002c0f
 8002bd0:	08002be5 	.word	0x08002be5
 8002bd4:	08002bf7 	.word	0x08002bf7
 8002bd8:	08002c0f 	.word	0x08002c0f
 8002bdc:	08002c0f 	.word	0x08002c0f
 8002be0:	08002c0f 	.word	0x08002c0f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3304      	adds	r3, #4
 8002be8:	2101      	movs	r1, #1
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 fd7a 	bl	80036e4 <RCCEx_PLL2_Config>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002bf4:	e00c      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x7f0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3324      	adds	r3, #36	; 0x24
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 fe23 	bl	8003848 <RCCEx_PLL3_Config>
 8002c02:	4603      	mov	r3, r0
 8002c04:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002c06:	e003      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c0c:	e000      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      break;
 8002c0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c10:	7dfb      	ldrb	r3, [r7, #23]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d109      	bne.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002c16:	4b26      	ldr	r3, [pc, #152]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8002c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1a:	f023 0207 	bic.w	r2, r3, #7
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c22:	4923      	ldr	r1, [pc, #140]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	654b      	str	r3, [r1, #84]	; 0x54
 8002c28:	e001      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x80e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c2a:	7dfb      	ldrb	r3, [r7, #23]
 8002c2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0304 	and.w	r3, r3, #4
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d040      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x89c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c40:	2b05      	cmp	r3, #5
 8002c42:	d821      	bhi.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x868>
 8002c44:	a201      	add	r2, pc, #4	; (adr r2, 8002c4c <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 8002c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4a:	bf00      	nop
 8002c4c:	08002c8f 	.word	0x08002c8f
 8002c50:	08002c65 	.word	0x08002c65
 8002c54:	08002c77 	.word	0x08002c77
 8002c58:	08002c8f 	.word	0x08002c8f
 8002c5c:	08002c8f 	.word	0x08002c8f
 8002c60:	08002c8f 	.word	0x08002c8f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3304      	adds	r3, #4
 8002c68:	2101      	movs	r1, #1
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 fd3a 	bl	80036e4 <RCCEx_PLL2_Config>
 8002c70:	4603      	mov	r3, r0
 8002c72:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002c74:	e00c      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x870>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3324      	adds	r3, #36	; 0x24
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 fde3 	bl	8003848 <RCCEx_PLL3_Config>
 8002c82:	4603      	mov	r3, r0
 8002c84:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002c86:	e003      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x870>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c8c:	e000      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x870>
      break;
 8002c8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d110      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x898>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c96:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8002c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9a:	f023 0207 	bic.w	r2, r3, #7
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ca4:	4902      	ldr	r1, [pc, #8]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	658b      	str	r3, [r1, #88]	; 0x58
 8002caa:	e007      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8002cac:	58024800 	.word	0x58024800
 8002cb0:	58024400 	.word	0x58024400
 8002cb4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb8:	7dfb      	ldrb	r3, [r7, #23]
 8002cba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d044      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd2:	d01b      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8002cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd8:	d805      	bhi.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d022      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x904>
 8002cde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ce2:	d00a      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8002ce4:	e01b      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8002ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cea:	d01d      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x908>
 8002cec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cf0:	d01c      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x90c>
 8002cf2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002cf6:	d01b      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8002cf8:	e011      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 fcef 	bl	80036e4 <RCCEx_PLL2_Config>
 8002d06:	4603      	mov	r3, r0
 8002d08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002d0a:	e012      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x912>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3324      	adds	r3, #36	; 0x24
 8002d10:	2102      	movs	r1, #2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 fd98 	bl	8003848 <RCCEx_PLL3_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002d1c:	e009      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	75fb      	strb	r3, [r7, #23]
      break;
 8002d22:	e006      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8002d24:	bf00      	nop
 8002d26:	e004      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8002d28:	bf00      	nop
 8002d2a:	e002      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8002d2c:	bf00      	nop
 8002d2e:	e000      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8002d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d32:	7dfb      	ldrb	r3, [r7, #23]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10a      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d38:	4bb3      	ldr	r3, [pc, #716]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8002d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d46:	49b0      	ldr	r1, [pc, #704]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	654b      	str	r3, [r1, #84]	; 0x54
 8002d4c:	e001      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x932>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d4e:	7dfb      	ldrb	r3, [r7, #23]
 8002d50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d044      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d68:	d01b      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x982>
 8002d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d6e:	d805      	bhi.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d022      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x99a>
 8002d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d78:	d00a      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x970>
 8002d7a:	e01b      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x994>
 8002d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d80:	d01d      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8002d82:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002d86:	d01c      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8002d88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d8c:	d01b      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8002d8e:	e011      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x994>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3304      	adds	r3, #4
 8002d94:	2100      	movs	r1, #0
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 fca4 	bl	80036e4 <RCCEx_PLL2_Config>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002da0:	e012      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3324      	adds	r3, #36	; 0x24
 8002da6:	2102      	movs	r1, #2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 fd4d 	bl	8003848 <RCCEx_PLL3_Config>
 8002dae:	4603      	mov	r3, r0
 8002db0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002db2:	e009      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	75fb      	strb	r3, [r7, #23]
      break;
 8002db8:	e006      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8002dba:	bf00      	nop
 8002dbc:	e004      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8002dbe:	bf00      	nop
 8002dc0:	e002      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8002dc2:	bf00      	nop
 8002dc4:	e000      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8002dc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dc8:	7dfb      	ldrb	r3, [r7, #23]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10a      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dce:	4b8e      	ldr	r3, [pc, #568]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8002dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002ddc:	498a      	ldr	r1, [pc, #552]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	658b      	str	r3, [r1, #88]	; 0x58
 8002de2:	e001      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de4:	7dfb      	ldrb	r3, [r7, #23]
 8002de6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d044      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002dfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dfe:	d01b      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xa18>
 8002e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e04:	d805      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d022      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8002e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e0e:	d00a      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8002e10:	e01b      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8002e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e16:	d01d      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8002e18:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002e1c:	d01c      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xa38>
 8002e1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002e22:	d01b      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 8002e24:	e011      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3304      	adds	r3, #4
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 fc59 	bl	80036e4 <RCCEx_PLL2_Config>
 8002e32:	4603      	mov	r3, r0
 8002e34:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002e36:	e012      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3324      	adds	r3, #36	; 0x24
 8002e3c:	2102      	movs	r1, #2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 fd02 	bl	8003848 <RCCEx_PLL3_Config>
 8002e44:	4603      	mov	r3, r0
 8002e46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002e48:	e009      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	75fb      	strb	r3, [r7, #23]
      break;
 8002e4e:	e006      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8002e50:	bf00      	nop
 8002e52:	e004      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8002e54:	bf00      	nop
 8002e56:	e002      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8002e58:	bf00      	nop
 8002e5a:	e000      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8002e5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e5e:	7dfb      	ldrb	r3, [r7, #23]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10a      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002e64:	4b68      	ldr	r3, [pc, #416]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8002e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e68:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002e72:	4965      	ldr	r1, [pc, #404]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	658b      	str	r3, [r1, #88]	; 0x58
 8002e78:	e001      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
 8002e7c:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d01a      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e94:	d10a      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	3324      	adds	r3, #36	; 0x24
 8002e9a:	2102      	movs	r1, #2
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 fcd3 	bl	8003848 <RCCEx_PLL3_Config>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xa8c>
        {
          status = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002eac:	4b56      	ldr	r3, [pc, #344]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8002eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eba:	4953      	ldr	r1, [pc, #332]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0310 	and.w	r3, r3, #16
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d01a      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xae2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ed6:	d10a      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3324      	adds	r3, #36	; 0x24
 8002edc:	2102      	movs	r1, #2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fcb2 	bl	8003848 <RCCEx_PLL3_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xace>
      {
        status = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002eee:	4b46      	ldr	r3, [pc, #280]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8002ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002efc:	4942      	ldr	r1, [pc, #264]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d030      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f18:	d00d      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0xb16>
 8002f1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f1e:	d016      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d111      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xb28>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3304      	adds	r3, #4
 8002f28:	2100      	movs	r1, #0
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 fbda 	bl	80036e4 <RCCEx_PLL2_Config>
 8002f30:	4603      	mov	r3, r0
 8002f32:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002f34:	e00c      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3324      	adds	r3, #36	; 0x24
 8002f3a:	2102      	movs	r1, #2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fc83 	bl	8003848 <RCCEx_PLL3_Config>
 8002f42:	4603      	mov	r3, r0
 8002f44:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002f46:	e003      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f4c:	e000      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002f4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10a      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f56:	4b2c      	ldr	r3, [pc, #176]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8002f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f64:	4928      	ldr	r1, [pc, #160]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	658b      	str	r3, [r1, #88]	; 0x58
 8002f6a:	e001      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6c:	7dfb      	ldrb	r3, [r7, #23]
 8002f6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d02f      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xbbc>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f86:	d00c      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8002f88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f8c:	d015      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0xb9a>
 8002f8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f92:	d10f      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xb94>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f94:	4b1c      	ldr	r3, [pc, #112]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	4a1b      	ldr	r2, [pc, #108]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8002f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002fa0:	e00c      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0xb9c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3324      	adds	r3, #36	; 0x24
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fc4d 	bl	8003848 <RCCEx_PLL3_Config>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002fb2:	e003      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fb8:	e000      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      break;
 8002fba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fbc:	7dfb      	ldrb	r3, [r7, #23]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10a      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fc2:	4b11      	ldr	r3, [pc, #68]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8002fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fd0:	490d      	ldr	r1, [pc, #52]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	654b      	str	r3, [r1, #84]	; 0x54
 8002fd6:	e001      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xbbc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd8:	7dfb      	ldrb	r3, [r7, #23]
 8002fda:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d02c      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0xc22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8002ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff4:	d00a      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8002ff6:	e012      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ff8:	4b03      	ldr	r3, [pc, #12]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8002ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffc:	4a02      	ldr	r2, [pc, #8]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8002ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003002:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003004:	e00e      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xc04>
 8003006:	bf00      	nop
 8003008:	58024400 	.word	0x58024400

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3304      	adds	r3, #4
 8003010:	2102      	movs	r1, #2
 8003012:	4618      	mov	r0, r3
 8003014:	f000 fb66 	bl	80036e4 <RCCEx_PLL2_Config>
 8003018:	4603      	mov	r3, r0
 800301a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800301c:	e002      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xc04>

    default:
      ret = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	75fb      	strb	r3, [r7, #23]
      break;
 8003022:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003024:	7dfb      	ldrb	r3, [r7, #23]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d109      	bne.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800302a:	4b56      	ldr	r3, [pc, #344]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800302c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003036:	4953      	ldr	r1, [pc, #332]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8003038:	4313      	orrs	r3, r2
 800303a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800303c:	e001      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800303e:	7dfb      	ldrb	r3, [r7, #23]
 8003040:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xc44>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3324      	adds	r3, #36	; 0x24
 8003052:	2102      	movs	r1, #2
 8003054:	4618      	mov	r0, r3
 8003056:	f000 fbf7 	bl	8003848 <RCCEx_PLL3_Config>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xc44>
    {
      status=HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d031      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800307a:	d00c      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800307c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003080:	d802      	bhi.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003082:	2b00      	cmp	r3, #0
 8003084:	d011      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xc8a>
 8003086:	e00d      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800308c:	d00f      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xc8e>
 800308e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003092:	d00e      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003094:	e006      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003096:	4b3b      	ldr	r3, [pc, #236]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8003098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309a:	4a3a      	ldr	r2, [pc, #232]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800309c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80030a2:	e007      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	75fb      	strb	r3, [r7, #23]
      break;
 80030a8:	e004      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 80030aa:	bf00      	nop
 80030ac:	e002      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 80030ae:	bf00      	nop
 80030b0:	e000      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 80030b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030b4:	7dfb      	ldrb	r3, [r7, #23]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10a      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030ba:	4b32      	ldr	r3, [pc, #200]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80030bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c8:	492e      	ldr	r1, [pc, #184]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	654b      	str	r3, [r1, #84]	; 0x54
 80030ce:	e001      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d0:	7dfb      	ldrb	r3, [r7, #23]
 80030d2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80030e0:	4b28      	ldr	r3, [pc, #160]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80030e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030ec:	4925      	ldr	r1, [pc, #148]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030fe:	4b21      	ldr	r3, [pc, #132]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8003100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003102:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800310a:	491e      	ldr	r1, [pc, #120]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800310c:	4313      	orrs	r3, r2
 800310e:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800311c:	4b19      	ldr	r3, [pc, #100]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800311e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003120:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003128:	4916      	ldr	r1, [pc, #88]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800312a:	4313      	orrs	r3, r2
 800312c:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00d      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xd36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800313a:	4b12      	ldr	r3, [pc, #72]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	4a11      	ldr	r2, [pc, #68]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8003140:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003144:	6113      	str	r3, [r2, #16]
 8003146:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003150:	490c      	ldr	r1, [pc, #48]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8003152:	4313      	orrs	r3, r2
 8003154:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	da08      	bge.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xd50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800315e:	4b09      	ldr	r3, [pc, #36]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8003160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003162:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800316a:	4906      	ldr	r1, [pc, #24]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800316c:	4313      	orrs	r3, r2
 800316e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8003170:	7dbb      	ldrb	r3, [r7, #22]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    return HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	e000      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xd5c>
  }
  return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
}
 800317c:	4618      	mov	r0, r3
 800317e:	3718      	adds	r7, #24
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	58024400 	.word	0x58024400

08003188 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800318c:	f7ff f8aa 	bl	80022e4 <HAL_RCC_GetHCLKFreq>
 8003190:	4601      	mov	r1, r0
 8003192:	4b06      	ldr	r3, [pc, #24]	; (80031ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	091b      	lsrs	r3, r3, #4
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	4a04      	ldr	r2, [pc, #16]	; (80031b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800319e:	5cd3      	ldrb	r3, [r2, r3]
 80031a0:	f003 031f 	and.w	r3, r3, #31
 80031a4:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	58024400 	.word	0x58024400
 80031b0:	08007dac 	.word	0x08007dac

080031b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b089      	sub	sp, #36	; 0x24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031bc:	4b9d      	ldr	r3, [pc, #628]	; (8003434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80031c6:	4b9b      	ldr	r3, [pc, #620]	; (8003434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80031c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ca:	0b1b      	lsrs	r3, r3, #12
 80031cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80031d2:	4b98      	ldr	r3, [pc, #608]	; (8003434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80031d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d6:	091b      	lsrs	r3, r3, #4
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80031de:	4b95      	ldr	r3, [pc, #596]	; (8003434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80031e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e2:	08db      	lsrs	r3, r3, #3
 80031e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	fb02 f303 	mul.w	r3, r2, r3
 80031ee:	ee07 3a90 	vmov	s15, r3
 80031f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 810a 	beq.w	8003416 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d05a      	beq.n	80032be <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8003208:	2b01      	cmp	r3, #1
 800320a:	d302      	bcc.n	8003212 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800320c:	2b02      	cmp	r3, #2
 800320e:	d078      	beq.n	8003302 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8003210:	e099      	b.n	8003346 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003212:	4b88      	ldr	r3, [pc, #544]	; (8003434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0320 	and.w	r3, r3, #32
 800321a:	2b00      	cmp	r3, #0
 800321c:	d02d      	beq.n	800327a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800321e:	4b85      	ldr	r3, [pc, #532]	; (8003434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	08db      	lsrs	r3, r3, #3
 8003224:	f003 0303 	and.w	r3, r3, #3
 8003228:	4a83      	ldr	r2, [pc, #524]	; (8003438 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800322a:	fa22 f303 	lsr.w	r3, r2, r3
 800322e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	ee07 3a90 	vmov	s15, r3
 8003236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	ee07 3a90 	vmov	s15, r3
 8003240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003244:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003248:	4b7a      	ldr	r3, [pc, #488]	; (8003434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003250:	ee07 3a90 	vmov	s15, r3
 8003254:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003258:	ed97 6a03 	vldr	s12, [r7, #12]
 800325c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800343c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003260:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003264:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003268:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800326c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003274:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003278:	e087      	b.n	800338a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	ee07 3a90 	vmov	s15, r3
 8003280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003284:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003440 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8003288:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800328c:	4b69      	ldr	r3, [pc, #420]	; (8003434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003294:	ee07 3a90 	vmov	s15, r3
 8003298:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800329c:	ed97 6a03 	vldr	s12, [r7, #12]
 80032a0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800343c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80032a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80032bc:	e065      	b.n	800338a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	ee07 3a90 	vmov	s15, r3
 80032c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80032cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032d0:	4b58      	ldr	r3, [pc, #352]	; (8003434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80032d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d8:	ee07 3a90 	vmov	s15, r3
 80032dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80032e4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800343c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80032e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003300:	e043      	b.n	800338a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	ee07 3a90 	vmov	s15, r3
 8003308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800330c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003448 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8003310:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003314:	4b47      	ldr	r3, [pc, #284]	; (8003434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800331c:	ee07 3a90 	vmov	s15, r3
 8003320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003324:	ed97 6a03 	vldr	s12, [r7, #12]
 8003328:	eddf 5a44 	vldr	s11, [pc, #272]	; 800343c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800332c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003330:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003334:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003338:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800333c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003340:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003344:	e021      	b.n	800338a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	ee07 3a90 	vmov	s15, r3
 800334c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003350:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003444 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003354:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003358:	4b36      	ldr	r3, [pc, #216]	; (8003434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800335a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003360:	ee07 3a90 	vmov	s15, r3
 8003364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003368:	ed97 6a03 	vldr	s12, [r7, #12]
 800336c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800343c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003370:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003374:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003378:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800337c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003384:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003388:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800338a:	4b2a      	ldr	r3, [pc, #168]	; (8003434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	0a5b      	lsrs	r3, r3, #9
 8003390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003394:	ee07 3a90 	vmov	s15, r3
 8003398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800339c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80033a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80033a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80033a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033b0:	ee17 2a90 	vmov	r2, s15
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80033b8:	4b1e      	ldr	r3, [pc, #120]	; (8003434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80033ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033bc:	0c1b      	lsrs	r3, r3, #16
 80033be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033c2:	ee07 3a90 	vmov	s15, r3
 80033c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80033ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80033d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80033d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033de:	ee17 2a90 	vmov	r2, s15
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80033e6:	4b13      	ldr	r3, [pc, #76]	; (8003434 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80033e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ea:	0e1b      	lsrs	r3, r3, #24
 80033ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033f0:	ee07 3a90 	vmov	s15, r3
 80033f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80033fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003400:	edd7 6a07 	vldr	s13, [r7, #28]
 8003404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800340c:	ee17 2a90 	vmov	r2, s15
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003414:	e008      	b.n	8003428 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	609a      	str	r2, [r3, #8]
}
 8003428:	bf00      	nop
 800342a:	3724      	adds	r7, #36	; 0x24
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	58024400 	.word	0x58024400
 8003438:	03d09000 	.word	0x03d09000
 800343c:	46000000 	.word	0x46000000
 8003440:	4c742400 	.word	0x4c742400
 8003444:	4a742400 	.word	0x4a742400
 8003448:	4af42400 	.word	0x4af42400

0800344c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800344c:	b480      	push	{r7}
 800344e:	b089      	sub	sp, #36	; 0x24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003454:	4b9d      	ldr	r3, [pc, #628]	; (80036cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003458:	f003 0303 	and.w	r3, r3, #3
 800345c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800345e:	4b9b      	ldr	r3, [pc, #620]	; (80036cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	0d1b      	lsrs	r3, r3, #20
 8003464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003468:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800346a:	4b98      	ldr	r3, [pc, #608]	; (80036cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346e:	0a1b      	lsrs	r3, r3, #8
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003476:	4b95      	ldr	r3, [pc, #596]	; (80036cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	08db      	lsrs	r3, r3, #3
 800347c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	fb02 f303 	mul.w	r3, r2, r3
 8003486:	ee07 3a90 	vmov	s15, r3
 800348a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800348e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 810a 	beq.w	80036ae <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d05a      	beq.n	8003556 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d302      	bcc.n	80034aa <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d078      	beq.n	800359a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80034a8:	e099      	b.n	80035de <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034aa:	4b88      	ldr	r3, [pc, #544]	; (80036cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d02d      	beq.n	8003512 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80034b6:	4b85      	ldr	r3, [pc, #532]	; (80036cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	08db      	lsrs	r3, r3, #3
 80034bc:	f003 0303 	and.w	r3, r3, #3
 80034c0:	4a83      	ldr	r2, [pc, #524]	; (80036d0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80034c2:	fa22 f303 	lsr.w	r3, r2, r3
 80034c6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	ee07 3a90 	vmov	s15, r3
 80034ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	ee07 3a90 	vmov	s15, r3
 80034d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034e0:	4b7a      	ldr	r3, [pc, #488]	; (80036cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e8:	ee07 3a90 	vmov	s15, r3
 80034ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80034f4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80036d4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80034f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003500:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003504:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800350c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003510:	e087      	b.n	8003622 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	ee07 3a90 	vmov	s15, r3
 8003518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800351c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80036d8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8003520:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003524:	4b69      	ldr	r3, [pc, #420]	; (80036cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800352c:	ee07 3a90 	vmov	s15, r3
 8003530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003534:	ed97 6a03 	vldr	s12, [r7, #12]
 8003538:	eddf 5a66 	vldr	s11, [pc, #408]	; 80036d4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800353c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003540:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003544:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003548:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800354c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003550:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003554:	e065      	b.n	8003622 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	ee07 3a90 	vmov	s15, r3
 800355c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003560:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80036dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003564:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003568:	4b58      	ldr	r3, [pc, #352]	; (80036cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003570:	ee07 3a90 	vmov	s15, r3
 8003574:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003578:	ed97 6a03 	vldr	s12, [r7, #12]
 800357c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80036d4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003580:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003584:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003588:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800358c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003594:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003598:	e043      	b.n	8003622 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	ee07 3a90 	vmov	s15, r3
 80035a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035a4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80036e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80035a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035ac:	4b47      	ldr	r3, [pc, #284]	; (80036cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b4:	ee07 3a90 	vmov	s15, r3
 80035b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80035c0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80036d4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80035c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035dc:	e021      	b.n	8003622 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	ee07 3a90 	vmov	s15, r3
 80035e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035e8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80036dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80035ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035f0:	4b36      	ldr	r3, [pc, #216]	; (80036cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f8:	ee07 3a90 	vmov	s15, r3
 80035fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003600:	ed97 6a03 	vldr	s12, [r7, #12]
 8003604:	eddf 5a33 	vldr	s11, [pc, #204]	; 80036d4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003608:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800360c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003610:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003614:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800361c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003620:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003622:	4b2a      	ldr	r3, [pc, #168]	; (80036cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	0a5b      	lsrs	r3, r3, #9
 8003628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800362c:	ee07 3a90 	vmov	s15, r3
 8003630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003634:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003638:	ee37 7a87 	vadd.f32	s14, s15, s14
 800363c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003648:	ee17 2a90 	vmov	r2, s15
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003650:	4b1e      	ldr	r3, [pc, #120]	; (80036cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	0c1b      	lsrs	r3, r3, #16
 8003656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800365a:	ee07 3a90 	vmov	s15, r3
 800365e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003662:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003666:	ee37 7a87 	vadd.f32	s14, s15, s14
 800366a:	edd7 6a07 	vldr	s13, [r7, #28]
 800366e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003676:	ee17 2a90 	vmov	r2, s15
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800367e:	4b13      	ldr	r3, [pc, #76]	; (80036cc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	0e1b      	lsrs	r3, r3, #24
 8003684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003688:	ee07 3a90 	vmov	s15, r3
 800368c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003690:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003694:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003698:	edd7 6a07 	vldr	s13, [r7, #28]
 800369c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036a4:	ee17 2a90 	vmov	r2, s15
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80036ac:	e008      	b.n	80036c0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	609a      	str	r2, [r3, #8]
}
 80036c0:	bf00      	nop
 80036c2:	3724      	adds	r7, #36	; 0x24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	58024400 	.word	0x58024400
 80036d0:	03d09000 	.word	0x03d09000
 80036d4:	46000000 	.word	0x46000000
 80036d8:	4c742400 	.word	0x4c742400
 80036dc:	4a742400 	.word	0x4a742400
 80036e0:	4af42400 	.word	0x4af42400

080036e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80036f2:	4b53      	ldr	r3, [pc, #332]	; (8003840 <RCCEx_PLL2_Config+0x15c>)
 80036f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d101      	bne.n	8003702 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e099      	b.n	8003836 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003702:	4b4f      	ldr	r3, [pc, #316]	; (8003840 <RCCEx_PLL2_Config+0x15c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a4e      	ldr	r2, [pc, #312]	; (8003840 <RCCEx_PLL2_Config+0x15c>)
 8003708:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800370c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800370e:	f7fd fbc9 	bl	8000ea4 <HAL_GetTick>
 8003712:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003714:	e008      	b.n	8003728 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003716:	f7fd fbc5 	bl	8000ea4 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e086      	b.n	8003836 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003728:	4b45      	ldr	r3, [pc, #276]	; (8003840 <RCCEx_PLL2_Config+0x15c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1f0      	bne.n	8003716 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003734:	4b42      	ldr	r3, [pc, #264]	; (8003840 <RCCEx_PLL2_Config+0x15c>)
 8003736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003738:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	031b      	lsls	r3, r3, #12
 8003742:	493f      	ldr	r1, [pc, #252]	; (8003840 <RCCEx_PLL2_Config+0x15c>)
 8003744:	4313      	orrs	r3, r2
 8003746:	628b      	str	r3, [r1, #40]	; 0x28
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	3b01      	subs	r3, #1
 800374e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	3b01      	subs	r3, #1
 8003758:	025b      	lsls	r3, r3, #9
 800375a:	b29b      	uxth	r3, r3
 800375c:	431a      	orrs	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	3b01      	subs	r3, #1
 8003764:	041b      	lsls	r3, r3, #16
 8003766:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	3b01      	subs	r3, #1
 8003772:	061b      	lsls	r3, r3, #24
 8003774:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003778:	4931      	ldr	r1, [pc, #196]	; (8003840 <RCCEx_PLL2_Config+0x15c>)
 800377a:	4313      	orrs	r3, r2
 800377c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800377e:	4b30      	ldr	r3, [pc, #192]	; (8003840 <RCCEx_PLL2_Config+0x15c>)
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	492d      	ldr	r1, [pc, #180]	; (8003840 <RCCEx_PLL2_Config+0x15c>)
 800378c:	4313      	orrs	r3, r2
 800378e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003790:	4b2b      	ldr	r3, [pc, #172]	; (8003840 <RCCEx_PLL2_Config+0x15c>)
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	f023 0220 	bic.w	r2, r3, #32
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	4928      	ldr	r1, [pc, #160]	; (8003840 <RCCEx_PLL2_Config+0x15c>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80037a2:	4b27      	ldr	r3, [pc, #156]	; (8003840 <RCCEx_PLL2_Config+0x15c>)
 80037a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a6:	4a26      	ldr	r2, [pc, #152]	; (8003840 <RCCEx_PLL2_Config+0x15c>)
 80037a8:	f023 0310 	bic.w	r3, r3, #16
 80037ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80037ae:	4b24      	ldr	r3, [pc, #144]	; (8003840 <RCCEx_PLL2_Config+0x15c>)
 80037b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037b2:	4b24      	ldr	r3, [pc, #144]	; (8003844 <RCCEx_PLL2_Config+0x160>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	69d2      	ldr	r2, [r2, #28]
 80037ba:	00d2      	lsls	r2, r2, #3
 80037bc:	4920      	ldr	r1, [pc, #128]	; (8003840 <RCCEx_PLL2_Config+0x15c>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80037c2:	4b1f      	ldr	r3, [pc, #124]	; (8003840 <RCCEx_PLL2_Config+0x15c>)
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c6:	4a1e      	ldr	r2, [pc, #120]	; (8003840 <RCCEx_PLL2_Config+0x15c>)
 80037c8:	f043 0310 	orr.w	r3, r3, #16
 80037cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d106      	bne.n	80037e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80037d4:	4b1a      	ldr	r3, [pc, #104]	; (8003840 <RCCEx_PLL2_Config+0x15c>)
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	4a19      	ldr	r2, [pc, #100]	; (8003840 <RCCEx_PLL2_Config+0x15c>)
 80037da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80037e0:	e00f      	b.n	8003802 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d106      	bne.n	80037f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80037e8:	4b15      	ldr	r3, [pc, #84]	; (8003840 <RCCEx_PLL2_Config+0x15c>)
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	4a14      	ldr	r2, [pc, #80]	; (8003840 <RCCEx_PLL2_Config+0x15c>)
 80037ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80037f4:	e005      	b.n	8003802 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80037f6:	4b12      	ldr	r3, [pc, #72]	; (8003840 <RCCEx_PLL2_Config+0x15c>)
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	4a11      	ldr	r2, [pc, #68]	; (8003840 <RCCEx_PLL2_Config+0x15c>)
 80037fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003800:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003802:	4b0f      	ldr	r3, [pc, #60]	; (8003840 <RCCEx_PLL2_Config+0x15c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a0e      	ldr	r2, [pc, #56]	; (8003840 <RCCEx_PLL2_Config+0x15c>)
 8003808:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800380c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800380e:	f7fd fb49 	bl	8000ea4 <HAL_GetTick>
 8003812:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003814:	e008      	b.n	8003828 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003816:	f7fd fb45 	bl	8000ea4 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e006      	b.n	8003836 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003828:	4b05      	ldr	r3, [pc, #20]	; (8003840 <RCCEx_PLL2_Config+0x15c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0f0      	beq.n	8003816 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003834:	7bfb      	ldrb	r3, [r7, #15]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	58024400 	.word	0x58024400
 8003844:	ffff0007 	.word	0xffff0007

08003848 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003856:	4b53      	ldr	r3, [pc, #332]	; (80039a4 <RCCEx_PLL3_Config+0x15c>)
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	2b03      	cmp	r3, #3
 8003860:	d101      	bne.n	8003866 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e099      	b.n	800399a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003866:	4b4f      	ldr	r3, [pc, #316]	; (80039a4 <RCCEx_PLL3_Config+0x15c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a4e      	ldr	r2, [pc, #312]	; (80039a4 <RCCEx_PLL3_Config+0x15c>)
 800386c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003870:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003872:	f7fd fb17 	bl	8000ea4 <HAL_GetTick>
 8003876:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003878:	e008      	b.n	800388c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800387a:	f7fd fb13 	bl	8000ea4 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e086      	b.n	800399a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800388c:	4b45      	ldr	r3, [pc, #276]	; (80039a4 <RCCEx_PLL3_Config+0x15c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1f0      	bne.n	800387a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003898:	4b42      	ldr	r3, [pc, #264]	; (80039a4 <RCCEx_PLL3_Config+0x15c>)
 800389a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	051b      	lsls	r3, r3, #20
 80038a6:	493f      	ldr	r1, [pc, #252]	; (80039a4 <RCCEx_PLL3_Config+0x15c>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	628b      	str	r3, [r1, #40]	; 0x28
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	3b01      	subs	r3, #1
 80038b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	025b      	lsls	r3, r3, #9
 80038be:	b29b      	uxth	r3, r3
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	041b      	lsls	r3, r3, #16
 80038ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	3b01      	subs	r3, #1
 80038d6:	061b      	lsls	r3, r3, #24
 80038d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80038dc:	4931      	ldr	r1, [pc, #196]	; (80039a4 <RCCEx_PLL3_Config+0x15c>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80038e2:	4b30      	ldr	r3, [pc, #192]	; (80039a4 <RCCEx_PLL3_Config+0x15c>)
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	492d      	ldr	r1, [pc, #180]	; (80039a4 <RCCEx_PLL3_Config+0x15c>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80038f4:	4b2b      	ldr	r3, [pc, #172]	; (80039a4 <RCCEx_PLL3_Config+0x15c>)
 80038f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	4928      	ldr	r1, [pc, #160]	; (80039a4 <RCCEx_PLL3_Config+0x15c>)
 8003902:	4313      	orrs	r3, r2
 8003904:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003906:	4b27      	ldr	r3, [pc, #156]	; (80039a4 <RCCEx_PLL3_Config+0x15c>)
 8003908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390a:	4a26      	ldr	r2, [pc, #152]	; (80039a4 <RCCEx_PLL3_Config+0x15c>)
 800390c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003910:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003912:	4b24      	ldr	r3, [pc, #144]	; (80039a4 <RCCEx_PLL3_Config+0x15c>)
 8003914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003916:	4b24      	ldr	r3, [pc, #144]	; (80039a8 <RCCEx_PLL3_Config+0x160>)
 8003918:	4013      	ands	r3, r2
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	69d2      	ldr	r2, [r2, #28]
 800391e:	00d2      	lsls	r2, r2, #3
 8003920:	4920      	ldr	r1, [pc, #128]	; (80039a4 <RCCEx_PLL3_Config+0x15c>)
 8003922:	4313      	orrs	r3, r2
 8003924:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003926:	4b1f      	ldr	r3, [pc, #124]	; (80039a4 <RCCEx_PLL3_Config+0x15c>)
 8003928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392a:	4a1e      	ldr	r2, [pc, #120]	; (80039a4 <RCCEx_PLL3_Config+0x15c>)
 800392c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003930:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d106      	bne.n	8003946 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003938:	4b1a      	ldr	r3, [pc, #104]	; (80039a4 <RCCEx_PLL3_Config+0x15c>)
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	4a19      	ldr	r2, [pc, #100]	; (80039a4 <RCCEx_PLL3_Config+0x15c>)
 800393e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003942:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003944:	e00f      	b.n	8003966 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d106      	bne.n	800395a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800394c:	4b15      	ldr	r3, [pc, #84]	; (80039a4 <RCCEx_PLL3_Config+0x15c>)
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	4a14      	ldr	r2, [pc, #80]	; (80039a4 <RCCEx_PLL3_Config+0x15c>)
 8003952:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003956:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003958:	e005      	b.n	8003966 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800395a:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <RCCEx_PLL3_Config+0x15c>)
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	4a11      	ldr	r2, [pc, #68]	; (80039a4 <RCCEx_PLL3_Config+0x15c>)
 8003960:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003964:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003966:	4b0f      	ldr	r3, [pc, #60]	; (80039a4 <RCCEx_PLL3_Config+0x15c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a0e      	ldr	r2, [pc, #56]	; (80039a4 <RCCEx_PLL3_Config+0x15c>)
 800396c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003970:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003972:	f7fd fa97 	bl	8000ea4 <HAL_GetTick>
 8003976:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003978:	e008      	b.n	800398c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800397a:	f7fd fa93 	bl	8000ea4 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e006      	b.n	800399a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800398c:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <RCCEx_PLL3_Config+0x15c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0f0      	beq.n	800397a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003998:	7bfb      	ldrb	r3, [r7, #15]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	58024400 	.word	0x58024400
 80039a8:	ffff0007 	.word	0xffff0007

080039ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e049      	b.n	8003a52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d106      	bne.n	80039d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f841 	bl	8003a5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3304      	adds	r3, #4
 80039e8:	4619      	mov	r1, r3
 80039ea:	4610      	mov	r0, r2
 80039ec:	f000 f9be 	bl	8003d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
	...

08003a70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d001      	beq.n	8003a88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e021      	b.n	8003acc <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <HAL_TIM_Base_Start_IT+0x68>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b06      	cmp	r3, #6
 8003ab0:	d00b      	beq.n	8003aca <HAL_TIM_Base_Start_IT+0x5a>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab8:	d007      	beq.n	8003aca <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 0201 	orr.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	00010007 	.word	0x00010007

08003adc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d122      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d11b      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0202 	mvn.w	r2, #2
 8003b08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f905 	bl	8003d2e <HAL_TIM_IC_CaptureCallback>
 8003b24:	e005      	b.n	8003b32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f8f7 	bl	8003d1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f908 	bl	8003d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d122      	bne.n	8003b8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d11b      	bne.n	8003b8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f06f 0204 	mvn.w	r2, #4
 8003b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2202      	movs	r2, #2
 8003b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f8db 	bl	8003d2e <HAL_TIM_IC_CaptureCallback>
 8003b78:	e005      	b.n	8003b86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f8cd 	bl	8003d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f8de 	bl	8003d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d122      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d11b      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f06f 0208 	mvn.w	r2, #8
 8003bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2204      	movs	r2, #4
 8003bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f8b1 	bl	8003d2e <HAL_TIM_IC_CaptureCallback>
 8003bcc:	e005      	b.n	8003bda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f8a3 	bl	8003d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f8b4 	bl	8003d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0310 	and.w	r3, r3, #16
 8003bea:	2b10      	cmp	r3, #16
 8003bec:	d122      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	2b10      	cmp	r3, #16
 8003bfa:	d11b      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0210 	mvn.w	r2, #16
 8003c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2208      	movs	r2, #8
 8003c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f887 	bl	8003d2e <HAL_TIM_IC_CaptureCallback>
 8003c20:	e005      	b.n	8003c2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f879 	bl	8003d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f88a 	bl	8003d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d10e      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d107      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0201 	mvn.w	r2, #1
 8003c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7fc ff30 	bl	8000ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6a:	2b80      	cmp	r3, #128	; 0x80
 8003c6c:	d10e      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c78:	2b80      	cmp	r3, #128	; 0x80
 8003c7a:	d107      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f914 	bl	8003eb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c9a:	d10e      	bne.n	8003cba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca6:	2b80      	cmp	r3, #128	; 0x80
 8003ca8:	d107      	bne.n	8003cba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f907 	bl	8003ec8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc4:	2b40      	cmp	r3, #64	; 0x40
 8003cc6:	d10e      	bne.n	8003ce6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd2:	2b40      	cmp	r3, #64	; 0x40
 8003cd4:	d107      	bne.n	8003ce6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f838 	bl	8003d56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b20      	cmp	r3, #32
 8003cf2:	d10e      	bne.n	8003d12 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b20      	cmp	r3, #32
 8003d00:	d107      	bne.n	8003d12 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f06f 0220 	mvn.w	r2, #32
 8003d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f8c7 	bl	8003ea0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d12:	bf00      	nop
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
	...

08003d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a40      	ldr	r2, [pc, #256]	; (8003e80 <TIM_Base_SetConfig+0x114>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d013      	beq.n	8003dac <TIM_Base_SetConfig+0x40>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8a:	d00f      	beq.n	8003dac <TIM_Base_SetConfig+0x40>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a3d      	ldr	r2, [pc, #244]	; (8003e84 <TIM_Base_SetConfig+0x118>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d00b      	beq.n	8003dac <TIM_Base_SetConfig+0x40>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a3c      	ldr	r2, [pc, #240]	; (8003e88 <TIM_Base_SetConfig+0x11c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d007      	beq.n	8003dac <TIM_Base_SetConfig+0x40>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a3b      	ldr	r2, [pc, #236]	; (8003e8c <TIM_Base_SetConfig+0x120>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d003      	beq.n	8003dac <TIM_Base_SetConfig+0x40>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a3a      	ldr	r2, [pc, #232]	; (8003e90 <TIM_Base_SetConfig+0x124>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d108      	bne.n	8003dbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a2f      	ldr	r2, [pc, #188]	; (8003e80 <TIM_Base_SetConfig+0x114>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d01f      	beq.n	8003e06 <TIM_Base_SetConfig+0x9a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dcc:	d01b      	beq.n	8003e06 <TIM_Base_SetConfig+0x9a>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a2c      	ldr	r2, [pc, #176]	; (8003e84 <TIM_Base_SetConfig+0x118>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d017      	beq.n	8003e06 <TIM_Base_SetConfig+0x9a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a2b      	ldr	r2, [pc, #172]	; (8003e88 <TIM_Base_SetConfig+0x11c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d013      	beq.n	8003e06 <TIM_Base_SetConfig+0x9a>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a2a      	ldr	r2, [pc, #168]	; (8003e8c <TIM_Base_SetConfig+0x120>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00f      	beq.n	8003e06 <TIM_Base_SetConfig+0x9a>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a29      	ldr	r2, [pc, #164]	; (8003e90 <TIM_Base_SetConfig+0x124>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d00b      	beq.n	8003e06 <TIM_Base_SetConfig+0x9a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a28      	ldr	r2, [pc, #160]	; (8003e94 <TIM_Base_SetConfig+0x128>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d007      	beq.n	8003e06 <TIM_Base_SetConfig+0x9a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a27      	ldr	r2, [pc, #156]	; (8003e98 <TIM_Base_SetConfig+0x12c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d003      	beq.n	8003e06 <TIM_Base_SetConfig+0x9a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a26      	ldr	r2, [pc, #152]	; (8003e9c <TIM_Base_SetConfig+0x130>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d108      	bne.n	8003e18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a10      	ldr	r2, [pc, #64]	; (8003e80 <TIM_Base_SetConfig+0x114>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00f      	beq.n	8003e64 <TIM_Base_SetConfig+0xf8>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a12      	ldr	r2, [pc, #72]	; (8003e90 <TIM_Base_SetConfig+0x124>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d00b      	beq.n	8003e64 <TIM_Base_SetConfig+0xf8>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a11      	ldr	r2, [pc, #68]	; (8003e94 <TIM_Base_SetConfig+0x128>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d007      	beq.n	8003e64 <TIM_Base_SetConfig+0xf8>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a10      	ldr	r2, [pc, #64]	; (8003e98 <TIM_Base_SetConfig+0x12c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d003      	beq.n	8003e64 <TIM_Base_SetConfig+0xf8>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a0f      	ldr	r2, [pc, #60]	; (8003e9c <TIM_Base_SetConfig+0x130>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d103      	bne.n	8003e6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	691a      	ldr	r2, [r3, #16]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	615a      	str	r2, [r3, #20]
}
 8003e72:	bf00      	nop
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40010000 	.word	0x40010000
 8003e84:	40000400 	.word	0x40000400
 8003e88:	40000800 	.word	0x40000800
 8003e8c:	40000c00 	.word	0x40000c00
 8003e90:	40010400 	.word	0x40010400
 8003e94:	40014000 	.word	0x40014000
 8003e98:	40014400 	.word	0x40014400
 8003e9c:	40014800 	.word	0x40014800

08003ea0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e042      	b.n	8003f74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d106      	bne.n	8003f06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7fc fe11 	bl	8000b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2224      	movs	r2, #36	; 0x24
 8003f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0201 	bic.w	r2, r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f82c 	bl	8003f7c <UART_SetConfig>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d101      	bne.n	8003f2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e022      	b.n	8003f74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fecc 	bl	8004cd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 0201 	orr.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 ff53 	bl	8004e18 <UART_CheckIdleState>
 8003f72:	4603      	mov	r3, r0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f7c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003f80:	b08e      	sub	sp, #56	; 0x38
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003faa:	4313      	orrs	r3, r2
 8003fac:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	4bc1      	ldr	r3, [pc, #772]	; (80042bc <UART_SetConfig+0x340>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003fbe:	430b      	orrs	r3, r1
 8003fc0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4ab7      	ldr	r2, [pc, #732]	; (80042c0 <UART_SetConfig+0x344>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d004      	beq.n	8003ff2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	4bb2      	ldr	r3, [pc, #712]	; (80042c4 <UART_SetConfig+0x348>)
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6812      	ldr	r2, [r2, #0]
 8004000:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004002:	430b      	orrs	r3, r1
 8004004:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	f023 010f 	bic.w	r1, r3, #15
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4aa9      	ldr	r2, [pc, #676]	; (80042c8 <UART_SetConfig+0x34c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d177      	bne.n	8004116 <UART_SetConfig+0x19a>
 8004026:	4ba9      	ldr	r3, [pc, #676]	; (80042cc <UART_SetConfig+0x350>)
 8004028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800402e:	2b28      	cmp	r3, #40	; 0x28
 8004030:	d86c      	bhi.n	800410c <UART_SetConfig+0x190>
 8004032:	a201      	add	r2, pc, #4	; (adr r2, 8004038 <UART_SetConfig+0xbc>)
 8004034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004038:	080040dd 	.word	0x080040dd
 800403c:	0800410d 	.word	0x0800410d
 8004040:	0800410d 	.word	0x0800410d
 8004044:	0800410d 	.word	0x0800410d
 8004048:	0800410d 	.word	0x0800410d
 800404c:	0800410d 	.word	0x0800410d
 8004050:	0800410d 	.word	0x0800410d
 8004054:	0800410d 	.word	0x0800410d
 8004058:	080040e5 	.word	0x080040e5
 800405c:	0800410d 	.word	0x0800410d
 8004060:	0800410d 	.word	0x0800410d
 8004064:	0800410d 	.word	0x0800410d
 8004068:	0800410d 	.word	0x0800410d
 800406c:	0800410d 	.word	0x0800410d
 8004070:	0800410d 	.word	0x0800410d
 8004074:	0800410d 	.word	0x0800410d
 8004078:	080040ed 	.word	0x080040ed
 800407c:	0800410d 	.word	0x0800410d
 8004080:	0800410d 	.word	0x0800410d
 8004084:	0800410d 	.word	0x0800410d
 8004088:	0800410d 	.word	0x0800410d
 800408c:	0800410d 	.word	0x0800410d
 8004090:	0800410d 	.word	0x0800410d
 8004094:	0800410d 	.word	0x0800410d
 8004098:	080040f5 	.word	0x080040f5
 800409c:	0800410d 	.word	0x0800410d
 80040a0:	0800410d 	.word	0x0800410d
 80040a4:	0800410d 	.word	0x0800410d
 80040a8:	0800410d 	.word	0x0800410d
 80040ac:	0800410d 	.word	0x0800410d
 80040b0:	0800410d 	.word	0x0800410d
 80040b4:	0800410d 	.word	0x0800410d
 80040b8:	080040fd 	.word	0x080040fd
 80040bc:	0800410d 	.word	0x0800410d
 80040c0:	0800410d 	.word	0x0800410d
 80040c4:	0800410d 	.word	0x0800410d
 80040c8:	0800410d 	.word	0x0800410d
 80040cc:	0800410d 	.word	0x0800410d
 80040d0:	0800410d 	.word	0x0800410d
 80040d4:	0800410d 	.word	0x0800410d
 80040d8:	08004105 	.word	0x08004105
 80040dc:	2301      	movs	r3, #1
 80040de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040e2:	e339      	b.n	8004758 <UART_SetConfig+0x7dc>
 80040e4:	2304      	movs	r3, #4
 80040e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ea:	e335      	b.n	8004758 <UART_SetConfig+0x7dc>
 80040ec:	2308      	movs	r3, #8
 80040ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040f2:	e331      	b.n	8004758 <UART_SetConfig+0x7dc>
 80040f4:	2310      	movs	r3, #16
 80040f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040fa:	e32d      	b.n	8004758 <UART_SetConfig+0x7dc>
 80040fc:	2320      	movs	r3, #32
 80040fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004102:	e329      	b.n	8004758 <UART_SetConfig+0x7dc>
 8004104:	2340      	movs	r3, #64	; 0x40
 8004106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800410a:	e325      	b.n	8004758 <UART_SetConfig+0x7dc>
 800410c:	2380      	movs	r3, #128	; 0x80
 800410e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004112:	bf00      	nop
 8004114:	e320      	b.n	8004758 <UART_SetConfig+0x7dc>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a6d      	ldr	r2, [pc, #436]	; (80042d0 <UART_SetConfig+0x354>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d132      	bne.n	8004186 <UART_SetConfig+0x20a>
 8004120:	4b6a      	ldr	r3, [pc, #424]	; (80042cc <UART_SetConfig+0x350>)
 8004122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	2b05      	cmp	r3, #5
 800412a:	d827      	bhi.n	800417c <UART_SetConfig+0x200>
 800412c:	a201      	add	r2, pc, #4	; (adr r2, 8004134 <UART_SetConfig+0x1b8>)
 800412e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004132:	bf00      	nop
 8004134:	0800414d 	.word	0x0800414d
 8004138:	08004155 	.word	0x08004155
 800413c:	0800415d 	.word	0x0800415d
 8004140:	08004165 	.word	0x08004165
 8004144:	0800416d 	.word	0x0800416d
 8004148:	08004175 	.word	0x08004175
 800414c:	2300      	movs	r3, #0
 800414e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004152:	e301      	b.n	8004758 <UART_SetConfig+0x7dc>
 8004154:	2304      	movs	r3, #4
 8004156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800415a:	e2fd      	b.n	8004758 <UART_SetConfig+0x7dc>
 800415c:	2308      	movs	r3, #8
 800415e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004162:	e2f9      	b.n	8004758 <UART_SetConfig+0x7dc>
 8004164:	2310      	movs	r3, #16
 8004166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800416a:	e2f5      	b.n	8004758 <UART_SetConfig+0x7dc>
 800416c:	2320      	movs	r3, #32
 800416e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004172:	e2f1      	b.n	8004758 <UART_SetConfig+0x7dc>
 8004174:	2340      	movs	r3, #64	; 0x40
 8004176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800417a:	e2ed      	b.n	8004758 <UART_SetConfig+0x7dc>
 800417c:	2380      	movs	r3, #128	; 0x80
 800417e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004182:	bf00      	nop
 8004184:	e2e8      	b.n	8004758 <UART_SetConfig+0x7dc>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a52      	ldr	r2, [pc, #328]	; (80042d4 <UART_SetConfig+0x358>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d132      	bne.n	80041f6 <UART_SetConfig+0x27a>
 8004190:	4b4e      	ldr	r3, [pc, #312]	; (80042cc <UART_SetConfig+0x350>)
 8004192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	2b05      	cmp	r3, #5
 800419a:	d827      	bhi.n	80041ec <UART_SetConfig+0x270>
 800419c:	a201      	add	r2, pc, #4	; (adr r2, 80041a4 <UART_SetConfig+0x228>)
 800419e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a2:	bf00      	nop
 80041a4:	080041bd 	.word	0x080041bd
 80041a8:	080041c5 	.word	0x080041c5
 80041ac:	080041cd 	.word	0x080041cd
 80041b0:	080041d5 	.word	0x080041d5
 80041b4:	080041dd 	.word	0x080041dd
 80041b8:	080041e5 	.word	0x080041e5
 80041bc:	2300      	movs	r3, #0
 80041be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041c2:	e2c9      	b.n	8004758 <UART_SetConfig+0x7dc>
 80041c4:	2304      	movs	r3, #4
 80041c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041ca:	e2c5      	b.n	8004758 <UART_SetConfig+0x7dc>
 80041cc:	2308      	movs	r3, #8
 80041ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041d2:	e2c1      	b.n	8004758 <UART_SetConfig+0x7dc>
 80041d4:	2310      	movs	r3, #16
 80041d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041da:	e2bd      	b.n	8004758 <UART_SetConfig+0x7dc>
 80041dc:	2320      	movs	r3, #32
 80041de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041e2:	e2b9      	b.n	8004758 <UART_SetConfig+0x7dc>
 80041e4:	2340      	movs	r3, #64	; 0x40
 80041e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041ea:	e2b5      	b.n	8004758 <UART_SetConfig+0x7dc>
 80041ec:	2380      	movs	r3, #128	; 0x80
 80041ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041f2:	bf00      	nop
 80041f4:	e2b0      	b.n	8004758 <UART_SetConfig+0x7dc>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a37      	ldr	r2, [pc, #220]	; (80042d8 <UART_SetConfig+0x35c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d132      	bne.n	8004266 <UART_SetConfig+0x2ea>
 8004200:	4b32      	ldr	r3, [pc, #200]	; (80042cc <UART_SetConfig+0x350>)
 8004202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	2b05      	cmp	r3, #5
 800420a:	d827      	bhi.n	800425c <UART_SetConfig+0x2e0>
 800420c:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <UART_SetConfig+0x298>)
 800420e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004212:	bf00      	nop
 8004214:	0800422d 	.word	0x0800422d
 8004218:	08004235 	.word	0x08004235
 800421c:	0800423d 	.word	0x0800423d
 8004220:	08004245 	.word	0x08004245
 8004224:	0800424d 	.word	0x0800424d
 8004228:	08004255 	.word	0x08004255
 800422c:	2300      	movs	r3, #0
 800422e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004232:	e291      	b.n	8004758 <UART_SetConfig+0x7dc>
 8004234:	2304      	movs	r3, #4
 8004236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800423a:	e28d      	b.n	8004758 <UART_SetConfig+0x7dc>
 800423c:	2308      	movs	r3, #8
 800423e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004242:	e289      	b.n	8004758 <UART_SetConfig+0x7dc>
 8004244:	2310      	movs	r3, #16
 8004246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800424a:	e285      	b.n	8004758 <UART_SetConfig+0x7dc>
 800424c:	2320      	movs	r3, #32
 800424e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004252:	e281      	b.n	8004758 <UART_SetConfig+0x7dc>
 8004254:	2340      	movs	r3, #64	; 0x40
 8004256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800425a:	e27d      	b.n	8004758 <UART_SetConfig+0x7dc>
 800425c:	2380      	movs	r3, #128	; 0x80
 800425e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004262:	bf00      	nop
 8004264:	e278      	b.n	8004758 <UART_SetConfig+0x7dc>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a1c      	ldr	r2, [pc, #112]	; (80042dc <UART_SetConfig+0x360>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d144      	bne.n	80042fa <UART_SetConfig+0x37e>
 8004270:	4b16      	ldr	r3, [pc, #88]	; (80042cc <UART_SetConfig+0x350>)
 8004272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	2b05      	cmp	r3, #5
 800427a:	d839      	bhi.n	80042f0 <UART_SetConfig+0x374>
 800427c:	a201      	add	r2, pc, #4	; (adr r2, 8004284 <UART_SetConfig+0x308>)
 800427e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004282:	bf00      	nop
 8004284:	0800429d 	.word	0x0800429d
 8004288:	080042a5 	.word	0x080042a5
 800428c:	080042ad 	.word	0x080042ad
 8004290:	080042b5 	.word	0x080042b5
 8004294:	080042e1 	.word	0x080042e1
 8004298:	080042e9 	.word	0x080042e9
 800429c:	2300      	movs	r3, #0
 800429e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042a2:	e259      	b.n	8004758 <UART_SetConfig+0x7dc>
 80042a4:	2304      	movs	r3, #4
 80042a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042aa:	e255      	b.n	8004758 <UART_SetConfig+0x7dc>
 80042ac:	2308      	movs	r3, #8
 80042ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042b2:	e251      	b.n	8004758 <UART_SetConfig+0x7dc>
 80042b4:	2310      	movs	r3, #16
 80042b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042ba:	e24d      	b.n	8004758 <UART_SetConfig+0x7dc>
 80042bc:	cfff69f3 	.word	0xcfff69f3
 80042c0:	58000c00 	.word	0x58000c00
 80042c4:	11fff4ff 	.word	0x11fff4ff
 80042c8:	40011000 	.word	0x40011000
 80042cc:	58024400 	.word	0x58024400
 80042d0:	40004400 	.word	0x40004400
 80042d4:	40004800 	.word	0x40004800
 80042d8:	40004c00 	.word	0x40004c00
 80042dc:	40005000 	.word	0x40005000
 80042e0:	2320      	movs	r3, #32
 80042e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042e6:	e237      	b.n	8004758 <UART_SetConfig+0x7dc>
 80042e8:	2340      	movs	r3, #64	; 0x40
 80042ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042ee:	e233      	b.n	8004758 <UART_SetConfig+0x7dc>
 80042f0:	2380      	movs	r3, #128	; 0x80
 80042f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042f6:	bf00      	nop
 80042f8:	e22e      	b.n	8004758 <UART_SetConfig+0x7dc>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4ab5      	ldr	r2, [pc, #724]	; (80045d4 <UART_SetConfig+0x658>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d178      	bne.n	80043f6 <UART_SetConfig+0x47a>
 8004304:	4bb4      	ldr	r3, [pc, #720]	; (80045d8 <UART_SetConfig+0x65c>)
 8004306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004308:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800430c:	2b28      	cmp	r3, #40	; 0x28
 800430e:	d86d      	bhi.n	80043ec <UART_SetConfig+0x470>
 8004310:	a201      	add	r2, pc, #4	; (adr r2, 8004318 <UART_SetConfig+0x39c>)
 8004312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004316:	bf00      	nop
 8004318:	080043bd 	.word	0x080043bd
 800431c:	080043ed 	.word	0x080043ed
 8004320:	080043ed 	.word	0x080043ed
 8004324:	080043ed 	.word	0x080043ed
 8004328:	080043ed 	.word	0x080043ed
 800432c:	080043ed 	.word	0x080043ed
 8004330:	080043ed 	.word	0x080043ed
 8004334:	080043ed 	.word	0x080043ed
 8004338:	080043c5 	.word	0x080043c5
 800433c:	080043ed 	.word	0x080043ed
 8004340:	080043ed 	.word	0x080043ed
 8004344:	080043ed 	.word	0x080043ed
 8004348:	080043ed 	.word	0x080043ed
 800434c:	080043ed 	.word	0x080043ed
 8004350:	080043ed 	.word	0x080043ed
 8004354:	080043ed 	.word	0x080043ed
 8004358:	080043cd 	.word	0x080043cd
 800435c:	080043ed 	.word	0x080043ed
 8004360:	080043ed 	.word	0x080043ed
 8004364:	080043ed 	.word	0x080043ed
 8004368:	080043ed 	.word	0x080043ed
 800436c:	080043ed 	.word	0x080043ed
 8004370:	080043ed 	.word	0x080043ed
 8004374:	080043ed 	.word	0x080043ed
 8004378:	080043d5 	.word	0x080043d5
 800437c:	080043ed 	.word	0x080043ed
 8004380:	080043ed 	.word	0x080043ed
 8004384:	080043ed 	.word	0x080043ed
 8004388:	080043ed 	.word	0x080043ed
 800438c:	080043ed 	.word	0x080043ed
 8004390:	080043ed 	.word	0x080043ed
 8004394:	080043ed 	.word	0x080043ed
 8004398:	080043dd 	.word	0x080043dd
 800439c:	080043ed 	.word	0x080043ed
 80043a0:	080043ed 	.word	0x080043ed
 80043a4:	080043ed 	.word	0x080043ed
 80043a8:	080043ed 	.word	0x080043ed
 80043ac:	080043ed 	.word	0x080043ed
 80043b0:	080043ed 	.word	0x080043ed
 80043b4:	080043ed 	.word	0x080043ed
 80043b8:	080043e5 	.word	0x080043e5
 80043bc:	2301      	movs	r3, #1
 80043be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043c2:	e1c9      	b.n	8004758 <UART_SetConfig+0x7dc>
 80043c4:	2304      	movs	r3, #4
 80043c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ca:	e1c5      	b.n	8004758 <UART_SetConfig+0x7dc>
 80043cc:	2308      	movs	r3, #8
 80043ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043d2:	e1c1      	b.n	8004758 <UART_SetConfig+0x7dc>
 80043d4:	2310      	movs	r3, #16
 80043d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043da:	e1bd      	b.n	8004758 <UART_SetConfig+0x7dc>
 80043dc:	2320      	movs	r3, #32
 80043de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043e2:	e1b9      	b.n	8004758 <UART_SetConfig+0x7dc>
 80043e4:	2340      	movs	r3, #64	; 0x40
 80043e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ea:	e1b5      	b.n	8004758 <UART_SetConfig+0x7dc>
 80043ec:	2380      	movs	r3, #128	; 0x80
 80043ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043f2:	bf00      	nop
 80043f4:	e1b0      	b.n	8004758 <UART_SetConfig+0x7dc>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a78      	ldr	r2, [pc, #480]	; (80045dc <UART_SetConfig+0x660>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d132      	bne.n	8004466 <UART_SetConfig+0x4ea>
 8004400:	4b75      	ldr	r3, [pc, #468]	; (80045d8 <UART_SetConfig+0x65c>)
 8004402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	2b05      	cmp	r3, #5
 800440a:	d827      	bhi.n	800445c <UART_SetConfig+0x4e0>
 800440c:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <UART_SetConfig+0x498>)
 800440e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004412:	bf00      	nop
 8004414:	0800442d 	.word	0x0800442d
 8004418:	08004435 	.word	0x08004435
 800441c:	0800443d 	.word	0x0800443d
 8004420:	08004445 	.word	0x08004445
 8004424:	0800444d 	.word	0x0800444d
 8004428:	08004455 	.word	0x08004455
 800442c:	2300      	movs	r3, #0
 800442e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004432:	e191      	b.n	8004758 <UART_SetConfig+0x7dc>
 8004434:	2304      	movs	r3, #4
 8004436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800443a:	e18d      	b.n	8004758 <UART_SetConfig+0x7dc>
 800443c:	2308      	movs	r3, #8
 800443e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004442:	e189      	b.n	8004758 <UART_SetConfig+0x7dc>
 8004444:	2310      	movs	r3, #16
 8004446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800444a:	e185      	b.n	8004758 <UART_SetConfig+0x7dc>
 800444c:	2320      	movs	r3, #32
 800444e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004452:	e181      	b.n	8004758 <UART_SetConfig+0x7dc>
 8004454:	2340      	movs	r3, #64	; 0x40
 8004456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800445a:	e17d      	b.n	8004758 <UART_SetConfig+0x7dc>
 800445c:	2380      	movs	r3, #128	; 0x80
 800445e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004462:	bf00      	nop
 8004464:	e178      	b.n	8004758 <UART_SetConfig+0x7dc>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a5d      	ldr	r2, [pc, #372]	; (80045e0 <UART_SetConfig+0x664>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d132      	bne.n	80044d6 <UART_SetConfig+0x55a>
 8004470:	4b59      	ldr	r3, [pc, #356]	; (80045d8 <UART_SetConfig+0x65c>)
 8004472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	2b05      	cmp	r3, #5
 800447a:	d827      	bhi.n	80044cc <UART_SetConfig+0x550>
 800447c:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <UART_SetConfig+0x508>)
 800447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004482:	bf00      	nop
 8004484:	0800449d 	.word	0x0800449d
 8004488:	080044a5 	.word	0x080044a5
 800448c:	080044ad 	.word	0x080044ad
 8004490:	080044b5 	.word	0x080044b5
 8004494:	080044bd 	.word	0x080044bd
 8004498:	080044c5 	.word	0x080044c5
 800449c:	2300      	movs	r3, #0
 800449e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044a2:	e159      	b.n	8004758 <UART_SetConfig+0x7dc>
 80044a4:	2304      	movs	r3, #4
 80044a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044aa:	e155      	b.n	8004758 <UART_SetConfig+0x7dc>
 80044ac:	2308      	movs	r3, #8
 80044ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044b2:	e151      	b.n	8004758 <UART_SetConfig+0x7dc>
 80044b4:	2310      	movs	r3, #16
 80044b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044ba:	e14d      	b.n	8004758 <UART_SetConfig+0x7dc>
 80044bc:	2320      	movs	r3, #32
 80044be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044c2:	e149      	b.n	8004758 <UART_SetConfig+0x7dc>
 80044c4:	2340      	movs	r3, #64	; 0x40
 80044c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044ca:	e145      	b.n	8004758 <UART_SetConfig+0x7dc>
 80044cc:	2380      	movs	r3, #128	; 0x80
 80044ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044d2:	bf00      	nop
 80044d4:	e140      	b.n	8004758 <UART_SetConfig+0x7dc>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a42      	ldr	r2, [pc, #264]	; (80045e4 <UART_SetConfig+0x668>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	f040 8083 	bne.w	80045e8 <UART_SetConfig+0x66c>
 80044e2:	4b3d      	ldr	r3, [pc, #244]	; (80045d8 <UART_SetConfig+0x65c>)
 80044e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044ea:	2b28      	cmp	r3, #40	; 0x28
 80044ec:	d86c      	bhi.n	80045c8 <UART_SetConfig+0x64c>
 80044ee:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <UART_SetConfig+0x578>)
 80044f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f4:	08004599 	.word	0x08004599
 80044f8:	080045c9 	.word	0x080045c9
 80044fc:	080045c9 	.word	0x080045c9
 8004500:	080045c9 	.word	0x080045c9
 8004504:	080045c9 	.word	0x080045c9
 8004508:	080045c9 	.word	0x080045c9
 800450c:	080045c9 	.word	0x080045c9
 8004510:	080045c9 	.word	0x080045c9
 8004514:	080045a1 	.word	0x080045a1
 8004518:	080045c9 	.word	0x080045c9
 800451c:	080045c9 	.word	0x080045c9
 8004520:	080045c9 	.word	0x080045c9
 8004524:	080045c9 	.word	0x080045c9
 8004528:	080045c9 	.word	0x080045c9
 800452c:	080045c9 	.word	0x080045c9
 8004530:	080045c9 	.word	0x080045c9
 8004534:	080045a9 	.word	0x080045a9
 8004538:	080045c9 	.word	0x080045c9
 800453c:	080045c9 	.word	0x080045c9
 8004540:	080045c9 	.word	0x080045c9
 8004544:	080045c9 	.word	0x080045c9
 8004548:	080045c9 	.word	0x080045c9
 800454c:	080045c9 	.word	0x080045c9
 8004550:	080045c9 	.word	0x080045c9
 8004554:	080045b1 	.word	0x080045b1
 8004558:	080045c9 	.word	0x080045c9
 800455c:	080045c9 	.word	0x080045c9
 8004560:	080045c9 	.word	0x080045c9
 8004564:	080045c9 	.word	0x080045c9
 8004568:	080045c9 	.word	0x080045c9
 800456c:	080045c9 	.word	0x080045c9
 8004570:	080045c9 	.word	0x080045c9
 8004574:	080045b9 	.word	0x080045b9
 8004578:	080045c9 	.word	0x080045c9
 800457c:	080045c9 	.word	0x080045c9
 8004580:	080045c9 	.word	0x080045c9
 8004584:	080045c9 	.word	0x080045c9
 8004588:	080045c9 	.word	0x080045c9
 800458c:	080045c9 	.word	0x080045c9
 8004590:	080045c9 	.word	0x080045c9
 8004594:	080045c1 	.word	0x080045c1
 8004598:	2301      	movs	r3, #1
 800459a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800459e:	e0db      	b.n	8004758 <UART_SetConfig+0x7dc>
 80045a0:	2304      	movs	r3, #4
 80045a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045a6:	e0d7      	b.n	8004758 <UART_SetConfig+0x7dc>
 80045a8:	2308      	movs	r3, #8
 80045aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045ae:	e0d3      	b.n	8004758 <UART_SetConfig+0x7dc>
 80045b0:	2310      	movs	r3, #16
 80045b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045b6:	e0cf      	b.n	8004758 <UART_SetConfig+0x7dc>
 80045b8:	2320      	movs	r3, #32
 80045ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045be:	e0cb      	b.n	8004758 <UART_SetConfig+0x7dc>
 80045c0:	2340      	movs	r3, #64	; 0x40
 80045c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045c6:	e0c7      	b.n	8004758 <UART_SetConfig+0x7dc>
 80045c8:	2380      	movs	r3, #128	; 0x80
 80045ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045ce:	bf00      	nop
 80045d0:	e0c2      	b.n	8004758 <UART_SetConfig+0x7dc>
 80045d2:	bf00      	nop
 80045d4:	40011400 	.word	0x40011400
 80045d8:	58024400 	.word	0x58024400
 80045dc:	40007800 	.word	0x40007800
 80045e0:	40007c00 	.word	0x40007c00
 80045e4:	40011800 	.word	0x40011800
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4ab2      	ldr	r2, [pc, #712]	; (80048b8 <UART_SetConfig+0x93c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d177      	bne.n	80046e2 <UART_SetConfig+0x766>
 80045f2:	4bb2      	ldr	r3, [pc, #712]	; (80048bc <UART_SetConfig+0x940>)
 80045f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045fa:	2b28      	cmp	r3, #40	; 0x28
 80045fc:	d86c      	bhi.n	80046d8 <UART_SetConfig+0x75c>
 80045fe:	a201      	add	r2, pc, #4	; (adr r2, 8004604 <UART_SetConfig+0x688>)
 8004600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004604:	080046a9 	.word	0x080046a9
 8004608:	080046d9 	.word	0x080046d9
 800460c:	080046d9 	.word	0x080046d9
 8004610:	080046d9 	.word	0x080046d9
 8004614:	080046d9 	.word	0x080046d9
 8004618:	080046d9 	.word	0x080046d9
 800461c:	080046d9 	.word	0x080046d9
 8004620:	080046d9 	.word	0x080046d9
 8004624:	080046b1 	.word	0x080046b1
 8004628:	080046d9 	.word	0x080046d9
 800462c:	080046d9 	.word	0x080046d9
 8004630:	080046d9 	.word	0x080046d9
 8004634:	080046d9 	.word	0x080046d9
 8004638:	080046d9 	.word	0x080046d9
 800463c:	080046d9 	.word	0x080046d9
 8004640:	080046d9 	.word	0x080046d9
 8004644:	080046b9 	.word	0x080046b9
 8004648:	080046d9 	.word	0x080046d9
 800464c:	080046d9 	.word	0x080046d9
 8004650:	080046d9 	.word	0x080046d9
 8004654:	080046d9 	.word	0x080046d9
 8004658:	080046d9 	.word	0x080046d9
 800465c:	080046d9 	.word	0x080046d9
 8004660:	080046d9 	.word	0x080046d9
 8004664:	080046c1 	.word	0x080046c1
 8004668:	080046d9 	.word	0x080046d9
 800466c:	080046d9 	.word	0x080046d9
 8004670:	080046d9 	.word	0x080046d9
 8004674:	080046d9 	.word	0x080046d9
 8004678:	080046d9 	.word	0x080046d9
 800467c:	080046d9 	.word	0x080046d9
 8004680:	080046d9 	.word	0x080046d9
 8004684:	080046c9 	.word	0x080046c9
 8004688:	080046d9 	.word	0x080046d9
 800468c:	080046d9 	.word	0x080046d9
 8004690:	080046d9 	.word	0x080046d9
 8004694:	080046d9 	.word	0x080046d9
 8004698:	080046d9 	.word	0x080046d9
 800469c:	080046d9 	.word	0x080046d9
 80046a0:	080046d9 	.word	0x080046d9
 80046a4:	080046d1 	.word	0x080046d1
 80046a8:	2301      	movs	r3, #1
 80046aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046ae:	e053      	b.n	8004758 <UART_SetConfig+0x7dc>
 80046b0:	2304      	movs	r3, #4
 80046b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046b6:	e04f      	b.n	8004758 <UART_SetConfig+0x7dc>
 80046b8:	2308      	movs	r3, #8
 80046ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046be:	e04b      	b.n	8004758 <UART_SetConfig+0x7dc>
 80046c0:	2310      	movs	r3, #16
 80046c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046c6:	e047      	b.n	8004758 <UART_SetConfig+0x7dc>
 80046c8:	2320      	movs	r3, #32
 80046ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046ce:	e043      	b.n	8004758 <UART_SetConfig+0x7dc>
 80046d0:	2340      	movs	r3, #64	; 0x40
 80046d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046d6:	e03f      	b.n	8004758 <UART_SetConfig+0x7dc>
 80046d8:	2380      	movs	r3, #128	; 0x80
 80046da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046de:	bf00      	nop
 80046e0:	e03a      	b.n	8004758 <UART_SetConfig+0x7dc>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a76      	ldr	r2, [pc, #472]	; (80048c0 <UART_SetConfig+0x944>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d132      	bne.n	8004752 <UART_SetConfig+0x7d6>
 80046ec:	4b73      	ldr	r3, [pc, #460]	; (80048bc <UART_SetConfig+0x940>)
 80046ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	2b05      	cmp	r3, #5
 80046f6:	d827      	bhi.n	8004748 <UART_SetConfig+0x7cc>
 80046f8:	a201      	add	r2, pc, #4	; (adr r2, 8004700 <UART_SetConfig+0x784>)
 80046fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fe:	bf00      	nop
 8004700:	08004719 	.word	0x08004719
 8004704:	08004721 	.word	0x08004721
 8004708:	08004729 	.word	0x08004729
 800470c:	08004731 	.word	0x08004731
 8004710:	08004739 	.word	0x08004739
 8004714:	08004741 	.word	0x08004741
 8004718:	2302      	movs	r3, #2
 800471a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800471e:	e01b      	b.n	8004758 <UART_SetConfig+0x7dc>
 8004720:	2304      	movs	r3, #4
 8004722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004726:	e017      	b.n	8004758 <UART_SetConfig+0x7dc>
 8004728:	2308      	movs	r3, #8
 800472a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800472e:	e013      	b.n	8004758 <UART_SetConfig+0x7dc>
 8004730:	2310      	movs	r3, #16
 8004732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004736:	e00f      	b.n	8004758 <UART_SetConfig+0x7dc>
 8004738:	2320      	movs	r3, #32
 800473a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800473e:	e00b      	b.n	8004758 <UART_SetConfig+0x7dc>
 8004740:	2340      	movs	r3, #64	; 0x40
 8004742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004746:	e007      	b.n	8004758 <UART_SetConfig+0x7dc>
 8004748:	2380      	movs	r3, #128	; 0x80
 800474a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800474e:	bf00      	nop
 8004750:	e002      	b.n	8004758 <UART_SetConfig+0x7dc>
 8004752:	2380      	movs	r3, #128	; 0x80
 8004754:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a58      	ldr	r2, [pc, #352]	; (80048c0 <UART_SetConfig+0x944>)
 800475e:	4293      	cmp	r3, r2
 8004760:	f040 80b6 	bne.w	80048d0 <UART_SetConfig+0x954>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004764:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004768:	2b08      	cmp	r3, #8
 800476a:	d019      	beq.n	80047a0 <UART_SetConfig+0x824>
 800476c:	2b08      	cmp	r3, #8
 800476e:	dc04      	bgt.n	800477a <UART_SetConfig+0x7fe>
 8004770:	2b02      	cmp	r3, #2
 8004772:	d009      	beq.n	8004788 <UART_SetConfig+0x80c>
 8004774:	2b04      	cmp	r3, #4
 8004776:	d00b      	beq.n	8004790 <UART_SetConfig+0x814>
 8004778:	e034      	b.n	80047e4 <UART_SetConfig+0x868>
 800477a:	2b20      	cmp	r3, #32
 800477c:	d02b      	beq.n	80047d6 <UART_SetConfig+0x85a>
 800477e:	2b40      	cmp	r3, #64	; 0x40
 8004780:	d02c      	beq.n	80047dc <UART_SetConfig+0x860>
 8004782:	2b10      	cmp	r3, #16
 8004784:	d014      	beq.n	80047b0 <UART_SetConfig+0x834>
 8004786:	e02d      	b.n	80047e4 <UART_SetConfig+0x868>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004788:	f7fe fcfe 	bl	8003188 <HAL_RCCEx_GetD3PCLK1Freq>
 800478c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800478e:	e02f      	b.n	80047f0 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004790:	f107 0314 	add.w	r3, r7, #20
 8004794:	4618      	mov	r0, r3
 8004796:	f7fe fd0d 	bl	80031b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800479e:	e027      	b.n	80047f0 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047a0:	f107 0308 	add.w	r3, r7, #8
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fe fe51 	bl	800344c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047ae:	e01f      	b.n	80047f0 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047b0:	4b42      	ldr	r3, [pc, #264]	; (80048bc <UART_SetConfig+0x940>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0320 	and.w	r3, r3, #32
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d009      	beq.n	80047d0 <UART_SetConfig+0x854>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80047bc:	4b3f      	ldr	r3, [pc, #252]	; (80048bc <UART_SetConfig+0x940>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	08db      	lsrs	r3, r3, #3
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	4a3f      	ldr	r2, [pc, #252]	; (80048c4 <UART_SetConfig+0x948>)
 80047c8:	fa22 f303 	lsr.w	r3, r2, r3
 80047cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80047ce:	e00f      	b.n	80047f0 <UART_SetConfig+0x874>
          pclk = (uint32_t) HSI_VALUE;
 80047d0:	4b3c      	ldr	r3, [pc, #240]	; (80048c4 <UART_SetConfig+0x948>)
 80047d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047d4:	e00c      	b.n	80047f0 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80047d6:	4b3c      	ldr	r3, [pc, #240]	; (80048c8 <UART_SetConfig+0x94c>)
 80047d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047da:	e009      	b.n	80047f0 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047e2:	e005      	b.n	80047f0 <UART_SetConfig+0x874>
      default:
        pclk = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80047ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 8251 	beq.w	8004c9a <UART_SetConfig+0xd1e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	4a33      	ldr	r2, [pc, #204]	; (80048cc <UART_SetConfig+0x950>)
 80047fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004802:	461a      	mov	r2, r3
 8004804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004806:	fbb3 f3f2 	udiv	r3, r3, r2
 800480a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	4413      	add	r3, r2
 8004816:	6a3a      	ldr	r2, [r7, #32]
 8004818:	429a      	cmp	r2, r3
 800481a:	d305      	bcc.n	8004828 <UART_SetConfig+0x8ac>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004822:	6a3a      	ldr	r2, [r7, #32]
 8004824:	429a      	cmp	r2, r3
 8004826:	d903      	bls.n	8004830 <UART_SetConfig+0x8b4>
      {
        ret = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800482e:	e234      	b.n	8004c9a <UART_SetConfig+0xd1e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004832:	4618      	mov	r0, r3
 8004834:	f04f 0100 	mov.w	r1, #0
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	4a23      	ldr	r2, [pc, #140]	; (80048cc <UART_SetConfig+0x950>)
 800483e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004842:	b29b      	uxth	r3, r3
 8004844:	f04f 0400 	mov.w	r4, #0
 8004848:	461a      	mov	r2, r3
 800484a:	4623      	mov	r3, r4
 800484c:	f7fb fd50 	bl	80002f0 <__aeabi_uldivmod>
 8004850:	4603      	mov	r3, r0
 8004852:	460c      	mov	r4, r1
 8004854:	4619      	mov	r1, r3
 8004856:	4622      	mov	r2, r4
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	f04f 0400 	mov.w	r4, #0
 8004860:	0214      	lsls	r4, r2, #8
 8004862:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004866:	020b      	lsls	r3, r1, #8
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6852      	ldr	r2, [r2, #4]
 800486c:	0852      	lsrs	r2, r2, #1
 800486e:	4611      	mov	r1, r2
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	eb13 0b01 	adds.w	fp, r3, r1
 8004878:	eb44 0c02 	adc.w	ip, r4, r2
 800487c:	4658      	mov	r0, fp
 800487e:	4661      	mov	r1, ip
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f04f 0400 	mov.w	r4, #0
 8004888:	461a      	mov	r2, r3
 800488a:	4623      	mov	r3, r4
 800488c:	f7fb fd30 	bl	80002f0 <__aeabi_uldivmod>
 8004890:	4603      	mov	r3, r0
 8004892:	460c      	mov	r4, r1
 8004894:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004898:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800489c:	d308      	bcc.n	80048b0 <UART_SetConfig+0x934>
 800489e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048a4:	d204      	bcs.n	80048b0 <UART_SetConfig+0x934>
        {
          huart->Instance->BRR = usartdiv;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048ac:	60da      	str	r2, [r3, #12]
 80048ae:	e1f4      	b.n	8004c9a <UART_SetConfig+0xd1e>
        }
        else
        {
          ret = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80048b6:	e1f0      	b.n	8004c9a <UART_SetConfig+0xd1e>
 80048b8:	40011c00 	.word	0x40011c00
 80048bc:	58024400 	.word	0x58024400
 80048c0:	58000c00 	.word	0x58000c00
 80048c4:	03d09000 	.word	0x03d09000
 80048c8:	003d0900 	.word	0x003d0900
 80048cc:	08007dbc 	.word	0x08007dbc
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048d8:	f040 80f8 	bne.w	8004acc <UART_SetConfig+0xb50>
  {
    switch (clocksource)
 80048dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048e0:	2b40      	cmp	r3, #64	; 0x40
 80048e2:	f200 80b7 	bhi.w	8004a54 <UART_SetConfig+0xad8>
 80048e6:	a201      	add	r2, pc, #4	; (adr r2, 80048ec <UART_SetConfig+0x970>)
 80048e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ec:	080049f1 	.word	0x080049f1
 80048f0:	080049f9 	.word	0x080049f9
 80048f4:	08004a55 	.word	0x08004a55
 80048f8:	08004a55 	.word	0x08004a55
 80048fc:	08004a01 	.word	0x08004a01
 8004900:	08004a55 	.word	0x08004a55
 8004904:	08004a55 	.word	0x08004a55
 8004908:	08004a55 	.word	0x08004a55
 800490c:	08004a11 	.word	0x08004a11
 8004910:	08004a55 	.word	0x08004a55
 8004914:	08004a55 	.word	0x08004a55
 8004918:	08004a55 	.word	0x08004a55
 800491c:	08004a55 	.word	0x08004a55
 8004920:	08004a55 	.word	0x08004a55
 8004924:	08004a55 	.word	0x08004a55
 8004928:	08004a55 	.word	0x08004a55
 800492c:	08004a21 	.word	0x08004a21
 8004930:	08004a55 	.word	0x08004a55
 8004934:	08004a55 	.word	0x08004a55
 8004938:	08004a55 	.word	0x08004a55
 800493c:	08004a55 	.word	0x08004a55
 8004940:	08004a55 	.word	0x08004a55
 8004944:	08004a55 	.word	0x08004a55
 8004948:	08004a55 	.word	0x08004a55
 800494c:	08004a55 	.word	0x08004a55
 8004950:	08004a55 	.word	0x08004a55
 8004954:	08004a55 	.word	0x08004a55
 8004958:	08004a55 	.word	0x08004a55
 800495c:	08004a55 	.word	0x08004a55
 8004960:	08004a55 	.word	0x08004a55
 8004964:	08004a55 	.word	0x08004a55
 8004968:	08004a55 	.word	0x08004a55
 800496c:	08004a47 	.word	0x08004a47
 8004970:	08004a55 	.word	0x08004a55
 8004974:	08004a55 	.word	0x08004a55
 8004978:	08004a55 	.word	0x08004a55
 800497c:	08004a55 	.word	0x08004a55
 8004980:	08004a55 	.word	0x08004a55
 8004984:	08004a55 	.word	0x08004a55
 8004988:	08004a55 	.word	0x08004a55
 800498c:	08004a55 	.word	0x08004a55
 8004990:	08004a55 	.word	0x08004a55
 8004994:	08004a55 	.word	0x08004a55
 8004998:	08004a55 	.word	0x08004a55
 800499c:	08004a55 	.word	0x08004a55
 80049a0:	08004a55 	.word	0x08004a55
 80049a4:	08004a55 	.word	0x08004a55
 80049a8:	08004a55 	.word	0x08004a55
 80049ac:	08004a55 	.word	0x08004a55
 80049b0:	08004a55 	.word	0x08004a55
 80049b4:	08004a55 	.word	0x08004a55
 80049b8:	08004a55 	.word	0x08004a55
 80049bc:	08004a55 	.word	0x08004a55
 80049c0:	08004a55 	.word	0x08004a55
 80049c4:	08004a55 	.word	0x08004a55
 80049c8:	08004a55 	.word	0x08004a55
 80049cc:	08004a55 	.word	0x08004a55
 80049d0:	08004a55 	.word	0x08004a55
 80049d4:	08004a55 	.word	0x08004a55
 80049d8:	08004a55 	.word	0x08004a55
 80049dc:	08004a55 	.word	0x08004a55
 80049e0:	08004a55 	.word	0x08004a55
 80049e4:	08004a55 	.word	0x08004a55
 80049e8:	08004a55 	.word	0x08004a55
 80049ec:	08004a4d 	.word	0x08004a4d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049f0:	f7fd fca8 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 80049f4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80049f6:	e033      	b.n	8004a60 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049f8:	f7fd fcba 	bl	8002370 <HAL_RCC_GetPCLK2Freq>
 80049fc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80049fe:	e02f      	b.n	8004a60 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a00:	f107 0314 	add.w	r3, r7, #20
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fe fbd5 	bl	80031b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a0e:	e027      	b.n	8004a60 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a10:	f107 0308 	add.w	r3, r7, #8
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7fe fd19 	bl	800344c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a1e:	e01f      	b.n	8004a60 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a20:	4ba8      	ldr	r3, [pc, #672]	; (8004cc4 <UART_SetConfig+0xd48>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0320 	and.w	r3, r3, #32
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d009      	beq.n	8004a40 <UART_SetConfig+0xac4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a2c:	4ba5      	ldr	r3, [pc, #660]	; (8004cc4 <UART_SetConfig+0xd48>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	08db      	lsrs	r3, r3, #3
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	4aa4      	ldr	r2, [pc, #656]	; (8004cc8 <UART_SetConfig+0xd4c>)
 8004a38:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a3e:	e00f      	b.n	8004a60 <UART_SetConfig+0xae4>
          pclk = (uint32_t) HSI_VALUE;
 8004a40:	4ba1      	ldr	r3, [pc, #644]	; (8004cc8 <UART_SetConfig+0xd4c>)
 8004a42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a44:	e00c      	b.n	8004a60 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004a46:	4ba1      	ldr	r3, [pc, #644]	; (8004ccc <UART_SetConfig+0xd50>)
 8004a48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a4a:	e009      	b.n	8004a60 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a52:	e005      	b.n	8004a60 <UART_SetConfig+0xae4>
      default:
        pclk = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004a5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 8119 	beq.w	8004c9a <UART_SetConfig+0xd1e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	4a98      	ldr	r2, [pc, #608]	; (8004cd0 <UART_SetConfig+0xd54>)
 8004a6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a72:	461a      	mov	r2, r3
 8004a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a76:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a7a:	005a      	lsls	r2, r3, #1
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	441a      	add	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a92:	2b0f      	cmp	r3, #15
 8004a94:	d916      	bls.n	8004ac4 <UART_SetConfig+0xb48>
 8004a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a9c:	d212      	bcs.n	8004ac4 <UART_SetConfig+0xb48>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	f023 030f 	bic.w	r3, r3, #15
 8004aa6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aaa:	085b      	lsrs	r3, r3, #1
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004ac0:	60da      	str	r2, [r3, #12]
 8004ac2:	e0ea      	b.n	8004c9a <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004aca:	e0e6      	b.n	8004c9a <UART_SetConfig+0xd1e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004acc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ad0:	2b40      	cmp	r3, #64	; 0x40
 8004ad2:	f200 80b7 	bhi.w	8004c44 <UART_SetConfig+0xcc8>
 8004ad6:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <UART_SetConfig+0xb60>)
 8004ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004adc:	08004be1 	.word	0x08004be1
 8004ae0:	08004be9 	.word	0x08004be9
 8004ae4:	08004c45 	.word	0x08004c45
 8004ae8:	08004c45 	.word	0x08004c45
 8004aec:	08004bf1 	.word	0x08004bf1
 8004af0:	08004c45 	.word	0x08004c45
 8004af4:	08004c45 	.word	0x08004c45
 8004af8:	08004c45 	.word	0x08004c45
 8004afc:	08004c01 	.word	0x08004c01
 8004b00:	08004c45 	.word	0x08004c45
 8004b04:	08004c45 	.word	0x08004c45
 8004b08:	08004c45 	.word	0x08004c45
 8004b0c:	08004c45 	.word	0x08004c45
 8004b10:	08004c45 	.word	0x08004c45
 8004b14:	08004c45 	.word	0x08004c45
 8004b18:	08004c45 	.word	0x08004c45
 8004b1c:	08004c11 	.word	0x08004c11
 8004b20:	08004c45 	.word	0x08004c45
 8004b24:	08004c45 	.word	0x08004c45
 8004b28:	08004c45 	.word	0x08004c45
 8004b2c:	08004c45 	.word	0x08004c45
 8004b30:	08004c45 	.word	0x08004c45
 8004b34:	08004c45 	.word	0x08004c45
 8004b38:	08004c45 	.word	0x08004c45
 8004b3c:	08004c45 	.word	0x08004c45
 8004b40:	08004c45 	.word	0x08004c45
 8004b44:	08004c45 	.word	0x08004c45
 8004b48:	08004c45 	.word	0x08004c45
 8004b4c:	08004c45 	.word	0x08004c45
 8004b50:	08004c45 	.word	0x08004c45
 8004b54:	08004c45 	.word	0x08004c45
 8004b58:	08004c45 	.word	0x08004c45
 8004b5c:	08004c37 	.word	0x08004c37
 8004b60:	08004c45 	.word	0x08004c45
 8004b64:	08004c45 	.word	0x08004c45
 8004b68:	08004c45 	.word	0x08004c45
 8004b6c:	08004c45 	.word	0x08004c45
 8004b70:	08004c45 	.word	0x08004c45
 8004b74:	08004c45 	.word	0x08004c45
 8004b78:	08004c45 	.word	0x08004c45
 8004b7c:	08004c45 	.word	0x08004c45
 8004b80:	08004c45 	.word	0x08004c45
 8004b84:	08004c45 	.word	0x08004c45
 8004b88:	08004c45 	.word	0x08004c45
 8004b8c:	08004c45 	.word	0x08004c45
 8004b90:	08004c45 	.word	0x08004c45
 8004b94:	08004c45 	.word	0x08004c45
 8004b98:	08004c45 	.word	0x08004c45
 8004b9c:	08004c45 	.word	0x08004c45
 8004ba0:	08004c45 	.word	0x08004c45
 8004ba4:	08004c45 	.word	0x08004c45
 8004ba8:	08004c45 	.word	0x08004c45
 8004bac:	08004c45 	.word	0x08004c45
 8004bb0:	08004c45 	.word	0x08004c45
 8004bb4:	08004c45 	.word	0x08004c45
 8004bb8:	08004c45 	.word	0x08004c45
 8004bbc:	08004c45 	.word	0x08004c45
 8004bc0:	08004c45 	.word	0x08004c45
 8004bc4:	08004c45 	.word	0x08004c45
 8004bc8:	08004c45 	.word	0x08004c45
 8004bcc:	08004c45 	.word	0x08004c45
 8004bd0:	08004c45 	.word	0x08004c45
 8004bd4:	08004c45 	.word	0x08004c45
 8004bd8:	08004c45 	.word	0x08004c45
 8004bdc:	08004c3d 	.word	0x08004c3d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004be0:	f7fd fbb0 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 8004be4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004be6:	e033      	b.n	8004c50 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004be8:	f7fd fbc2 	bl	8002370 <HAL_RCC_GetPCLK2Freq>
 8004bec:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004bee:	e02f      	b.n	8004c50 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bf0:	f107 0314 	add.w	r3, r7, #20
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fe fadd 	bl	80031b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004bfe:	e027      	b.n	8004c50 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c00:	f107 0308 	add.w	r3, r7, #8
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fe fc21 	bl	800344c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c0e:	e01f      	b.n	8004c50 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c10:	4b2c      	ldr	r3, [pc, #176]	; (8004cc4 <UART_SetConfig+0xd48>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0320 	and.w	r3, r3, #32
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d009      	beq.n	8004c30 <UART_SetConfig+0xcb4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004c1c:	4b29      	ldr	r3, [pc, #164]	; (8004cc4 <UART_SetConfig+0xd48>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	08db      	lsrs	r3, r3, #3
 8004c22:	f003 0303 	and.w	r3, r3, #3
 8004c26:	4a28      	ldr	r2, [pc, #160]	; (8004cc8 <UART_SetConfig+0xd4c>)
 8004c28:	fa22 f303 	lsr.w	r3, r2, r3
 8004c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c2e:	e00f      	b.n	8004c50 <UART_SetConfig+0xcd4>
          pclk = (uint32_t) HSI_VALUE;
 8004c30:	4b25      	ldr	r3, [pc, #148]	; (8004cc8 <UART_SetConfig+0xd4c>)
 8004c32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c34:	e00c      	b.n	8004c50 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c36:	4b25      	ldr	r3, [pc, #148]	; (8004ccc <UART_SetConfig+0xd50>)
 8004c38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c3a:	e009      	b.n	8004c50 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c42:	e005      	b.n	8004c50 <UART_SetConfig+0xcd4>
      default:
        pclk = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004c4e:	bf00      	nop
    }

    if (pclk != 0U)
 8004c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d021      	beq.n	8004c9a <UART_SetConfig+0xd1e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	4a1d      	ldr	r2, [pc, #116]	; (8004cd0 <UART_SetConfig+0xd54>)
 8004c5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c60:	461a      	mov	r2, r3
 8004c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c64:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	085b      	lsrs	r3, r3, #1
 8004c6e:	441a      	add	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7e:	2b0f      	cmp	r3, #15
 8004c80:	d908      	bls.n	8004c94 <UART_SetConfig+0xd18>
 8004c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c88:	d204      	bcs.n	8004c94 <UART_SetConfig+0xd18>
      {
        huart->Instance->BRR = usartdiv;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c90:	60da      	str	r2, [r3, #12]
 8004c92:	e002      	b.n	8004c9a <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004cb6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3738      	adds	r7, #56	; 0x38
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004cc4:	58024400 	.word	0x58024400
 8004cc8:	03d09000 	.word	0x03d09000
 8004ccc:	003d0900 	.word	0x003d0900
 8004cd0:	08007dbc 	.word	0x08007dbc

08004cd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d68:	f003 0310 	and.w	r3, r3, #16
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8a:	f003 0320 	and.w	r3, r3, #32
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01a      	beq.n	8004dea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dd2:	d10a      	bne.n	8004dea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	605a      	str	r2, [r3, #4]
  }
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af02      	add	r7, sp, #8
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004e28:	f7fc f83c 	bl	8000ea4 <HAL_GetTick>
 8004e2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0308 	and.w	r3, r3, #8
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d10e      	bne.n	8004e5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f82c 	bl	8004ea8 <UART_WaitOnFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e022      	b.n	8004ea0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d10e      	bne.n	8004e86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f816 	bl	8004ea8 <UART_WaitOnFlagUntilTimeout>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e00c      	b.n	8004ea0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	603b      	str	r3, [r7, #0]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb8:	e062      	b.n	8004f80 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec0:	d05e      	beq.n	8004f80 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec2:	f7fb ffef 	bl	8000ea4 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d302      	bcc.n	8004ed8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d11d      	bne.n	8004f14 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ee6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0201 	bic.w	r2, r2, #1
 8004ef6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2220      	movs	r2, #32
 8004efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e045      	b.n	8004fa0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0304 	and.w	r3, r3, #4
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d02e      	beq.n	8004f80 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f30:	d126      	bne.n	8004f80 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f3a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f4a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0201 	bic.w	r2, r2, #1
 8004f5a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e00f      	b.n	8004fa0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	69da      	ldr	r2, [r3, #28]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	bf0c      	ite	eq
 8004f90:	2301      	moveq	r3, #1
 8004f92:	2300      	movne	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	461a      	mov	r2, r3
 8004f98:	79fb      	ldrb	r3, [r7, #7]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d08d      	beq.n	8004eba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d101      	bne.n	8004fbe <HAL_UARTEx_DisableFifoMode+0x16>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	e027      	b.n	800500e <HAL_UARTEx_DisableFifoMode+0x66>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2224      	movs	r2, #36	; 0x24
 8004fca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0201 	bic.w	r2, r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004fec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b084      	sub	sp, #16
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800502e:	2302      	movs	r3, #2
 8005030:	e02d      	b.n	800508e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2224      	movs	r2, #36	; 0x24
 800503e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 0201 	bic.w	r2, r2, #1
 8005058:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f850 	bl	8005114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2220      	movs	r2, #32
 8005080:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b084      	sub	sp, #16
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d101      	bne.n	80050ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80050aa:	2302      	movs	r3, #2
 80050ac:	e02d      	b.n	800510a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2224      	movs	r2, #36	; 0x24
 80050ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0201 	bic.w	r2, r2, #1
 80050d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f812 	bl	8005114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005114:	b480      	push	{r7}
 8005116:	b089      	sub	sp, #36	; 0x24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800511c:	4a2f      	ldr	r2, [pc, #188]	; (80051dc <UARTEx_SetNbDataToProcess+0xc8>)
 800511e:	f107 0314 	add.w	r3, r7, #20
 8005122:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005126:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800512a:	4a2d      	ldr	r2, [pc, #180]	; (80051e0 <UARTEx_SetNbDataToProcess+0xcc>)
 800512c:	f107 030c 	add.w	r3, r7, #12
 8005130:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005134:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800513c:	2b00      	cmp	r3, #0
 800513e:	d108      	bne.n	8005152 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005150:	e03d      	b.n	80051ce <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005152:	2310      	movs	r3, #16
 8005154:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005156:	2310      	movs	r3, #16
 8005158:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	0e5b      	lsrs	r3, r3, #25
 8005162:	b2db      	uxtb	r3, r3
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	0f5b      	lsrs	r3, r3, #29
 8005172:	b2db      	uxtb	r3, r3
 8005174:	f003 0307 	and.w	r3, r3, #7
 8005178:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800517a:	7fbb      	ldrb	r3, [r7, #30]
 800517c:	7f3a      	ldrb	r2, [r7, #28]
 800517e:	f107 0120 	add.w	r1, r7, #32
 8005182:	440a      	add	r2, r1
 8005184:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005188:	fb02 f303 	mul.w	r3, r2, r3
 800518c:	7f3a      	ldrb	r2, [r7, #28]
 800518e:	f107 0120 	add.w	r1, r7, #32
 8005192:	440a      	add	r2, r1
 8005194:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005198:	fb93 f3f2 	sdiv	r3, r3, r2
 800519c:	b29a      	uxth	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80051a4:	7ffb      	ldrb	r3, [r7, #31]
 80051a6:	7f7a      	ldrb	r2, [r7, #29]
 80051a8:	f107 0120 	add.w	r1, r7, #32
 80051ac:	440a      	add	r2, r1
 80051ae:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80051b2:	fb02 f303 	mul.w	r3, r2, r3
 80051b6:	7f7a      	ldrb	r2, [r7, #29]
 80051b8:	f107 0120 	add.w	r1, r7, #32
 80051bc:	440a      	add	r2, r1
 80051be:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80051c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80051ce:	bf00      	nop
 80051d0:	3724      	adds	r7, #36	; 0x24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	08007d18 	.word	0x08007d18
 80051e0:	08007d20 	.word	0x08007d20

080051e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80051e8:	bf00      	nop
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
	...

080051f4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051fa:	f3ef 8305 	mrs	r3, IPSR
 80051fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8005200:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10f      	bne.n	8005226 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005206:	f3ef 8310 	mrs	r3, PRIMASK
 800520a:	607b      	str	r3, [r7, #4]
  return(result);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d105      	bne.n	800521e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005212:	f3ef 8311 	mrs	r3, BASEPRI
 8005216:	603b      	str	r3, [r7, #0]
  return(result);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d007      	beq.n	800522e <osKernelInitialize+0x3a>
 800521e:	4b0e      	ldr	r3, [pc, #56]	; (8005258 <osKernelInitialize+0x64>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b02      	cmp	r3, #2
 8005224:	d103      	bne.n	800522e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005226:	f06f 0305 	mvn.w	r3, #5
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	e00c      	b.n	8005248 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800522e:	4b0a      	ldr	r3, [pc, #40]	; (8005258 <osKernelInitialize+0x64>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d105      	bne.n	8005242 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005236:	4b08      	ldr	r3, [pc, #32]	; (8005258 <osKernelInitialize+0x64>)
 8005238:	2201      	movs	r2, #1
 800523a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800523c:	2300      	movs	r3, #0
 800523e:	60fb      	str	r3, [r7, #12]
 8005240:	e002      	b.n	8005248 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005242:	f04f 33ff 	mov.w	r3, #4294967295
 8005246:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005248:	68fb      	ldr	r3, [r7, #12]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	24000030 	.word	0x24000030

0800525c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005262:	f3ef 8305 	mrs	r3, IPSR
 8005266:	60bb      	str	r3, [r7, #8]
  return(result);
 8005268:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10f      	bne.n	800528e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800526e:	f3ef 8310 	mrs	r3, PRIMASK
 8005272:	607b      	str	r3, [r7, #4]
  return(result);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d105      	bne.n	8005286 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800527a:	f3ef 8311 	mrs	r3, BASEPRI
 800527e:	603b      	str	r3, [r7, #0]
  return(result);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d007      	beq.n	8005296 <osKernelStart+0x3a>
 8005286:	4b0f      	ldr	r3, [pc, #60]	; (80052c4 <osKernelStart+0x68>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b02      	cmp	r3, #2
 800528c:	d103      	bne.n	8005296 <osKernelStart+0x3a>
    stat = osErrorISR;
 800528e:	f06f 0305 	mvn.w	r3, #5
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	e010      	b.n	80052b8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005296:	4b0b      	ldr	r3, [pc, #44]	; (80052c4 <osKernelStart+0x68>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d109      	bne.n	80052b2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800529e:	f7ff ffa1 	bl	80051e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80052a2:	4b08      	ldr	r3, [pc, #32]	; (80052c4 <osKernelStart+0x68>)
 80052a4:	2202      	movs	r2, #2
 80052a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80052a8:	f001 f870 	bl	800638c <vTaskStartScheduler>
      stat = osOK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	e002      	b.n	80052b8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80052b2:	f04f 33ff 	mov.w	r3, #4294967295
 80052b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80052b8:	68fb      	ldr	r3, [r7, #12]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	24000030 	.word	0x24000030

080052c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b090      	sub	sp, #64	; 0x40
 80052cc:	af04      	add	r7, sp, #16
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80052d4:	2300      	movs	r3, #0
 80052d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052d8:	f3ef 8305 	mrs	r3, IPSR
 80052dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80052de:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f040 808f 	bne.w	8005404 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052e6:	f3ef 8310 	mrs	r3, PRIMASK
 80052ea:	61bb      	str	r3, [r7, #24]
  return(result);
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d105      	bne.n	80052fe <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80052f2:	f3ef 8311 	mrs	r3, BASEPRI
 80052f6:	617b      	str	r3, [r7, #20]
  return(result);
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <osThreadNew+0x3e>
 80052fe:	4b44      	ldr	r3, [pc, #272]	; (8005410 <osThreadNew+0x148>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d07e      	beq.n	8005404 <osThreadNew+0x13c>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d07b      	beq.n	8005404 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800530c:	2380      	movs	r3, #128	; 0x80
 800530e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005310:	2318      	movs	r3, #24
 8005312:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005314:	2300      	movs	r3, #0
 8005316:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005318:	f04f 33ff 	mov.w	r3, #4294967295
 800531c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d045      	beq.n	80053b0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d002      	beq.n	8005332 <osThreadNew+0x6a>
        name = attr->name;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	2b00      	cmp	r3, #0
 8005344:	d008      	beq.n	8005358 <osThreadNew+0x90>
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	2b38      	cmp	r3, #56	; 0x38
 800534a:	d805      	bhi.n	8005358 <osThreadNew+0x90>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <osThreadNew+0x94>
        return (NULL);
 8005358:	2300      	movs	r3, #0
 800535a:	e054      	b.n	8005406 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	089b      	lsrs	r3, r3, #2
 800536a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00e      	beq.n	8005392 <osThreadNew+0xca>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	2b5b      	cmp	r3, #91	; 0x5b
 800537a:	d90a      	bls.n	8005392 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005380:	2b00      	cmp	r3, #0
 8005382:	d006      	beq.n	8005392 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <osThreadNew+0xca>
        mem = 1;
 800538c:	2301      	movs	r3, #1
 800538e:	623b      	str	r3, [r7, #32]
 8005390:	e010      	b.n	80053b4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10c      	bne.n	80053b4 <osThreadNew+0xec>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d108      	bne.n	80053b4 <osThreadNew+0xec>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d104      	bne.n	80053b4 <osThreadNew+0xec>
          mem = 0;
 80053aa:	2300      	movs	r3, #0
 80053ac:	623b      	str	r3, [r7, #32]
 80053ae:	e001      	b.n	80053b4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80053b0:	2300      	movs	r3, #0
 80053b2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d110      	bne.n	80053dc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80053c2:	9202      	str	r2, [sp, #8]
 80053c4:	9301      	str	r3, [sp, #4]
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 fe09 	bl	8005fe8 <xTaskCreateStatic>
 80053d6:	4603      	mov	r3, r0
 80053d8:	613b      	str	r3, [r7, #16]
 80053da:	e013      	b.n	8005404 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d110      	bne.n	8005404 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	f107 0310 	add.w	r3, r7, #16
 80053ea:	9301      	str	r3, [sp, #4]
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 fe51 	bl	800609c <xTaskCreate>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d001      	beq.n	8005404 <osThreadNew+0x13c>
          hTask = NULL;
 8005400:	2300      	movs	r3, #0
 8005402:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005404:	693b      	ldr	r3, [r7, #16]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3730      	adds	r7, #48	; 0x30
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	24000030 	.word	0x24000030

08005414 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800541c:	f3ef 8305 	mrs	r3, IPSR
 8005420:	613b      	str	r3, [r7, #16]
  return(result);
 8005422:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10f      	bne.n	8005448 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005428:	f3ef 8310 	mrs	r3, PRIMASK
 800542c:	60fb      	str	r3, [r7, #12]
  return(result);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d105      	bne.n	8005440 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005434:	f3ef 8311 	mrs	r3, BASEPRI
 8005438:	60bb      	str	r3, [r7, #8]
  return(result);
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d007      	beq.n	8005450 <osDelay+0x3c>
 8005440:	4b0a      	ldr	r3, [pc, #40]	; (800546c <osDelay+0x58>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b02      	cmp	r3, #2
 8005446:	d103      	bne.n	8005450 <osDelay+0x3c>
    stat = osErrorISR;
 8005448:	f06f 0305 	mvn.w	r3, #5
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	e007      	b.n	8005460 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005450:	2300      	movs	r3, #0
 8005452:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <osDelay+0x4c>
      vTaskDelay(ticks);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 ff62 	bl	8006324 <vTaskDelay>
    }
  }

  return (stat);
 8005460:	697b      	ldr	r3, [r7, #20]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	24000030 	.word	0x24000030

08005470 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4a07      	ldr	r2, [pc, #28]	; (800549c <vApplicationGetIdleTaskMemory+0x2c>)
 8005480:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	4a06      	ldr	r2, [pc, #24]	; (80054a0 <vApplicationGetIdleTaskMemory+0x30>)
 8005486:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2280      	movs	r2, #128	; 0x80
 800548c:	601a      	str	r2, [r3, #0]
}
 800548e:	bf00      	nop
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	24000034 	.word	0x24000034
 80054a0:	24000090 	.word	0x24000090

080054a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4a07      	ldr	r2, [pc, #28]	; (80054d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80054b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	4a06      	ldr	r2, [pc, #24]	; (80054d4 <vApplicationGetTimerTaskMemory+0x30>)
 80054ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054c2:	601a      	str	r2, [r3, #0]
}
 80054c4:	bf00      	nop
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	24000290 	.word	0x24000290
 80054d4:	240002ec 	.word	0x240002ec

080054d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f103 0208 	add.w	r2, r3, #8
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f04f 32ff 	mov.w	r2, #4294967295
 80054f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f103 0208 	add.w	r2, r3, #8
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f103 0208 	add.w	r2, r3, #8
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005526:	bf00      	nop
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005532:	b480      	push	{r7}
 8005534:	b085      	sub	sp, #20
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
 800553a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	601a      	str	r2, [r3, #0]
}
 800556e:	bf00      	nop
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800557a:	b480      	push	{r7}
 800557c:	b085      	sub	sp, #20
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005590:	d103      	bne.n	800559a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	e00c      	b.n	80055b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	3308      	adds	r3, #8
 800559e:	60fb      	str	r3, [r7, #12]
 80055a0:	e002      	b.n	80055a8 <vListInsert+0x2e>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d2f6      	bcs.n	80055a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	601a      	str	r2, [r3, #0]
}
 80055e0:	bf00      	nop
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6892      	ldr	r2, [r2, #8]
 8005602:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6852      	ldr	r2, [r2, #4]
 800560c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	429a      	cmp	r2, r3
 8005616:	d103      	bne.n	8005620 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	1e5a      	subs	r2, r3, #1
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d109      	bne.n	8005668 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	60bb      	str	r3, [r7, #8]
 8005666:	e7fe      	b.n	8005666 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005668:	f002 f810 	bl	800768c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005674:	68f9      	ldr	r1, [r7, #12]
 8005676:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005678:	fb01 f303 	mul.w	r3, r1, r3
 800567c:	441a      	add	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005698:	3b01      	subs	r3, #1
 800569a:	68f9      	ldr	r1, [r7, #12]
 800569c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800569e:	fb01 f303 	mul.w	r3, r1, r3
 80056a2:	441a      	add	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	22ff      	movs	r2, #255	; 0xff
 80056ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	22ff      	movs	r2, #255	; 0xff
 80056b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d114      	bne.n	80056e8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d01a      	beq.n	80056fc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	3310      	adds	r3, #16
 80056ca:	4618      	mov	r0, r3
 80056cc:	f001 f8de 	bl	800688c <xTaskRemoveFromEventList>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d012      	beq.n	80056fc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80056d6:	4b0d      	ldr	r3, [pc, #52]	; (800570c <xQueueGenericReset+0xcc>)
 80056d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	e009      	b.n	80056fc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	3310      	adds	r3, #16
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7ff fef3 	bl	80054d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	3324      	adds	r3, #36	; 0x24
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7ff feee 	bl	80054d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80056fc:	f001 fff4 	bl	80076e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005700:	2301      	movs	r3, #1
}
 8005702:	4618      	mov	r0, r3
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	e000ed04 	.word	0xe000ed04

08005710 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005710:	b580      	push	{r7, lr}
 8005712:	b08e      	sub	sp, #56	; 0x38
 8005714:	af02      	add	r7, sp, #8
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
 800571c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d109      	bne.n	8005738 <xQueueGenericCreateStatic+0x28>
 8005724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005728:	f383 8811 	msr	BASEPRI, r3
 800572c:	f3bf 8f6f 	isb	sy
 8005730:	f3bf 8f4f 	dsb	sy
 8005734:	62bb      	str	r3, [r7, #40]	; 0x28
 8005736:	e7fe      	b.n	8005736 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d109      	bne.n	8005752 <xQueueGenericCreateStatic+0x42>
 800573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	627b      	str	r3, [r7, #36]	; 0x24
 8005750:	e7fe      	b.n	8005750 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d002      	beq.n	800575e <xQueueGenericCreateStatic+0x4e>
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <xQueueGenericCreateStatic+0x52>
 800575e:	2301      	movs	r3, #1
 8005760:	e000      	b.n	8005764 <xQueueGenericCreateStatic+0x54>
 8005762:	2300      	movs	r3, #0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d109      	bne.n	800577c <xQueueGenericCreateStatic+0x6c>
 8005768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	623b      	str	r3, [r7, #32]
 800577a:	e7fe      	b.n	800577a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d102      	bne.n	8005788 <xQueueGenericCreateStatic+0x78>
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <xQueueGenericCreateStatic+0x7c>
 8005788:	2301      	movs	r3, #1
 800578a:	e000      	b.n	800578e <xQueueGenericCreateStatic+0x7e>
 800578c:	2300      	movs	r3, #0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d109      	bne.n	80057a6 <xQueueGenericCreateStatic+0x96>
 8005792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	61fb      	str	r3, [r7, #28]
 80057a4:	e7fe      	b.n	80057a4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80057a6:	2350      	movs	r3, #80	; 0x50
 80057a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2b50      	cmp	r3, #80	; 0x50
 80057ae:	d009      	beq.n	80057c4 <xQueueGenericCreateStatic+0xb4>
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	61bb      	str	r3, [r7, #24]
 80057c2:	e7fe      	b.n	80057c2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80057c4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80057ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00d      	beq.n	80057ec <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80057d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80057d8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80057dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	4613      	mov	r3, r2
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	68b9      	ldr	r1, [r7, #8]
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 f805 	bl	80057f6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80057ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3730      	adds	r7, #48	; 0x30
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	607a      	str	r2, [r7, #4]
 8005802:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d103      	bne.n	8005812 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	e002      	b.n	8005818 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005824:	2101      	movs	r1, #1
 8005826:	69b8      	ldr	r0, [r7, #24]
 8005828:	f7ff ff0a 	bl	8005640 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	78fa      	ldrb	r2, [r7, #3]
 8005830:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005834:	bf00      	nop
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b08e      	sub	sp, #56	; 0x38
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
 8005848:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800584a:	2300      	movs	r3, #0
 800584c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005854:	2b00      	cmp	r3, #0
 8005856:	d109      	bne.n	800586c <xQueueGenericSend+0x30>
 8005858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	62bb      	str	r3, [r7, #40]	; 0x28
 800586a:	e7fe      	b.n	800586a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d103      	bne.n	800587a <xQueueGenericSend+0x3e>
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <xQueueGenericSend+0x42>
 800587a:	2301      	movs	r3, #1
 800587c:	e000      	b.n	8005880 <xQueueGenericSend+0x44>
 800587e:	2300      	movs	r3, #0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d109      	bne.n	8005898 <xQueueGenericSend+0x5c>
 8005884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	627b      	str	r3, [r7, #36]	; 0x24
 8005896:	e7fe      	b.n	8005896 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	2b02      	cmp	r3, #2
 800589c:	d103      	bne.n	80058a6 <xQueueGenericSend+0x6a>
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d101      	bne.n	80058aa <xQueueGenericSend+0x6e>
 80058a6:	2301      	movs	r3, #1
 80058a8:	e000      	b.n	80058ac <xQueueGenericSend+0x70>
 80058aa:	2300      	movs	r3, #0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d109      	bne.n	80058c4 <xQueueGenericSend+0x88>
 80058b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	623b      	str	r3, [r7, #32]
 80058c2:	e7fe      	b.n	80058c2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058c4:	f001 f998 	bl	8006bf8 <xTaskGetSchedulerState>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d102      	bne.n	80058d4 <xQueueGenericSend+0x98>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <xQueueGenericSend+0x9c>
 80058d4:	2301      	movs	r3, #1
 80058d6:	e000      	b.n	80058da <xQueueGenericSend+0x9e>
 80058d8:	2300      	movs	r3, #0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d109      	bne.n	80058f2 <xQueueGenericSend+0xb6>
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	61fb      	str	r3, [r7, #28]
 80058f0:	e7fe      	b.n	80058f0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058f2:	f001 fecb 	bl	800768c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fe:	429a      	cmp	r2, r3
 8005900:	d302      	bcc.n	8005908 <xQueueGenericSend+0xcc>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b02      	cmp	r3, #2
 8005906:	d129      	bne.n	800595c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	68b9      	ldr	r1, [r7, #8]
 800590c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800590e:	f000 f9ff 	bl	8005d10 <prvCopyDataToQueue>
 8005912:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	2b00      	cmp	r3, #0
 800591a:	d010      	beq.n	800593e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800591c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591e:	3324      	adds	r3, #36	; 0x24
 8005920:	4618      	mov	r0, r3
 8005922:	f000 ffb3 	bl	800688c <xTaskRemoveFromEventList>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d013      	beq.n	8005954 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800592c:	4b3f      	ldr	r3, [pc, #252]	; (8005a2c <xQueueGenericSend+0x1f0>)
 800592e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	f3bf 8f6f 	isb	sy
 800593c:	e00a      	b.n	8005954 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800593e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005940:	2b00      	cmp	r3, #0
 8005942:	d007      	beq.n	8005954 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005944:	4b39      	ldr	r3, [pc, #228]	; (8005a2c <xQueueGenericSend+0x1f0>)
 8005946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005954:	f001 fec8 	bl	80076e8 <vPortExitCritical>
				return pdPASS;
 8005958:	2301      	movs	r3, #1
 800595a:	e063      	b.n	8005a24 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d103      	bne.n	800596a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005962:	f001 fec1 	bl	80076e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005966:	2300      	movs	r3, #0
 8005968:	e05c      	b.n	8005a24 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800596a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596c:	2b00      	cmp	r3, #0
 800596e:	d106      	bne.n	800597e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005970:	f107 0314 	add.w	r3, r7, #20
 8005974:	4618      	mov	r0, r3
 8005976:	f000 ffeb 	bl	8006950 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800597a:	2301      	movs	r3, #1
 800597c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800597e:	f001 feb3 	bl	80076e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005982:	f000 fd67 	bl	8006454 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005986:	f001 fe81 	bl	800768c <vPortEnterCritical>
 800598a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005990:	b25b      	sxtb	r3, r3
 8005992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005996:	d103      	bne.n	80059a0 <xQueueGenericSend+0x164>
 8005998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599a:	2200      	movs	r2, #0
 800599c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059a6:	b25b      	sxtb	r3, r3
 80059a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ac:	d103      	bne.n	80059b6 <xQueueGenericSend+0x17a>
 80059ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059b6:	f001 fe97 	bl	80076e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059ba:	1d3a      	adds	r2, r7, #4
 80059bc:	f107 0314 	add.w	r3, r7, #20
 80059c0:	4611      	mov	r1, r2
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 ffda 	bl	800697c <xTaskCheckForTimeOut>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d124      	bne.n	8005a18 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80059ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059d0:	f000 fa96 	bl	8005f00 <prvIsQueueFull>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d018      	beq.n	8005a0c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	3310      	adds	r3, #16
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	4611      	mov	r1, r2
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 ff04 	bl	80067f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80059e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059ea:	f000 fa21 	bl	8005e30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80059ee:	f000 fd3f 	bl	8006470 <xTaskResumeAll>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f47f af7c 	bne.w	80058f2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80059fa:	4b0c      	ldr	r3, [pc, #48]	; (8005a2c <xQueueGenericSend+0x1f0>)
 80059fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	e772      	b.n	80058f2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a0e:	f000 fa0f 	bl	8005e30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a12:	f000 fd2d 	bl	8006470 <xTaskResumeAll>
 8005a16:	e76c      	b.n	80058f2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a1a:	f000 fa09 	bl	8005e30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a1e:	f000 fd27 	bl	8006470 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3738      	adds	r7, #56	; 0x38
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	e000ed04 	.word	0xe000ed04

08005a30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08e      	sub	sp, #56	; 0x38
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
 8005a3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d109      	bne.n	8005a5c <xQueueGenericSendFromISR+0x2c>
 8005a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4c:	f383 8811 	msr	BASEPRI, r3
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	627b      	str	r3, [r7, #36]	; 0x24
 8005a5a:	e7fe      	b.n	8005a5a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d103      	bne.n	8005a6a <xQueueGenericSendFromISR+0x3a>
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <xQueueGenericSendFromISR+0x3e>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e000      	b.n	8005a70 <xQueueGenericSendFromISR+0x40>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d109      	bne.n	8005a88 <xQueueGenericSendFromISR+0x58>
 8005a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a78:	f383 8811 	msr	BASEPRI, r3
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	623b      	str	r3, [r7, #32]
 8005a86:	e7fe      	b.n	8005a86 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d103      	bne.n	8005a96 <xQueueGenericSendFromISR+0x66>
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d101      	bne.n	8005a9a <xQueueGenericSendFromISR+0x6a>
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <xQueueGenericSendFromISR+0x6c>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d109      	bne.n	8005ab4 <xQueueGenericSendFromISR+0x84>
 8005aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa4:	f383 8811 	msr	BASEPRI, r3
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	61fb      	str	r3, [r7, #28]
 8005ab2:	e7fe      	b.n	8005ab2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ab4:	f001 fec6 	bl	8007844 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005ab8:	f3ef 8211 	mrs	r2, BASEPRI
 8005abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac0:	f383 8811 	msr	BASEPRI, r3
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	61ba      	str	r2, [r7, #24]
 8005ace:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ad0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d302      	bcc.n	8005ae6 <xQueueGenericSendFromISR+0xb6>
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d12c      	bne.n	8005b40 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005aec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	68b9      	ldr	r1, [r7, #8]
 8005af4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005af6:	f000 f90b 	bl	8005d10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005afa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b02:	d112      	bne.n	8005b2a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d016      	beq.n	8005b3a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0e:	3324      	adds	r3, #36	; 0x24
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 febb 	bl	800688c <xTaskRemoveFromEventList>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00e      	beq.n	8005b3a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00b      	beq.n	8005b3a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	e007      	b.n	8005b3a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b2e:	3301      	adds	r3, #1
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	b25a      	sxtb	r2, r3
 8005b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005b3e:	e001      	b.n	8005b44 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b40:	2300      	movs	r3, #0
 8005b42:	637b      	str	r3, [r7, #52]	; 0x34
 8005b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b46:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3738      	adds	r7, #56	; 0x38
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b08c      	sub	sp, #48	; 0x30
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b64:	2300      	movs	r3, #0
 8005b66:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d109      	bne.n	8005b86 <xQueueReceive+0x2e>
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	623b      	str	r3, [r7, #32]
 8005b84:	e7fe      	b.n	8005b84 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d103      	bne.n	8005b94 <xQueueReceive+0x3c>
 8005b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <xQueueReceive+0x40>
 8005b94:	2301      	movs	r3, #1
 8005b96:	e000      	b.n	8005b9a <xQueueReceive+0x42>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d109      	bne.n	8005bb2 <xQueueReceive+0x5a>
 8005b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	61fb      	str	r3, [r7, #28]
 8005bb0:	e7fe      	b.n	8005bb0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bb2:	f001 f821 	bl	8006bf8 <xTaskGetSchedulerState>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d102      	bne.n	8005bc2 <xQueueReceive+0x6a>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <xQueueReceive+0x6e>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <xQueueReceive+0x70>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d109      	bne.n	8005be0 <xQueueReceive+0x88>
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	61bb      	str	r3, [r7, #24]
 8005bde:	e7fe      	b.n	8005bde <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005be0:	f001 fd54 	bl	800768c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d01f      	beq.n	8005c30 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005bf0:	68b9      	ldr	r1, [r7, #8]
 8005bf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bf4:	f000 f8f6 	bl	8005de4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	1e5a      	subs	r2, r3, #1
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00f      	beq.n	8005c28 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0a:	3310      	adds	r3, #16
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 fe3d 	bl	800688c <xTaskRemoveFromEventList>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d007      	beq.n	8005c28 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c18:	4b3c      	ldr	r3, [pc, #240]	; (8005d0c <xQueueReceive+0x1b4>)
 8005c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c28:	f001 fd5e 	bl	80076e8 <vPortExitCritical>
				return pdPASS;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e069      	b.n	8005d04 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d103      	bne.n	8005c3e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c36:	f001 fd57 	bl	80076e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	e062      	b.n	8005d04 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d106      	bne.n	8005c52 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c44:	f107 0310 	add.w	r3, r7, #16
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 fe81 	bl	8006950 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c52:	f001 fd49 	bl	80076e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c56:	f000 fbfd 	bl	8006454 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c5a:	f001 fd17 	bl	800768c <vPortEnterCritical>
 8005c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c64:	b25b      	sxtb	r3, r3
 8005c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6a:	d103      	bne.n	8005c74 <xQueueReceive+0x11c>
 8005c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c7a:	b25b      	sxtb	r3, r3
 8005c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c80:	d103      	bne.n	8005c8a <xQueueReceive+0x132>
 8005c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c8a:	f001 fd2d 	bl	80076e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c8e:	1d3a      	adds	r2, r7, #4
 8005c90:	f107 0310 	add.w	r3, r7, #16
 8005c94:	4611      	mov	r1, r2
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 fe70 	bl	800697c <xTaskCheckForTimeOut>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d123      	bne.n	8005cea <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ca4:	f000 f916 	bl	8005ed4 <prvIsQueueEmpty>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d017      	beq.n	8005cde <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb0:	3324      	adds	r3, #36	; 0x24
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 fd9a 	bl	80067f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cbe:	f000 f8b7 	bl	8005e30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005cc2:	f000 fbd5 	bl	8006470 <xTaskResumeAll>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d189      	bne.n	8005be0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005ccc:	4b0f      	ldr	r3, [pc, #60]	; (8005d0c <xQueueReceive+0x1b4>)
 8005cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	e780      	b.n	8005be0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ce0:	f000 f8a6 	bl	8005e30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ce4:	f000 fbc4 	bl	8006470 <xTaskResumeAll>
 8005ce8:	e77a      	b.n	8005be0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cec:	f000 f8a0 	bl	8005e30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cf0:	f000 fbbe 	bl	8006470 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cf6:	f000 f8ed 	bl	8005ed4 <prvIsQueueEmpty>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f43f af6f 	beq.w	8005be0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d02:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3730      	adds	r7, #48	; 0x30
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	e000ed04 	.word	0xe000ed04

08005d10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10d      	bne.n	8005d4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d14d      	bne.n	8005dd2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 ff7a 	bl	8006c34 <xTaskPriorityDisinherit>
 8005d40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	609a      	str	r2, [r3, #8]
 8005d48:	e043      	b.n	8005dd2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d119      	bne.n	8005d84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6858      	ldr	r0, [r3, #4]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d58:	461a      	mov	r2, r3
 8005d5a:	68b9      	ldr	r1, [r7, #8]
 8005d5c:	f001 ffaa 	bl	8007cb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d68:	441a      	add	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d32b      	bcc.n	8005dd2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	605a      	str	r2, [r3, #4]
 8005d82:	e026      	b.n	8005dd2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	68d8      	ldr	r0, [r3, #12]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	68b9      	ldr	r1, [r7, #8]
 8005d90:	f001 ff90 	bl	8007cb4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	425b      	negs	r3, r3
 8005d9e:	441a      	add	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	68da      	ldr	r2, [r3, #12]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d207      	bcs.n	8005dc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db8:	425b      	negs	r3, r3
 8005dba:	441a      	add	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d105      	bne.n	8005dd2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	1c5a      	adds	r2, r3, #1
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005dda:	697b      	ldr	r3, [r7, #20]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d018      	beq.n	8005e28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68da      	ldr	r2, [r3, #12]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	441a      	add	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68da      	ldr	r2, [r3, #12]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d303      	bcc.n	8005e18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68d9      	ldr	r1, [r3, #12]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e20:	461a      	mov	r2, r3
 8005e22:	6838      	ldr	r0, [r7, #0]
 8005e24:	f001 ff46 	bl	8007cb4 <memcpy>
	}
}
 8005e28:	bf00      	nop
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005e38:	f001 fc28 	bl	800768c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e44:	e011      	b.n	8005e6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d012      	beq.n	8005e74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	3324      	adds	r3, #36	; 0x24
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 fd1a 	bl	800688c <xTaskRemoveFromEventList>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005e5e:	f000 fded 	bl	8006a3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
 8005e64:	3b01      	subs	r3, #1
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	dce9      	bgt.n	8005e46 <prvUnlockQueue+0x16>
 8005e72:	e000      	b.n	8005e76 <prvUnlockQueue+0x46>
					break;
 8005e74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	22ff      	movs	r2, #255	; 0xff
 8005e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005e7e:	f001 fc33 	bl	80076e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005e82:	f001 fc03 	bl	800768c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e8e:	e011      	b.n	8005eb4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d012      	beq.n	8005ebe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3310      	adds	r3, #16
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 fcf5 	bl	800688c <xTaskRemoveFromEventList>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ea8:	f000 fdc8 	bl	8006a3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005eac:	7bbb      	ldrb	r3, [r7, #14]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005eb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	dce9      	bgt.n	8005e90 <prvUnlockQueue+0x60>
 8005ebc:	e000      	b.n	8005ec0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ebe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	22ff      	movs	r2, #255	; 0xff
 8005ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005ec8:	f001 fc0e 	bl	80076e8 <vPortExitCritical>
}
 8005ecc:	bf00      	nop
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005edc:	f001 fbd6 	bl	800768c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d102      	bne.n	8005eee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	e001      	b.n	8005ef2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ef2:	f001 fbf9 	bl	80076e8 <vPortExitCritical>

	return xReturn;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f08:	f001 fbc0 	bl	800768c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d102      	bne.n	8005f1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	e001      	b.n	8005f22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f22:	f001 fbe1 	bl	80076e8 <vPortExitCritical>

	return xReturn;
 8005f26:	68fb      	ldr	r3, [r7, #12]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60fb      	str	r3, [r7, #12]
 8005f3e:	e014      	b.n	8005f6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005f40:	4a0e      	ldr	r2, [pc, #56]	; (8005f7c <vQueueAddToRegistry+0x4c>)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10b      	bne.n	8005f64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005f4c:	490b      	ldr	r1, [pc, #44]	; (8005f7c <vQueueAddToRegistry+0x4c>)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005f56:	4a09      	ldr	r2, [pc, #36]	; (8005f7c <vQueueAddToRegistry+0x4c>)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	00db      	lsls	r3, r3, #3
 8005f5c:	4413      	add	r3, r2
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005f62:	e005      	b.n	8005f70 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	3301      	adds	r3, #1
 8005f68:	60fb      	str	r3, [r7, #12]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2b07      	cmp	r3, #7
 8005f6e:	d9e7      	bls.n	8005f40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005f70:	bf00      	nop
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	24004a20 	.word	0x24004a20

08005f80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005f90:	f001 fb7c 	bl	800768c <vPortEnterCritical>
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f9a:	b25b      	sxtb	r3, r3
 8005f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa0:	d103      	bne.n	8005faa <vQueueWaitForMessageRestricted+0x2a>
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fb0:	b25b      	sxtb	r3, r3
 8005fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb6:	d103      	bne.n	8005fc0 <vQueueWaitForMessageRestricted+0x40>
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fc0:	f001 fb92 	bl	80076e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d106      	bne.n	8005fda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	3324      	adds	r3, #36	; 0x24
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	68b9      	ldr	r1, [r7, #8]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 fc2f 	bl	8006838 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005fda:	6978      	ldr	r0, [r7, #20]
 8005fdc:	f7ff ff28 	bl	8005e30 <prvUnlockQueue>
	}
 8005fe0:	bf00      	nop
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b08e      	sub	sp, #56	; 0x38
 8005fec:	af04      	add	r7, sp, #16
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
 8005ff4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d109      	bne.n	8006010 <xTaskCreateStatic+0x28>
 8005ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	623b      	str	r3, [r7, #32]
 800600e:	e7fe      	b.n	800600e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006012:	2b00      	cmp	r3, #0
 8006014:	d109      	bne.n	800602a <xTaskCreateStatic+0x42>
 8006016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601a:	f383 8811 	msr	BASEPRI, r3
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	61fb      	str	r3, [r7, #28]
 8006028:	e7fe      	b.n	8006028 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800602a:	235c      	movs	r3, #92	; 0x5c
 800602c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	2b5c      	cmp	r3, #92	; 0x5c
 8006032:	d009      	beq.n	8006048 <xTaskCreateStatic+0x60>
 8006034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	61bb      	str	r3, [r7, #24]
 8006046:	e7fe      	b.n	8006046 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006048:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800604a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604c:	2b00      	cmp	r3, #0
 800604e:	d01e      	beq.n	800608e <xTaskCreateStatic+0xa6>
 8006050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006052:	2b00      	cmp	r3, #0
 8006054:	d01b      	beq.n	800608e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006058:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800605e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	2202      	movs	r2, #2
 8006064:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006068:	2300      	movs	r3, #0
 800606a:	9303      	str	r3, [sp, #12]
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	9302      	str	r3, [sp, #8]
 8006070:	f107 0314 	add.w	r3, r7, #20
 8006074:	9301      	str	r3, [sp, #4]
 8006076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	68b9      	ldr	r1, [r7, #8]
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 f850 	bl	8006126 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006086:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006088:	f000 f8dc 	bl	8006244 <prvAddNewTaskToReadyList>
 800608c:	e001      	b.n	8006092 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800608e:	2300      	movs	r3, #0
 8006090:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006092:	697b      	ldr	r3, [r7, #20]
	}
 8006094:	4618      	mov	r0, r3
 8006096:	3728      	adds	r7, #40	; 0x28
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800609c:	b580      	push	{r7, lr}
 800609e:	b08c      	sub	sp, #48	; 0x30
 80060a0:	af04      	add	r7, sp, #16
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	603b      	str	r3, [r7, #0]
 80060a8:	4613      	mov	r3, r2
 80060aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80060ac:	88fb      	ldrh	r3, [r7, #6]
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4618      	mov	r0, r3
 80060b2:	f001 fc05 	bl	80078c0 <pvPortMalloc>
 80060b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00e      	beq.n	80060dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80060be:	205c      	movs	r0, #92	; 0x5c
 80060c0:	f001 fbfe 	bl	80078c0 <pvPortMalloc>
 80060c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	631a      	str	r2, [r3, #48]	; 0x30
 80060d2:	e005      	b.n	80060e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80060d4:	6978      	ldr	r0, [r7, #20]
 80060d6:	f001 fcb5 	bl	8007a44 <vPortFree>
 80060da:	e001      	b.n	80060e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80060dc:	2300      	movs	r3, #0
 80060de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d017      	beq.n	8006116 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060ee:	88fa      	ldrh	r2, [r7, #6]
 80060f0:	2300      	movs	r3, #0
 80060f2:	9303      	str	r3, [sp, #12]
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	9302      	str	r3, [sp, #8]
 80060f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fa:	9301      	str	r3, [sp, #4]
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	68b9      	ldr	r1, [r7, #8]
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f000 f80e 	bl	8006126 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800610a:	69f8      	ldr	r0, [r7, #28]
 800610c:	f000 f89a 	bl	8006244 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006110:	2301      	movs	r3, #1
 8006112:	61bb      	str	r3, [r7, #24]
 8006114:	e002      	b.n	800611c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006116:	f04f 33ff 	mov.w	r3, #4294967295
 800611a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800611c:	69bb      	ldr	r3, [r7, #24]
	}
 800611e:	4618      	mov	r0, r3
 8006120:	3720      	adds	r7, #32
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b088      	sub	sp, #32
 800612a:	af00      	add	r7, sp, #0
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	607a      	str	r2, [r7, #4]
 8006132:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006136:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	461a      	mov	r2, r3
 800613e:	21a5      	movs	r1, #165	; 0xa5
 8006140:	f001 fdc3 	bl	8007cca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006148:	6879      	ldr	r1, [r7, #4]
 800614a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800614e:	440b      	add	r3, r1
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	f023 0307 	bic.w	r3, r3, #7
 800615c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	f003 0307 	and.w	r3, r3, #7
 8006164:	2b00      	cmp	r3, #0
 8006166:	d009      	beq.n	800617c <prvInitialiseNewTask+0x56>
 8006168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	617b      	str	r3, [r7, #20]
 800617a:	e7fe      	b.n	800617a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d01f      	beq.n	80061c2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006182:	2300      	movs	r3, #0
 8006184:	61fb      	str	r3, [r7, #28]
 8006186:	e012      	b.n	80061ae <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	4413      	add	r3, r2
 800618e:	7819      	ldrb	r1, [r3, #0]
 8006190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	4413      	add	r3, r2
 8006196:	3334      	adds	r3, #52	; 0x34
 8006198:	460a      	mov	r2, r1
 800619a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	4413      	add	r3, r2
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d006      	beq.n	80061b6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	3301      	adds	r3, #1
 80061ac:	61fb      	str	r3, [r7, #28]
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	2b0f      	cmp	r3, #15
 80061b2:	d9e9      	bls.n	8006188 <prvInitialiseNewTask+0x62>
 80061b4:	e000      	b.n	80061b8 <prvInitialiseNewTask+0x92>
			{
				break;
 80061b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80061b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061c0:	e003      	b.n	80061ca <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80061c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80061ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061cc:	2b37      	cmp	r3, #55	; 0x37
 80061ce:	d901      	bls.n	80061d4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80061d0:	2337      	movs	r3, #55	; 0x37
 80061d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80061d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80061da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80061e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e2:	2200      	movs	r2, #0
 80061e4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e8:	3304      	adds	r3, #4
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7ff f994 	bl	8005518 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f2:	3318      	adds	r3, #24
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7ff f98f 	bl	8005518 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006202:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800620a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800620e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006212:	2200      	movs	r2, #0
 8006214:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800621e:	683a      	ldr	r2, [r7, #0]
 8006220:	68f9      	ldr	r1, [r7, #12]
 8006222:	69b8      	ldr	r0, [r7, #24]
 8006224:	f001 f90c 	bl	8007440 <pxPortInitialiseStack>
 8006228:	4602      	mov	r2, r0
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800622e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006230:	2b00      	cmp	r3, #0
 8006232:	d002      	beq.n	800623a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006238:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800623a:	bf00      	nop
 800623c:	3720      	adds	r7, #32
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
	...

08006244 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800624c:	f001 fa1e 	bl	800768c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006250:	4b2d      	ldr	r3, [pc, #180]	; (8006308 <prvAddNewTaskToReadyList+0xc4>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3301      	adds	r3, #1
 8006256:	4a2c      	ldr	r2, [pc, #176]	; (8006308 <prvAddNewTaskToReadyList+0xc4>)
 8006258:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800625a:	4b2c      	ldr	r3, [pc, #176]	; (800630c <prvAddNewTaskToReadyList+0xc8>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d109      	bne.n	8006276 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006262:	4a2a      	ldr	r2, [pc, #168]	; (800630c <prvAddNewTaskToReadyList+0xc8>)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006268:	4b27      	ldr	r3, [pc, #156]	; (8006308 <prvAddNewTaskToReadyList+0xc4>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d110      	bne.n	8006292 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006270:	f000 fc08 	bl	8006a84 <prvInitialiseTaskLists>
 8006274:	e00d      	b.n	8006292 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006276:	4b26      	ldr	r3, [pc, #152]	; (8006310 <prvAddNewTaskToReadyList+0xcc>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d109      	bne.n	8006292 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800627e:	4b23      	ldr	r3, [pc, #140]	; (800630c <prvAddNewTaskToReadyList+0xc8>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006288:	429a      	cmp	r2, r3
 800628a:	d802      	bhi.n	8006292 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800628c:	4a1f      	ldr	r2, [pc, #124]	; (800630c <prvAddNewTaskToReadyList+0xc8>)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006292:	4b20      	ldr	r3, [pc, #128]	; (8006314 <prvAddNewTaskToReadyList+0xd0>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	3301      	adds	r3, #1
 8006298:	4a1e      	ldr	r2, [pc, #120]	; (8006314 <prvAddNewTaskToReadyList+0xd0>)
 800629a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800629c:	4b1d      	ldr	r3, [pc, #116]	; (8006314 <prvAddNewTaskToReadyList+0xd0>)
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a8:	4b1b      	ldr	r3, [pc, #108]	; (8006318 <prvAddNewTaskToReadyList+0xd4>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d903      	bls.n	80062b8 <prvAddNewTaskToReadyList+0x74>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b4:	4a18      	ldr	r2, [pc, #96]	; (8006318 <prvAddNewTaskToReadyList+0xd4>)
 80062b6:	6013      	str	r3, [r2, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062bc:	4613      	mov	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4a15      	ldr	r2, [pc, #84]	; (800631c <prvAddNewTaskToReadyList+0xd8>)
 80062c6:	441a      	add	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	3304      	adds	r3, #4
 80062cc:	4619      	mov	r1, r3
 80062ce:	4610      	mov	r0, r2
 80062d0:	f7ff f92f 	bl	8005532 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80062d4:	f001 fa08 	bl	80076e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80062d8:	4b0d      	ldr	r3, [pc, #52]	; (8006310 <prvAddNewTaskToReadyList+0xcc>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00e      	beq.n	80062fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062e0:	4b0a      	ldr	r3, [pc, #40]	; (800630c <prvAddNewTaskToReadyList+0xc8>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d207      	bcs.n	80062fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80062ee:	4b0c      	ldr	r3, [pc, #48]	; (8006320 <prvAddNewTaskToReadyList+0xdc>)
 80062f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f4:	601a      	str	r2, [r3, #0]
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062fe:	bf00      	nop
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	24000bc0 	.word	0x24000bc0
 800630c:	240006ec 	.word	0x240006ec
 8006310:	24000bcc 	.word	0x24000bcc
 8006314:	24000bdc 	.word	0x24000bdc
 8006318:	24000bc8 	.word	0x24000bc8
 800631c:	240006f0 	.word	0x240006f0
 8006320:	e000ed04 	.word	0xe000ed04

08006324 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800632c:	2300      	movs	r3, #0
 800632e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d016      	beq.n	8006364 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006336:	4b13      	ldr	r3, [pc, #76]	; (8006384 <vTaskDelay+0x60>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d009      	beq.n	8006352 <vTaskDelay+0x2e>
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	60bb      	str	r3, [r7, #8]
 8006350:	e7fe      	b.n	8006350 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006352:	f000 f87f 	bl	8006454 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006356:	2100      	movs	r1, #0
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 fcd7 	bl	8006d0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800635e:	f000 f887 	bl	8006470 <xTaskResumeAll>
 8006362:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d107      	bne.n	800637a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800636a:	4b07      	ldr	r3, [pc, #28]	; (8006388 <vTaskDelay+0x64>)
 800636c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800637a:	bf00      	nop
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	24000be8 	.word	0x24000be8
 8006388:	e000ed04 	.word	0xe000ed04

0800638c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08a      	sub	sp, #40	; 0x28
 8006390:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006392:	2300      	movs	r3, #0
 8006394:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006396:	2300      	movs	r3, #0
 8006398:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800639a:	463a      	mov	r2, r7
 800639c:	1d39      	adds	r1, r7, #4
 800639e:	f107 0308 	add.w	r3, r7, #8
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7ff f864 	bl	8005470 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80063a8:	6839      	ldr	r1, [r7, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	9202      	str	r2, [sp, #8]
 80063b0:	9301      	str	r3, [sp, #4]
 80063b2:	2300      	movs	r3, #0
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	2300      	movs	r3, #0
 80063b8:	460a      	mov	r2, r1
 80063ba:	4920      	ldr	r1, [pc, #128]	; (800643c <vTaskStartScheduler+0xb0>)
 80063bc:	4820      	ldr	r0, [pc, #128]	; (8006440 <vTaskStartScheduler+0xb4>)
 80063be:	f7ff fe13 	bl	8005fe8 <xTaskCreateStatic>
 80063c2:	4602      	mov	r2, r0
 80063c4:	4b1f      	ldr	r3, [pc, #124]	; (8006444 <vTaskStartScheduler+0xb8>)
 80063c6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80063c8:	4b1e      	ldr	r3, [pc, #120]	; (8006444 <vTaskStartScheduler+0xb8>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d002      	beq.n	80063d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80063d0:	2301      	movs	r3, #1
 80063d2:	617b      	str	r3, [r7, #20]
 80063d4:	e001      	b.n	80063da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80063d6:	2300      	movs	r3, #0
 80063d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d102      	bne.n	80063e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80063e0:	f000 fce8 	bl	8006db4 <xTimerCreateTimerTask>
 80063e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d115      	bne.n	8006418 <vTaskStartScheduler+0x8c>
 80063ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80063fe:	4b12      	ldr	r3, [pc, #72]	; (8006448 <vTaskStartScheduler+0xbc>)
 8006400:	f04f 32ff 	mov.w	r2, #4294967295
 8006404:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006406:	4b11      	ldr	r3, [pc, #68]	; (800644c <vTaskStartScheduler+0xc0>)
 8006408:	2201      	movs	r2, #1
 800640a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800640c:	4b10      	ldr	r3, [pc, #64]	; (8006450 <vTaskStartScheduler+0xc4>)
 800640e:	2200      	movs	r2, #0
 8006410:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006412:	f001 f89d 	bl	8007550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006416:	e00d      	b.n	8006434 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641e:	d109      	bne.n	8006434 <vTaskStartScheduler+0xa8>
 8006420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	e7fe      	b.n	8006432 <vTaskStartScheduler+0xa6>
}
 8006434:	bf00      	nop
 8006436:	3718      	adds	r7, #24
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	08007d28 	.word	0x08007d28
 8006440:	08006a55 	.word	0x08006a55
 8006444:	24000be4 	.word	0x24000be4
 8006448:	24000be0 	.word	0x24000be0
 800644c:	24000bcc 	.word	0x24000bcc
 8006450:	24000bc4 	.word	0x24000bc4

08006454 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006454:	b480      	push	{r7}
 8006456:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006458:	4b04      	ldr	r3, [pc, #16]	; (800646c <vTaskSuspendAll+0x18>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	3301      	adds	r3, #1
 800645e:	4a03      	ldr	r2, [pc, #12]	; (800646c <vTaskSuspendAll+0x18>)
 8006460:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006462:	bf00      	nop
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	24000be8 	.word	0x24000be8

08006470 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006476:	2300      	movs	r3, #0
 8006478:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800647a:	2300      	movs	r3, #0
 800647c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800647e:	4b41      	ldr	r3, [pc, #260]	; (8006584 <xTaskResumeAll+0x114>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d109      	bne.n	800649a <xTaskResumeAll+0x2a>
 8006486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	603b      	str	r3, [r7, #0]
 8006498:	e7fe      	b.n	8006498 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800649a:	f001 f8f7 	bl	800768c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800649e:	4b39      	ldr	r3, [pc, #228]	; (8006584 <xTaskResumeAll+0x114>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	4a37      	ldr	r2, [pc, #220]	; (8006584 <xTaskResumeAll+0x114>)
 80064a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064a8:	4b36      	ldr	r3, [pc, #216]	; (8006584 <xTaskResumeAll+0x114>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d162      	bne.n	8006576 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80064b0:	4b35      	ldr	r3, [pc, #212]	; (8006588 <xTaskResumeAll+0x118>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d05e      	beq.n	8006576 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064b8:	e02f      	b.n	800651a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064ba:	4b34      	ldr	r3, [pc, #208]	; (800658c <xTaskResumeAll+0x11c>)
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	3318      	adds	r3, #24
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7ff f890 	bl	80055ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	3304      	adds	r3, #4
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7ff f88b 	bl	80055ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064da:	4b2d      	ldr	r3, [pc, #180]	; (8006590 <xTaskResumeAll+0x120>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d903      	bls.n	80064ea <xTaskResumeAll+0x7a>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e6:	4a2a      	ldr	r2, [pc, #168]	; (8006590 <xTaskResumeAll+0x120>)
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ee:	4613      	mov	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4a27      	ldr	r2, [pc, #156]	; (8006594 <xTaskResumeAll+0x124>)
 80064f8:	441a      	add	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	3304      	adds	r3, #4
 80064fe:	4619      	mov	r1, r3
 8006500:	4610      	mov	r0, r2
 8006502:	f7ff f816 	bl	8005532 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800650a:	4b23      	ldr	r3, [pc, #140]	; (8006598 <xTaskResumeAll+0x128>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006510:	429a      	cmp	r2, r3
 8006512:	d302      	bcc.n	800651a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006514:	4b21      	ldr	r3, [pc, #132]	; (800659c <xTaskResumeAll+0x12c>)
 8006516:	2201      	movs	r2, #1
 8006518:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800651a:	4b1c      	ldr	r3, [pc, #112]	; (800658c <xTaskResumeAll+0x11c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1cb      	bne.n	80064ba <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006528:	f000 fb46 	bl	8006bb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800652c:	4b1c      	ldr	r3, [pc, #112]	; (80065a0 <xTaskResumeAll+0x130>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d010      	beq.n	800655a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006538:	f000 f846 	bl	80065c8 <xTaskIncrementTick>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d002      	beq.n	8006548 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006542:	4b16      	ldr	r3, [pc, #88]	; (800659c <xTaskResumeAll+0x12c>)
 8006544:	2201      	movs	r2, #1
 8006546:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	3b01      	subs	r3, #1
 800654c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1f1      	bne.n	8006538 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006554:	4b12      	ldr	r3, [pc, #72]	; (80065a0 <xTaskResumeAll+0x130>)
 8006556:	2200      	movs	r2, #0
 8006558:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800655a:	4b10      	ldr	r3, [pc, #64]	; (800659c <xTaskResumeAll+0x12c>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d009      	beq.n	8006576 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006562:	2301      	movs	r3, #1
 8006564:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006566:	4b0f      	ldr	r3, [pc, #60]	; (80065a4 <xTaskResumeAll+0x134>)
 8006568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800656c:	601a      	str	r2, [r3, #0]
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006576:	f001 f8b7 	bl	80076e8 <vPortExitCritical>

	return xAlreadyYielded;
 800657a:	68bb      	ldr	r3, [r7, #8]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	24000be8 	.word	0x24000be8
 8006588:	24000bc0 	.word	0x24000bc0
 800658c:	24000b80 	.word	0x24000b80
 8006590:	24000bc8 	.word	0x24000bc8
 8006594:	240006f0 	.word	0x240006f0
 8006598:	240006ec 	.word	0x240006ec
 800659c:	24000bd4 	.word	0x24000bd4
 80065a0:	24000bd0 	.word	0x24000bd0
 80065a4:	e000ed04 	.word	0xe000ed04

080065a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80065ae:	4b05      	ldr	r3, [pc, #20]	; (80065c4 <xTaskGetTickCount+0x1c>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80065b4:	687b      	ldr	r3, [r7, #4]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	24000bc4 	.word	0x24000bc4

080065c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065ce:	2300      	movs	r3, #0
 80065d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065d2:	4b4e      	ldr	r3, [pc, #312]	; (800670c <xTaskIncrementTick+0x144>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f040 8088 	bne.w	80066ec <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065dc:	4b4c      	ldr	r3, [pc, #304]	; (8006710 <xTaskIncrementTick+0x148>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	3301      	adds	r3, #1
 80065e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065e4:	4a4a      	ldr	r2, [pc, #296]	; (8006710 <xTaskIncrementTick+0x148>)
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d11f      	bne.n	8006630 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80065f0:	4b48      	ldr	r3, [pc, #288]	; (8006714 <xTaskIncrementTick+0x14c>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d009      	beq.n	800660e <xTaskIncrementTick+0x46>
 80065fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	603b      	str	r3, [r7, #0]
 800660c:	e7fe      	b.n	800660c <xTaskIncrementTick+0x44>
 800660e:	4b41      	ldr	r3, [pc, #260]	; (8006714 <xTaskIncrementTick+0x14c>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	4b40      	ldr	r3, [pc, #256]	; (8006718 <xTaskIncrementTick+0x150>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a3e      	ldr	r2, [pc, #248]	; (8006714 <xTaskIncrementTick+0x14c>)
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	4a3e      	ldr	r2, [pc, #248]	; (8006718 <xTaskIncrementTick+0x150>)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6013      	str	r3, [r2, #0]
 8006622:	4b3e      	ldr	r3, [pc, #248]	; (800671c <xTaskIncrementTick+0x154>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3301      	adds	r3, #1
 8006628:	4a3c      	ldr	r2, [pc, #240]	; (800671c <xTaskIncrementTick+0x154>)
 800662a:	6013      	str	r3, [r2, #0]
 800662c:	f000 fac4 	bl	8006bb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006630:	4b3b      	ldr	r3, [pc, #236]	; (8006720 <xTaskIncrementTick+0x158>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	429a      	cmp	r2, r3
 8006638:	d349      	bcc.n	80066ce <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800663a:	4b36      	ldr	r3, [pc, #216]	; (8006714 <xTaskIncrementTick+0x14c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d104      	bne.n	800664e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006644:	4b36      	ldr	r3, [pc, #216]	; (8006720 <xTaskIncrementTick+0x158>)
 8006646:	f04f 32ff 	mov.w	r2, #4294967295
 800664a:	601a      	str	r2, [r3, #0]
					break;
 800664c:	e03f      	b.n	80066ce <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800664e:	4b31      	ldr	r3, [pc, #196]	; (8006714 <xTaskIncrementTick+0x14c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	429a      	cmp	r2, r3
 8006664:	d203      	bcs.n	800666e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006666:	4a2e      	ldr	r2, [pc, #184]	; (8006720 <xTaskIncrementTick+0x158>)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800666c:	e02f      	b.n	80066ce <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	3304      	adds	r3, #4
 8006672:	4618      	mov	r0, r3
 8006674:	f7fe ffba 	bl	80055ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667c:	2b00      	cmp	r3, #0
 800667e:	d004      	beq.n	800668a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	3318      	adds	r3, #24
 8006684:	4618      	mov	r0, r3
 8006686:	f7fe ffb1 	bl	80055ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800668e:	4b25      	ldr	r3, [pc, #148]	; (8006724 <xTaskIncrementTick+0x15c>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	429a      	cmp	r2, r3
 8006694:	d903      	bls.n	800669e <xTaskIncrementTick+0xd6>
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669a:	4a22      	ldr	r2, [pc, #136]	; (8006724 <xTaskIncrementTick+0x15c>)
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a2:	4613      	mov	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4a1f      	ldr	r2, [pc, #124]	; (8006728 <xTaskIncrementTick+0x160>)
 80066ac:	441a      	add	r2, r3
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	3304      	adds	r3, #4
 80066b2:	4619      	mov	r1, r3
 80066b4:	4610      	mov	r0, r2
 80066b6:	f7fe ff3c 	bl	8005532 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066be:	4b1b      	ldr	r3, [pc, #108]	; (800672c <xTaskIncrementTick+0x164>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d3b8      	bcc.n	800663a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80066c8:	2301      	movs	r3, #1
 80066ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066cc:	e7b5      	b.n	800663a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066ce:	4b17      	ldr	r3, [pc, #92]	; (800672c <xTaskIncrementTick+0x164>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d4:	4914      	ldr	r1, [pc, #80]	; (8006728 <xTaskIncrementTick+0x160>)
 80066d6:	4613      	mov	r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	440b      	add	r3, r1
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d907      	bls.n	80066f6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80066e6:	2301      	movs	r3, #1
 80066e8:	617b      	str	r3, [r7, #20]
 80066ea:	e004      	b.n	80066f6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80066ec:	4b10      	ldr	r3, [pc, #64]	; (8006730 <xTaskIncrementTick+0x168>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3301      	adds	r3, #1
 80066f2:	4a0f      	ldr	r2, [pc, #60]	; (8006730 <xTaskIncrementTick+0x168>)
 80066f4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80066f6:	4b0f      	ldr	r3, [pc, #60]	; (8006734 <xTaskIncrementTick+0x16c>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80066fe:	2301      	movs	r3, #1
 8006700:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006702:	697b      	ldr	r3, [r7, #20]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3718      	adds	r7, #24
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	24000be8 	.word	0x24000be8
 8006710:	24000bc4 	.word	0x24000bc4
 8006714:	24000b78 	.word	0x24000b78
 8006718:	24000b7c 	.word	0x24000b7c
 800671c:	24000bd8 	.word	0x24000bd8
 8006720:	24000be0 	.word	0x24000be0
 8006724:	24000bc8 	.word	0x24000bc8
 8006728:	240006f0 	.word	0x240006f0
 800672c:	240006ec 	.word	0x240006ec
 8006730:	24000bd0 	.word	0x24000bd0
 8006734:	24000bd4 	.word	0x24000bd4

08006738 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800673e:	4b27      	ldr	r3, [pc, #156]	; (80067dc <vTaskSwitchContext+0xa4>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d003      	beq.n	800674e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006746:	4b26      	ldr	r3, [pc, #152]	; (80067e0 <vTaskSwitchContext+0xa8>)
 8006748:	2201      	movs	r2, #1
 800674a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800674c:	e040      	b.n	80067d0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800674e:	4b24      	ldr	r3, [pc, #144]	; (80067e0 <vTaskSwitchContext+0xa8>)
 8006750:	2200      	movs	r2, #0
 8006752:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006754:	4b23      	ldr	r3, [pc, #140]	; (80067e4 <vTaskSwitchContext+0xac>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	60fb      	str	r3, [r7, #12]
 800675a:	e00f      	b.n	800677c <vTaskSwitchContext+0x44>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d109      	bne.n	8006776 <vTaskSwitchContext+0x3e>
 8006762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	607b      	str	r3, [r7, #4]
 8006774:	e7fe      	b.n	8006774 <vTaskSwitchContext+0x3c>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3b01      	subs	r3, #1
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	491a      	ldr	r1, [pc, #104]	; (80067e8 <vTaskSwitchContext+0xb0>)
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	4613      	mov	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	440b      	add	r3, r1
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d0e5      	beq.n	800675c <vTaskSwitchContext+0x24>
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	4613      	mov	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4a13      	ldr	r2, [pc, #76]	; (80067e8 <vTaskSwitchContext+0xb0>)
 800679c:	4413      	add	r3, r2
 800679e:	60bb      	str	r3, [r7, #8]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	605a      	str	r2, [r3, #4]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	3308      	adds	r3, #8
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d104      	bne.n	80067c0 <vTaskSwitchContext+0x88>
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	605a      	str	r2, [r3, #4]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	4a09      	ldr	r2, [pc, #36]	; (80067ec <vTaskSwitchContext+0xb4>)
 80067c8:	6013      	str	r3, [r2, #0]
 80067ca:	4a06      	ldr	r2, [pc, #24]	; (80067e4 <vTaskSwitchContext+0xac>)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6013      	str	r3, [r2, #0]
}
 80067d0:	bf00      	nop
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	24000be8 	.word	0x24000be8
 80067e0:	24000bd4 	.word	0x24000bd4
 80067e4:	24000bc8 	.word	0x24000bc8
 80067e8:	240006f0 	.word	0x240006f0
 80067ec:	240006ec 	.word	0x240006ec

080067f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d109      	bne.n	8006814 <vTaskPlaceOnEventList+0x24>
 8006800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	60fb      	str	r3, [r7, #12]
 8006812:	e7fe      	b.n	8006812 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006814:	4b07      	ldr	r3, [pc, #28]	; (8006834 <vTaskPlaceOnEventList+0x44>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3318      	adds	r3, #24
 800681a:	4619      	mov	r1, r3
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7fe feac 	bl	800557a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006822:	2101      	movs	r1, #1
 8006824:	6838      	ldr	r0, [r7, #0]
 8006826:	f000 fa71 	bl	8006d0c <prvAddCurrentTaskToDelayedList>
}
 800682a:	bf00      	nop
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	240006ec 	.word	0x240006ec

08006838 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d109      	bne.n	800685e <vTaskPlaceOnEventListRestricted+0x26>
 800684a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	617b      	str	r3, [r7, #20]
 800685c:	e7fe      	b.n	800685c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800685e:	4b0a      	ldr	r3, [pc, #40]	; (8006888 <vTaskPlaceOnEventListRestricted+0x50>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	3318      	adds	r3, #24
 8006864:	4619      	mov	r1, r3
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f7fe fe63 	bl	8005532 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006872:	f04f 33ff 	mov.w	r3, #4294967295
 8006876:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006878:	6879      	ldr	r1, [r7, #4]
 800687a:	68b8      	ldr	r0, [r7, #8]
 800687c:	f000 fa46 	bl	8006d0c <prvAddCurrentTaskToDelayedList>
	}
 8006880:	bf00      	nop
 8006882:	3718      	adds	r7, #24
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	240006ec 	.word	0x240006ec

0800688c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d109      	bne.n	80068b6 <xTaskRemoveFromEventList+0x2a>
 80068a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a6:	f383 8811 	msr	BASEPRI, r3
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	60fb      	str	r3, [r7, #12]
 80068b4:	e7fe      	b.n	80068b4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	3318      	adds	r3, #24
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fe fe96 	bl	80055ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068c0:	4b1d      	ldr	r3, [pc, #116]	; (8006938 <xTaskRemoveFromEventList+0xac>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d11d      	bne.n	8006904 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	3304      	adds	r3, #4
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7fe fe8d 	bl	80055ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d6:	4b19      	ldr	r3, [pc, #100]	; (800693c <xTaskRemoveFromEventList+0xb0>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d903      	bls.n	80068e6 <xTaskRemoveFromEventList+0x5a>
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e2:	4a16      	ldr	r2, [pc, #88]	; (800693c <xTaskRemoveFromEventList+0xb0>)
 80068e4:	6013      	str	r3, [r2, #0]
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ea:	4613      	mov	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4a13      	ldr	r2, [pc, #76]	; (8006940 <xTaskRemoveFromEventList+0xb4>)
 80068f4:	441a      	add	r2, r3
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	3304      	adds	r3, #4
 80068fa:	4619      	mov	r1, r3
 80068fc:	4610      	mov	r0, r2
 80068fe:	f7fe fe18 	bl	8005532 <vListInsertEnd>
 8006902:	e005      	b.n	8006910 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	3318      	adds	r3, #24
 8006908:	4619      	mov	r1, r3
 800690a:	480e      	ldr	r0, [pc, #56]	; (8006944 <xTaskRemoveFromEventList+0xb8>)
 800690c:	f7fe fe11 	bl	8005532 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006914:	4b0c      	ldr	r3, [pc, #48]	; (8006948 <xTaskRemoveFromEventList+0xbc>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691a:	429a      	cmp	r2, r3
 800691c:	d905      	bls.n	800692a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800691e:	2301      	movs	r3, #1
 8006920:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006922:	4b0a      	ldr	r3, [pc, #40]	; (800694c <xTaskRemoveFromEventList+0xc0>)
 8006924:	2201      	movs	r2, #1
 8006926:	601a      	str	r2, [r3, #0]
 8006928:	e001      	b.n	800692e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800692a:	2300      	movs	r3, #0
 800692c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800692e:	697b      	ldr	r3, [r7, #20]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3718      	adds	r7, #24
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	24000be8 	.word	0x24000be8
 800693c:	24000bc8 	.word	0x24000bc8
 8006940:	240006f0 	.word	0x240006f0
 8006944:	24000b80 	.word	0x24000b80
 8006948:	240006ec 	.word	0x240006ec
 800694c:	24000bd4 	.word	0x24000bd4

08006950 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006958:	4b06      	ldr	r3, [pc, #24]	; (8006974 <vTaskInternalSetTimeOutState+0x24>)
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006960:	4b05      	ldr	r3, [pc, #20]	; (8006978 <vTaskInternalSetTimeOutState+0x28>)
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	605a      	str	r2, [r3, #4]
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	24000bd8 	.word	0x24000bd8
 8006978:	24000bc4 	.word	0x24000bc4

0800697c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b088      	sub	sp, #32
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d109      	bne.n	80069a0 <xTaskCheckForTimeOut+0x24>
 800698c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	613b      	str	r3, [r7, #16]
 800699e:	e7fe      	b.n	800699e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d109      	bne.n	80069ba <xTaskCheckForTimeOut+0x3e>
 80069a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069aa:	f383 8811 	msr	BASEPRI, r3
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	f3bf 8f4f 	dsb	sy
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	e7fe      	b.n	80069b8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80069ba:	f000 fe67 	bl	800768c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069be:	4b1d      	ldr	r3, [pc, #116]	; (8006a34 <xTaskCheckForTimeOut+0xb8>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d6:	d102      	bne.n	80069de <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80069d8:	2300      	movs	r3, #0
 80069da:	61fb      	str	r3, [r7, #28]
 80069dc:	e023      	b.n	8006a26 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	4b15      	ldr	r3, [pc, #84]	; (8006a38 <xTaskCheckForTimeOut+0xbc>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d007      	beq.n	80069fa <xTaskCheckForTimeOut+0x7e>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d302      	bcc.n	80069fa <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80069f4:	2301      	movs	r3, #1
 80069f6:	61fb      	str	r3, [r7, #28]
 80069f8:	e015      	b.n	8006a26 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d20b      	bcs.n	8006a1c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	1ad2      	subs	r2, r2, r3
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7ff ff9d 	bl	8006950 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a16:	2300      	movs	r3, #0
 8006a18:	61fb      	str	r3, [r7, #28]
 8006a1a:	e004      	b.n	8006a26 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a22:	2301      	movs	r3, #1
 8006a24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a26:	f000 fe5f 	bl	80076e8 <vPortExitCritical>

	return xReturn;
 8006a2a:	69fb      	ldr	r3, [r7, #28]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3720      	adds	r7, #32
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	24000bc4 	.word	0x24000bc4
 8006a38:	24000bd8 	.word	0x24000bd8

08006a3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a40:	4b03      	ldr	r3, [pc, #12]	; (8006a50 <vTaskMissedYield+0x14>)
 8006a42:	2201      	movs	r2, #1
 8006a44:	601a      	str	r2, [r3, #0]
}
 8006a46:	bf00      	nop
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	24000bd4 	.word	0x24000bd4

08006a54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a5c:	f000 f852 	bl	8006b04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a60:	4b06      	ldr	r3, [pc, #24]	; (8006a7c <prvIdleTask+0x28>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d9f9      	bls.n	8006a5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a68:	4b05      	ldr	r3, [pc, #20]	; (8006a80 <prvIdleTask+0x2c>)
 8006a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a6e:	601a      	str	r2, [r3, #0]
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a78:	e7f0      	b.n	8006a5c <prvIdleTask+0x8>
 8006a7a:	bf00      	nop
 8006a7c:	240006f0 	.word	0x240006f0
 8006a80:	e000ed04 	.word	0xe000ed04

08006a84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	607b      	str	r3, [r7, #4]
 8006a8e:	e00c      	b.n	8006aaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	4613      	mov	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4a12      	ldr	r2, [pc, #72]	; (8006ae4 <prvInitialiseTaskLists+0x60>)
 8006a9c:	4413      	add	r3, r2
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7fe fd1a 	bl	80054d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	607b      	str	r3, [r7, #4]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2b37      	cmp	r3, #55	; 0x37
 8006aae:	d9ef      	bls.n	8006a90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ab0:	480d      	ldr	r0, [pc, #52]	; (8006ae8 <prvInitialiseTaskLists+0x64>)
 8006ab2:	f7fe fd11 	bl	80054d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ab6:	480d      	ldr	r0, [pc, #52]	; (8006aec <prvInitialiseTaskLists+0x68>)
 8006ab8:	f7fe fd0e 	bl	80054d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006abc:	480c      	ldr	r0, [pc, #48]	; (8006af0 <prvInitialiseTaskLists+0x6c>)
 8006abe:	f7fe fd0b 	bl	80054d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ac2:	480c      	ldr	r0, [pc, #48]	; (8006af4 <prvInitialiseTaskLists+0x70>)
 8006ac4:	f7fe fd08 	bl	80054d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ac8:	480b      	ldr	r0, [pc, #44]	; (8006af8 <prvInitialiseTaskLists+0x74>)
 8006aca:	f7fe fd05 	bl	80054d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ace:	4b0b      	ldr	r3, [pc, #44]	; (8006afc <prvInitialiseTaskLists+0x78>)
 8006ad0:	4a05      	ldr	r2, [pc, #20]	; (8006ae8 <prvInitialiseTaskLists+0x64>)
 8006ad2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ad4:	4b0a      	ldr	r3, [pc, #40]	; (8006b00 <prvInitialiseTaskLists+0x7c>)
 8006ad6:	4a05      	ldr	r2, [pc, #20]	; (8006aec <prvInitialiseTaskLists+0x68>)
 8006ad8:	601a      	str	r2, [r3, #0]
}
 8006ada:	bf00      	nop
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	240006f0 	.word	0x240006f0
 8006ae8:	24000b50 	.word	0x24000b50
 8006aec:	24000b64 	.word	0x24000b64
 8006af0:	24000b80 	.word	0x24000b80
 8006af4:	24000b94 	.word	0x24000b94
 8006af8:	24000bac 	.word	0x24000bac
 8006afc:	24000b78 	.word	0x24000b78
 8006b00:	24000b7c 	.word	0x24000b7c

08006b04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b0a:	e019      	b.n	8006b40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b0c:	f000 fdbe 	bl	800768c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b10:	4b0f      	ldr	r3, [pc, #60]	; (8006b50 <prvCheckTasksWaitingTermination+0x4c>)
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fe fd65 	bl	80055ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b22:	4b0c      	ldr	r3, [pc, #48]	; (8006b54 <prvCheckTasksWaitingTermination+0x50>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3b01      	subs	r3, #1
 8006b28:	4a0a      	ldr	r2, [pc, #40]	; (8006b54 <prvCheckTasksWaitingTermination+0x50>)
 8006b2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b2c:	4b0a      	ldr	r3, [pc, #40]	; (8006b58 <prvCheckTasksWaitingTermination+0x54>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3b01      	subs	r3, #1
 8006b32:	4a09      	ldr	r2, [pc, #36]	; (8006b58 <prvCheckTasksWaitingTermination+0x54>)
 8006b34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b36:	f000 fdd7 	bl	80076e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f80e 	bl	8006b5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b40:	4b05      	ldr	r3, [pc, #20]	; (8006b58 <prvCheckTasksWaitingTermination+0x54>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1e1      	bne.n	8006b0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b48:	bf00      	nop
 8006b4a:	3708      	adds	r7, #8
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	24000b94 	.word	0x24000b94
 8006b54:	24000bc0 	.word	0x24000bc0
 8006b58:	24000ba8 	.word	0x24000ba8

08006b5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d108      	bne.n	8006b80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 ff66 	bl	8007a44 <vPortFree>
				vPortFree( pxTCB );
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 ff63 	bl	8007a44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b7e:	e017      	b.n	8006bb0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d103      	bne.n	8006b92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 ff5a 	bl	8007a44 <vPortFree>
	}
 8006b90:	e00e      	b.n	8006bb0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d009      	beq.n	8006bb0 <prvDeleteTCB+0x54>
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	60fb      	str	r3, [r7, #12]
 8006bae:	e7fe      	b.n	8006bae <prvDeleteTCB+0x52>
	}
 8006bb0:	bf00      	nop
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bbe:	4b0c      	ldr	r3, [pc, #48]	; (8006bf0 <prvResetNextTaskUnblockTime+0x38>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d104      	bne.n	8006bd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bc8:	4b0a      	ldr	r3, [pc, #40]	; (8006bf4 <prvResetNextTaskUnblockTime+0x3c>)
 8006bca:	f04f 32ff 	mov.w	r2, #4294967295
 8006bce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006bd0:	e008      	b.n	8006be4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bd2:	4b07      	ldr	r3, [pc, #28]	; (8006bf0 <prvResetNextTaskUnblockTime+0x38>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	4a04      	ldr	r2, [pc, #16]	; (8006bf4 <prvResetNextTaskUnblockTime+0x3c>)
 8006be2:	6013      	str	r3, [r2, #0]
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	24000b78 	.word	0x24000b78
 8006bf4:	24000be0 	.word	0x24000be0

08006bf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006bfe:	4b0b      	ldr	r3, [pc, #44]	; (8006c2c <xTaskGetSchedulerState+0x34>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d102      	bne.n	8006c0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c06:	2301      	movs	r3, #1
 8006c08:	607b      	str	r3, [r7, #4]
 8006c0a:	e008      	b.n	8006c1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c0c:	4b08      	ldr	r3, [pc, #32]	; (8006c30 <xTaskGetSchedulerState+0x38>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d102      	bne.n	8006c1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c14:	2302      	movs	r3, #2
 8006c16:	607b      	str	r3, [r7, #4]
 8006c18:	e001      	b.n	8006c1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c1e:	687b      	ldr	r3, [r7, #4]
	}
 8006c20:	4618      	mov	r0, r3
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr
 8006c2c:	24000bcc 	.word	0x24000bcc
 8006c30:	24000be8 	.word	0x24000be8

08006c34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006c40:	2300      	movs	r3, #0
 8006c42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d054      	beq.n	8006cf4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006c4a:	4b2d      	ldr	r3, [pc, #180]	; (8006d00 <xTaskPriorityDisinherit+0xcc>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d009      	beq.n	8006c68 <xTaskPriorityDisinherit+0x34>
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	e7fe      	b.n	8006c66 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d109      	bne.n	8006c84 <xTaskPriorityDisinherit+0x50>
 8006c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	60bb      	str	r3, [r7, #8]
 8006c82:	e7fe      	b.n	8006c82 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c88:	1e5a      	subs	r2, r3, #1
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d02c      	beq.n	8006cf4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d128      	bne.n	8006cf4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fe fca0 	bl	80055ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc4:	4b0f      	ldr	r3, [pc, #60]	; (8006d04 <xTaskPriorityDisinherit+0xd0>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d903      	bls.n	8006cd4 <xTaskPriorityDisinherit+0xa0>
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	4a0c      	ldr	r2, [pc, #48]	; (8006d04 <xTaskPriorityDisinherit+0xd0>)
 8006cd2:	6013      	str	r3, [r2, #0]
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd8:	4613      	mov	r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4a09      	ldr	r2, [pc, #36]	; (8006d08 <xTaskPriorityDisinherit+0xd4>)
 8006ce2:	441a      	add	r2, r3
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	3304      	adds	r3, #4
 8006ce8:	4619      	mov	r1, r3
 8006cea:	4610      	mov	r0, r2
 8006cec:	f7fe fc21 	bl	8005532 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006cf4:	697b      	ldr	r3, [r7, #20]
	}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3718      	adds	r7, #24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	240006ec 	.word	0x240006ec
 8006d04:	24000bc8 	.word	0x24000bc8
 8006d08:	240006f0 	.word	0x240006f0

08006d0c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d16:	4b21      	ldr	r3, [pc, #132]	; (8006d9c <prvAddCurrentTaskToDelayedList+0x90>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d1c:	4b20      	ldr	r3, [pc, #128]	; (8006da0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3304      	adds	r3, #4
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fe fc62 	bl	80055ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d2e:	d10a      	bne.n	8006d46 <prvAddCurrentTaskToDelayedList+0x3a>
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d007      	beq.n	8006d46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d36:	4b1a      	ldr	r3, [pc, #104]	; (8006da0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3304      	adds	r3, #4
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	4819      	ldr	r0, [pc, #100]	; (8006da4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006d40:	f7fe fbf7 	bl	8005532 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d44:	e026      	b.n	8006d94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d4e:	4b14      	ldr	r3, [pc, #80]	; (8006da0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d209      	bcs.n	8006d72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d5e:	4b12      	ldr	r3, [pc, #72]	; (8006da8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	4b0f      	ldr	r3, [pc, #60]	; (8006da0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	3304      	adds	r3, #4
 8006d68:	4619      	mov	r1, r3
 8006d6a:	4610      	mov	r0, r2
 8006d6c:	f7fe fc05 	bl	800557a <vListInsert>
}
 8006d70:	e010      	b.n	8006d94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d72:	4b0e      	ldr	r3, [pc, #56]	; (8006dac <prvAddCurrentTaskToDelayedList+0xa0>)
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	4b0a      	ldr	r3, [pc, #40]	; (8006da0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	4610      	mov	r0, r2
 8006d80:	f7fe fbfb 	bl	800557a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d84:	4b0a      	ldr	r3, [pc, #40]	; (8006db0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d202      	bcs.n	8006d94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006d8e:	4a08      	ldr	r2, [pc, #32]	; (8006db0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	6013      	str	r3, [r2, #0]
}
 8006d94:	bf00      	nop
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	24000bc4 	.word	0x24000bc4
 8006da0:	240006ec 	.word	0x240006ec
 8006da4:	24000bac 	.word	0x24000bac
 8006da8:	24000b7c 	.word	0x24000b7c
 8006dac:	24000b78 	.word	0x24000b78
 8006db0:	24000be0 	.word	0x24000be0

08006db4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b08a      	sub	sp, #40	; 0x28
 8006db8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006dbe:	f000 faff 	bl	80073c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006dc2:	4b1c      	ldr	r3, [pc, #112]	; (8006e34 <xTimerCreateTimerTask+0x80>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d021      	beq.n	8006e0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006dd2:	1d3a      	adds	r2, r7, #4
 8006dd4:	f107 0108 	add.w	r1, r7, #8
 8006dd8:	f107 030c 	add.w	r3, r7, #12
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7fe fb61 	bl	80054a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006de2:	6879      	ldr	r1, [r7, #4]
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	9202      	str	r2, [sp, #8]
 8006dea:	9301      	str	r3, [sp, #4]
 8006dec:	2302      	movs	r3, #2
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	2300      	movs	r3, #0
 8006df2:	460a      	mov	r2, r1
 8006df4:	4910      	ldr	r1, [pc, #64]	; (8006e38 <xTimerCreateTimerTask+0x84>)
 8006df6:	4811      	ldr	r0, [pc, #68]	; (8006e3c <xTimerCreateTimerTask+0x88>)
 8006df8:	f7ff f8f6 	bl	8005fe8 <xTaskCreateStatic>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	4b10      	ldr	r3, [pc, #64]	; (8006e40 <xTimerCreateTimerTask+0x8c>)
 8006e00:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006e02:	4b0f      	ldr	r3, [pc, #60]	; (8006e40 <xTimerCreateTimerTask+0x8c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d001      	beq.n	8006e0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d109      	bne.n	8006e28 <xTimerCreateTimerTask+0x74>
 8006e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e18:	f383 8811 	msr	BASEPRI, r3
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	613b      	str	r3, [r7, #16]
 8006e26:	e7fe      	b.n	8006e26 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006e28:	697b      	ldr	r3, [r7, #20]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3718      	adds	r7, #24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	24000c1c 	.word	0x24000c1c
 8006e38:	08007d30 	.word	0x08007d30
 8006e3c:	08006f75 	.word	0x08006f75
 8006e40:	24000c20 	.word	0x24000c20

08006e44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b08a      	sub	sp, #40	; 0x28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
 8006e50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006e52:	2300      	movs	r3, #0
 8006e54:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d109      	bne.n	8006e70 <xTimerGenericCommand+0x2c>
 8006e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e60:	f383 8811 	msr	BASEPRI, r3
 8006e64:	f3bf 8f6f 	isb	sy
 8006e68:	f3bf 8f4f 	dsb	sy
 8006e6c:	623b      	str	r3, [r7, #32]
 8006e6e:	e7fe      	b.n	8006e6e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006e70:	4b19      	ldr	r3, [pc, #100]	; (8006ed8 <xTimerGenericCommand+0x94>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d02a      	beq.n	8006ece <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2b05      	cmp	r3, #5
 8006e88:	dc18      	bgt.n	8006ebc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e8a:	f7ff feb5 	bl	8006bf8 <xTaskGetSchedulerState>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d109      	bne.n	8006ea8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e94:	4b10      	ldr	r3, [pc, #64]	; (8006ed8 <xTimerGenericCommand+0x94>)
 8006e96:	6818      	ldr	r0, [r3, #0]
 8006e98:	f107 0110 	add.w	r1, r7, #16
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ea0:	f7fe fccc 	bl	800583c <xQueueGenericSend>
 8006ea4:	6278      	str	r0, [r7, #36]	; 0x24
 8006ea6:	e012      	b.n	8006ece <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006ea8:	4b0b      	ldr	r3, [pc, #44]	; (8006ed8 <xTimerGenericCommand+0x94>)
 8006eaa:	6818      	ldr	r0, [r3, #0]
 8006eac:	f107 0110 	add.w	r1, r7, #16
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f7fe fcc2 	bl	800583c <xQueueGenericSend>
 8006eb8:	6278      	str	r0, [r7, #36]	; 0x24
 8006eba:	e008      	b.n	8006ece <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006ebc:	4b06      	ldr	r3, [pc, #24]	; (8006ed8 <xTimerGenericCommand+0x94>)
 8006ebe:	6818      	ldr	r0, [r3, #0]
 8006ec0:	f107 0110 	add.w	r1, r7, #16
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	f7fe fdb2 	bl	8005a30 <xQueueGenericSendFromISR>
 8006ecc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3728      	adds	r7, #40	; 0x28
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	24000c1c 	.word	0x24000c1c

08006edc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b088      	sub	sp, #32
 8006ee0:	af02      	add	r7, sp, #8
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ee6:	4b22      	ldr	r3, [pc, #136]	; (8006f70 <prvProcessExpiredTimer+0x94>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	3304      	adds	r3, #4
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7fe fb79 	bl	80055ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f00:	f003 0304 	and.w	r3, r3, #4
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d021      	beq.n	8006f4c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	699a      	ldr	r2, [r3, #24]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	18d1      	adds	r1, r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	6978      	ldr	r0, [r7, #20]
 8006f16:	f000 f8d1 	bl	80070bc <prvInsertTimerInActiveList>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d01e      	beq.n	8006f5e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f20:	2300      	movs	r3, #0
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	2300      	movs	r3, #0
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	2100      	movs	r1, #0
 8006f2a:	6978      	ldr	r0, [r7, #20]
 8006f2c:	f7ff ff8a 	bl	8006e44 <xTimerGenericCommand>
 8006f30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d112      	bne.n	8006f5e <prvProcessExpiredTimer+0x82>
 8006f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	60fb      	str	r3, [r7, #12]
 8006f4a:	e7fe      	b.n	8006f4a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f52:	f023 0301 	bic.w	r3, r3, #1
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	6978      	ldr	r0, [r7, #20]
 8006f64:	4798      	blx	r3
}
 8006f66:	bf00      	nop
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	24000c14 	.word	0x24000c14

08006f74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f7c:	f107 0308 	add.w	r3, r7, #8
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 f857 	bl	8007034 <prvGetNextExpireTime>
 8006f86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 f803 	bl	8006f98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f92:	f000 f8d5 	bl	8007140 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f96:	e7f1      	b.n	8006f7c <prvTimerTask+0x8>

08006f98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006fa2:	f7ff fa57 	bl	8006454 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006fa6:	f107 0308 	add.w	r3, r7, #8
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 f866 	bl	800707c <prvSampleTimeNow>
 8006fb0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d130      	bne.n	800701a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10a      	bne.n	8006fd4 <prvProcessTimerOrBlockTask+0x3c>
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d806      	bhi.n	8006fd4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006fc6:	f7ff fa53 	bl	8006470 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006fca:	68f9      	ldr	r1, [r7, #12]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7ff ff85 	bl	8006edc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006fd2:	e024      	b.n	800701e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d008      	beq.n	8006fec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006fda:	4b13      	ldr	r3, [pc, #76]	; (8007028 <prvProcessTimerOrBlockTask+0x90>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <prvProcessTimerOrBlockTask+0x50>
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e000      	b.n	8006fea <prvProcessTimerOrBlockTask+0x52>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006fec:	4b0f      	ldr	r3, [pc, #60]	; (800702c <prvProcessTimerOrBlockTask+0x94>)
 8006fee:	6818      	ldr	r0, [r3, #0]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	f7fe ffc1 	bl	8005f80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ffe:	f7ff fa37 	bl	8006470 <xTaskResumeAll>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10a      	bne.n	800701e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007008:	4b09      	ldr	r3, [pc, #36]	; (8007030 <prvProcessTimerOrBlockTask+0x98>)
 800700a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800700e:	601a      	str	r2, [r3, #0]
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	f3bf 8f6f 	isb	sy
}
 8007018:	e001      	b.n	800701e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800701a:	f7ff fa29 	bl	8006470 <xTaskResumeAll>
}
 800701e:	bf00      	nop
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	24000c18 	.word	0x24000c18
 800702c:	24000c1c 	.word	0x24000c1c
 8007030:	e000ed04 	.word	0xe000ed04

08007034 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800703c:	4b0e      	ldr	r3, [pc, #56]	; (8007078 <prvGetNextExpireTime+0x44>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d101      	bne.n	800704a <prvGetNextExpireTime+0x16>
 8007046:	2201      	movs	r2, #1
 8007048:	e000      	b.n	800704c <prvGetNextExpireTime+0x18>
 800704a:	2200      	movs	r2, #0
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d105      	bne.n	8007064 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007058:	4b07      	ldr	r3, [pc, #28]	; (8007078 <prvGetNextExpireTime+0x44>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	60fb      	str	r3, [r7, #12]
 8007062:	e001      	b.n	8007068 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007064:	2300      	movs	r3, #0
 8007066:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007068:	68fb      	ldr	r3, [r7, #12]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	24000c14 	.word	0x24000c14

0800707c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007084:	f7ff fa90 	bl	80065a8 <xTaskGetTickCount>
 8007088:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800708a:	4b0b      	ldr	r3, [pc, #44]	; (80070b8 <prvSampleTimeNow+0x3c>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	429a      	cmp	r2, r3
 8007092:	d205      	bcs.n	80070a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007094:	f000 f930 	bl	80072f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	e002      	b.n	80070a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80070a6:	4a04      	ldr	r2, [pc, #16]	; (80070b8 <prvSampleTimeNow+0x3c>)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80070ac:	68fb      	ldr	r3, [r7, #12]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	24000c24 	.word	0x24000c24

080070bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
 80070c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80070ca:	2300      	movs	r3, #0
 80070cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d812      	bhi.n	8007108 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	1ad2      	subs	r2, r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d302      	bcc.n	80070f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80070f0:	2301      	movs	r3, #1
 80070f2:	617b      	str	r3, [r7, #20]
 80070f4:	e01b      	b.n	800712e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80070f6:	4b10      	ldr	r3, [pc, #64]	; (8007138 <prvInsertTimerInActiveList+0x7c>)
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	3304      	adds	r3, #4
 80070fe:	4619      	mov	r1, r3
 8007100:	4610      	mov	r0, r2
 8007102:	f7fe fa3a 	bl	800557a <vListInsert>
 8007106:	e012      	b.n	800712e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	429a      	cmp	r2, r3
 800710e:	d206      	bcs.n	800711e <prvInsertTimerInActiveList+0x62>
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	429a      	cmp	r2, r3
 8007116:	d302      	bcc.n	800711e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007118:	2301      	movs	r3, #1
 800711a:	617b      	str	r3, [r7, #20]
 800711c:	e007      	b.n	800712e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800711e:	4b07      	ldr	r3, [pc, #28]	; (800713c <prvInsertTimerInActiveList+0x80>)
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	3304      	adds	r3, #4
 8007126:	4619      	mov	r1, r3
 8007128:	4610      	mov	r0, r2
 800712a:	f7fe fa26 	bl	800557a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800712e:	697b      	ldr	r3, [r7, #20]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3718      	adds	r7, #24
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	24000c18 	.word	0x24000c18
 800713c:	24000c14 	.word	0x24000c14

08007140 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b08e      	sub	sp, #56	; 0x38
 8007144:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007146:	e0c6      	b.n	80072d6 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	da17      	bge.n	800717e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800714e:	1d3b      	adds	r3, r7, #4
 8007150:	3304      	adds	r3, #4
 8007152:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007156:	2b00      	cmp	r3, #0
 8007158:	d109      	bne.n	800716e <prvProcessReceivedCommands+0x2e>
 800715a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	61fb      	str	r3, [r7, #28]
 800716c:	e7fe      	b.n	800716c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800716e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007174:	6850      	ldr	r0, [r2, #4]
 8007176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007178:	6892      	ldr	r2, [r2, #8]
 800717a:	4611      	mov	r1, r2
 800717c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2b00      	cmp	r3, #0
 8007182:	f2c0 80a7 	blt.w	80072d4 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800718a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d004      	beq.n	800719c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007194:	3304      	adds	r3, #4
 8007196:	4618      	mov	r0, r3
 8007198:	f7fe fa28 	bl	80055ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800719c:	463b      	mov	r3, r7
 800719e:	4618      	mov	r0, r3
 80071a0:	f7ff ff6c 	bl	800707c <prvSampleTimeNow>
 80071a4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2b09      	cmp	r3, #9
 80071aa:	f200 8094 	bhi.w	80072d6 <prvProcessReceivedCommands+0x196>
 80071ae:	a201      	add	r2, pc, #4	; (adr r2, 80071b4 <prvProcessReceivedCommands+0x74>)
 80071b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b4:	080071dd 	.word	0x080071dd
 80071b8:	080071dd 	.word	0x080071dd
 80071bc:	080071dd 	.word	0x080071dd
 80071c0:	0800724f 	.word	0x0800724f
 80071c4:	08007263 	.word	0x08007263
 80071c8:	080072ab 	.word	0x080072ab
 80071cc:	080071dd 	.word	0x080071dd
 80071d0:	080071dd 	.word	0x080071dd
 80071d4:	0800724f 	.word	0x0800724f
 80071d8:	08007263 	.word	0x08007263
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071e2:	f043 0301 	orr.w	r3, r3, #1
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	18d1      	adds	r1, r2, r3
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071fc:	f7ff ff5e 	bl	80070bc <prvInsertTimerInActiveList>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d067      	beq.n	80072d6 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800720c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800720e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007210:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007214:	f003 0304 	and.w	r3, r3, #4
 8007218:	2b00      	cmp	r3, #0
 800721a:	d05c      	beq.n	80072d6 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	441a      	add	r2, r3
 8007224:	2300      	movs	r3, #0
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	2300      	movs	r3, #0
 800722a:	2100      	movs	r1, #0
 800722c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800722e:	f7ff fe09 	bl	8006e44 <xTimerGenericCommand>
 8007232:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d14d      	bne.n	80072d6 <prvProcessReceivedCommands+0x196>
 800723a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723e:	f383 8811 	msr	BASEPRI, r3
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	61bb      	str	r3, [r7, #24]
 800724c:	e7fe      	b.n	800724c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800724e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007254:	f023 0301 	bic.w	r3, r3, #1
 8007258:	b2da      	uxtb	r2, r3
 800725a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007260:	e039      	b.n	80072d6 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007264:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007268:	f043 0301 	orr.w	r3, r3, #1
 800726c:	b2da      	uxtb	r2, r3
 800726e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007270:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007278:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800727a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d109      	bne.n	8007296 <prvProcessReceivedCommands+0x156>
 8007282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	617b      	str	r3, [r7, #20]
 8007294:	e7fe      	b.n	8007294 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007298:	699a      	ldr	r2, [r3, #24]
 800729a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729c:	18d1      	adds	r1, r2, r3
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072a4:	f7ff ff0a 	bl	80070bc <prvInsertTimerInActiveList>
					break;
 80072a8:	e015      	b.n	80072d6 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80072aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072b0:	f003 0302 	and.w	r3, r3, #2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d103      	bne.n	80072c0 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80072b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072ba:	f000 fbc3 	bl	8007a44 <vPortFree>
 80072be:	e00a      	b.n	80072d6 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072c6:	f023 0301 	bic.w	r3, r3, #1
 80072ca:	b2da      	uxtb	r2, r3
 80072cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80072d2:	e000      	b.n	80072d6 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80072d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072d6:	4b07      	ldr	r3, [pc, #28]	; (80072f4 <prvProcessReceivedCommands+0x1b4>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	1d39      	adds	r1, r7, #4
 80072dc:	2200      	movs	r2, #0
 80072de:	4618      	mov	r0, r3
 80072e0:	f7fe fc3a 	bl	8005b58 <xQueueReceive>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f47f af2e 	bne.w	8007148 <prvProcessReceivedCommands+0x8>
	}
}
 80072ec:	bf00      	nop
 80072ee:	3730      	adds	r7, #48	; 0x30
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	24000c1c 	.word	0x24000c1c

080072f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b088      	sub	sp, #32
 80072fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072fe:	e047      	b.n	8007390 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007300:	4b2d      	ldr	r3, [pc, #180]	; (80073b8 <prvSwitchTimerLists+0xc0>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800730a:	4b2b      	ldr	r3, [pc, #172]	; (80073b8 <prvSwitchTimerLists+0xc0>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	3304      	adds	r3, #4
 8007318:	4618      	mov	r0, r3
 800731a:	f7fe f967 	bl	80055ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800732c:	f003 0304 	and.w	r3, r3, #4
 8007330:	2b00      	cmp	r3, #0
 8007332:	d02d      	beq.n	8007390 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	4413      	add	r3, r2
 800733c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	429a      	cmp	r2, r3
 8007344:	d90e      	bls.n	8007364 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007352:	4b19      	ldr	r3, [pc, #100]	; (80073b8 <prvSwitchTimerLists+0xc0>)
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	3304      	adds	r3, #4
 800735a:	4619      	mov	r1, r3
 800735c:	4610      	mov	r0, r2
 800735e:	f7fe f90c 	bl	800557a <vListInsert>
 8007362:	e015      	b.n	8007390 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007364:	2300      	movs	r3, #0
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	2300      	movs	r3, #0
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	2100      	movs	r1, #0
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f7ff fd68 	bl	8006e44 <xTimerGenericCommand>
 8007374:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d109      	bne.n	8007390 <prvSwitchTimerLists+0x98>
 800737c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007380:	f383 8811 	msr	BASEPRI, r3
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	603b      	str	r3, [r7, #0]
 800738e:	e7fe      	b.n	800738e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007390:	4b09      	ldr	r3, [pc, #36]	; (80073b8 <prvSwitchTimerLists+0xc0>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1b2      	bne.n	8007300 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800739a:	4b07      	ldr	r3, [pc, #28]	; (80073b8 <prvSwitchTimerLists+0xc0>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80073a0:	4b06      	ldr	r3, [pc, #24]	; (80073bc <prvSwitchTimerLists+0xc4>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a04      	ldr	r2, [pc, #16]	; (80073b8 <prvSwitchTimerLists+0xc0>)
 80073a6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80073a8:	4a04      	ldr	r2, [pc, #16]	; (80073bc <prvSwitchTimerLists+0xc4>)
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	6013      	str	r3, [r2, #0]
}
 80073ae:	bf00      	nop
 80073b0:	3718      	adds	r7, #24
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	24000c14 	.word	0x24000c14
 80073bc:	24000c18 	.word	0x24000c18

080073c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80073c6:	f000 f961 	bl	800768c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80073ca:	4b15      	ldr	r3, [pc, #84]	; (8007420 <prvCheckForValidListAndQueue+0x60>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d120      	bne.n	8007414 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80073d2:	4814      	ldr	r0, [pc, #80]	; (8007424 <prvCheckForValidListAndQueue+0x64>)
 80073d4:	f7fe f880 	bl	80054d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80073d8:	4813      	ldr	r0, [pc, #76]	; (8007428 <prvCheckForValidListAndQueue+0x68>)
 80073da:	f7fe f87d 	bl	80054d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80073de:	4b13      	ldr	r3, [pc, #76]	; (800742c <prvCheckForValidListAndQueue+0x6c>)
 80073e0:	4a10      	ldr	r2, [pc, #64]	; (8007424 <prvCheckForValidListAndQueue+0x64>)
 80073e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80073e4:	4b12      	ldr	r3, [pc, #72]	; (8007430 <prvCheckForValidListAndQueue+0x70>)
 80073e6:	4a10      	ldr	r2, [pc, #64]	; (8007428 <prvCheckForValidListAndQueue+0x68>)
 80073e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80073ea:	2300      	movs	r3, #0
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	4b11      	ldr	r3, [pc, #68]	; (8007434 <prvCheckForValidListAndQueue+0x74>)
 80073f0:	4a11      	ldr	r2, [pc, #68]	; (8007438 <prvCheckForValidListAndQueue+0x78>)
 80073f2:	2110      	movs	r1, #16
 80073f4:	200a      	movs	r0, #10
 80073f6:	f7fe f98b 	bl	8005710 <xQueueGenericCreateStatic>
 80073fa:	4602      	mov	r2, r0
 80073fc:	4b08      	ldr	r3, [pc, #32]	; (8007420 <prvCheckForValidListAndQueue+0x60>)
 80073fe:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007400:	4b07      	ldr	r3, [pc, #28]	; (8007420 <prvCheckForValidListAndQueue+0x60>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d005      	beq.n	8007414 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007408:	4b05      	ldr	r3, [pc, #20]	; (8007420 <prvCheckForValidListAndQueue+0x60>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	490b      	ldr	r1, [pc, #44]	; (800743c <prvCheckForValidListAndQueue+0x7c>)
 800740e:	4618      	mov	r0, r3
 8007410:	f7fe fd8e 	bl	8005f30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007414:	f000 f968 	bl	80076e8 <vPortExitCritical>
}
 8007418:	bf00      	nop
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	24000c1c 	.word	0x24000c1c
 8007424:	24000bec 	.word	0x24000bec
 8007428:	24000c00 	.word	0x24000c00
 800742c:	24000c14 	.word	0x24000c14
 8007430:	24000c18 	.word	0x24000c18
 8007434:	24000cc8 	.word	0x24000cc8
 8007438:	24000c28 	.word	0x24000c28
 800743c:	08007d38 	.word	0x08007d38

08007440 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	3b04      	subs	r3, #4
 8007450:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007458:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3b04      	subs	r3, #4
 800745e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	f023 0201 	bic.w	r2, r3, #1
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	3b04      	subs	r3, #4
 800746e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007470:	4a0c      	ldr	r2, [pc, #48]	; (80074a4 <pxPortInitialiseStack+0x64>)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	3b14      	subs	r3, #20
 800747a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	3b04      	subs	r3, #4
 8007486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f06f 0202 	mvn.w	r2, #2
 800748e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	3b20      	subs	r3, #32
 8007494:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007496:	68fb      	ldr	r3, [r7, #12]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr
 80074a4:	080074a9 	.word	0x080074a9

080074a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80074ae:	2300      	movs	r3, #0
 80074b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80074b2:	4b11      	ldr	r3, [pc, #68]	; (80074f8 <prvTaskExitError+0x50>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ba:	d009      	beq.n	80074d0 <prvTaskExitError+0x28>
 80074bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c0:	f383 8811 	msr	BASEPRI, r3
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	60fb      	str	r3, [r7, #12]
 80074ce:	e7fe      	b.n	80074ce <prvTaskExitError+0x26>
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80074e2:	bf00      	nop
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d0fc      	beq.n	80074e4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80074ea:	bf00      	nop
 80074ec:	3714      	adds	r7, #20
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	24000010 	.word	0x24000010
 80074fc:	00000000 	.word	0x00000000

08007500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007500:	4b07      	ldr	r3, [pc, #28]	; (8007520 <pxCurrentTCBConst2>)
 8007502:	6819      	ldr	r1, [r3, #0]
 8007504:	6808      	ldr	r0, [r1, #0]
 8007506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750a:	f380 8809 	msr	PSP, r0
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f04f 0000 	mov.w	r0, #0
 8007516:	f380 8811 	msr	BASEPRI, r0
 800751a:	4770      	bx	lr
 800751c:	f3af 8000 	nop.w

08007520 <pxCurrentTCBConst2>:
 8007520:	240006ec 	.word	0x240006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007524:	bf00      	nop
 8007526:	bf00      	nop

08007528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007528:	4808      	ldr	r0, [pc, #32]	; (800754c <prvPortStartFirstTask+0x24>)
 800752a:	6800      	ldr	r0, [r0, #0]
 800752c:	6800      	ldr	r0, [r0, #0]
 800752e:	f380 8808 	msr	MSP, r0
 8007532:	f04f 0000 	mov.w	r0, #0
 8007536:	f380 8814 	msr	CONTROL, r0
 800753a:	b662      	cpsie	i
 800753c:	b661      	cpsie	f
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	f3bf 8f6f 	isb	sy
 8007546:	df00      	svc	0
 8007548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800754a:	bf00      	nop
 800754c:	e000ed08 	.word	0xe000ed08

08007550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007556:	4b44      	ldr	r3, [pc, #272]	; (8007668 <xPortStartScheduler+0x118>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a44      	ldr	r2, [pc, #272]	; (800766c <xPortStartScheduler+0x11c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d109      	bne.n	8007574 <xPortStartScheduler+0x24>
 8007560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	613b      	str	r3, [r7, #16]
 8007572:	e7fe      	b.n	8007572 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007574:	4b3c      	ldr	r3, [pc, #240]	; (8007668 <xPortStartScheduler+0x118>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a3d      	ldr	r2, [pc, #244]	; (8007670 <xPortStartScheduler+0x120>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d109      	bne.n	8007592 <xPortStartScheduler+0x42>
 800757e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	60fb      	str	r3, [r7, #12]
 8007590:	e7fe      	b.n	8007590 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007592:	4b38      	ldr	r3, [pc, #224]	; (8007674 <xPortStartScheduler+0x124>)
 8007594:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	b2db      	uxtb	r3, r3
 800759c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	22ff      	movs	r2, #255	; 0xff
 80075a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80075ac:	78fb      	ldrb	r3, [r7, #3]
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	4b30      	ldr	r3, [pc, #192]	; (8007678 <xPortStartScheduler+0x128>)
 80075b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80075ba:	4b30      	ldr	r3, [pc, #192]	; (800767c <xPortStartScheduler+0x12c>)
 80075bc:	2207      	movs	r2, #7
 80075be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075c0:	e009      	b.n	80075d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80075c2:	4b2e      	ldr	r3, [pc, #184]	; (800767c <xPortStartScheduler+0x12c>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	3b01      	subs	r3, #1
 80075c8:	4a2c      	ldr	r2, [pc, #176]	; (800767c <xPortStartScheduler+0x12c>)
 80075ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80075cc:	78fb      	ldrb	r3, [r7, #3]
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	005b      	lsls	r3, r3, #1
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075d6:	78fb      	ldrb	r3, [r7, #3]
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075de:	2b80      	cmp	r3, #128	; 0x80
 80075e0:	d0ef      	beq.n	80075c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075e2:	4b26      	ldr	r3, [pc, #152]	; (800767c <xPortStartScheduler+0x12c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f1c3 0307 	rsb	r3, r3, #7
 80075ea:	2b04      	cmp	r3, #4
 80075ec:	d009      	beq.n	8007602 <xPortStartScheduler+0xb2>
 80075ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	60bb      	str	r3, [r7, #8]
 8007600:	e7fe      	b.n	8007600 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007602:	4b1e      	ldr	r3, [pc, #120]	; (800767c <xPortStartScheduler+0x12c>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	021b      	lsls	r3, r3, #8
 8007608:	4a1c      	ldr	r2, [pc, #112]	; (800767c <xPortStartScheduler+0x12c>)
 800760a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800760c:	4b1b      	ldr	r3, [pc, #108]	; (800767c <xPortStartScheduler+0x12c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007614:	4a19      	ldr	r2, [pc, #100]	; (800767c <xPortStartScheduler+0x12c>)
 8007616:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	b2da      	uxtb	r2, r3
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007620:	4b17      	ldr	r3, [pc, #92]	; (8007680 <xPortStartScheduler+0x130>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a16      	ldr	r2, [pc, #88]	; (8007680 <xPortStartScheduler+0x130>)
 8007626:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800762a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800762c:	4b14      	ldr	r3, [pc, #80]	; (8007680 <xPortStartScheduler+0x130>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a13      	ldr	r2, [pc, #76]	; (8007680 <xPortStartScheduler+0x130>)
 8007632:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007636:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007638:	f000 f8d6 	bl	80077e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800763c:	4b11      	ldr	r3, [pc, #68]	; (8007684 <xPortStartScheduler+0x134>)
 800763e:	2200      	movs	r2, #0
 8007640:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007642:	f000 f8f5 	bl	8007830 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007646:	4b10      	ldr	r3, [pc, #64]	; (8007688 <xPortStartScheduler+0x138>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a0f      	ldr	r2, [pc, #60]	; (8007688 <xPortStartScheduler+0x138>)
 800764c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007650:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007652:	f7ff ff69 	bl	8007528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007656:	f7ff f86f 	bl	8006738 <vTaskSwitchContext>
	prvTaskExitError();
 800765a:	f7ff ff25 	bl	80074a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3718      	adds	r7, #24
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	e000ed00 	.word	0xe000ed00
 800766c:	410fc271 	.word	0x410fc271
 8007670:	410fc270 	.word	0x410fc270
 8007674:	e000e400 	.word	0xe000e400
 8007678:	24000d18 	.word	0x24000d18
 800767c:	24000d1c 	.word	0x24000d1c
 8007680:	e000ed20 	.word	0xe000ed20
 8007684:	24000010 	.word	0x24000010
 8007688:	e000ef34 	.word	0xe000ef34

0800768c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80076a4:	4b0e      	ldr	r3, [pc, #56]	; (80076e0 <vPortEnterCritical+0x54>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3301      	adds	r3, #1
 80076aa:	4a0d      	ldr	r2, [pc, #52]	; (80076e0 <vPortEnterCritical+0x54>)
 80076ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80076ae:	4b0c      	ldr	r3, [pc, #48]	; (80076e0 <vPortEnterCritical+0x54>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d10e      	bne.n	80076d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80076b6:	4b0b      	ldr	r3, [pc, #44]	; (80076e4 <vPortEnterCritical+0x58>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d009      	beq.n	80076d4 <vPortEnterCritical+0x48>
 80076c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c4:	f383 8811 	msr	BASEPRI, r3
 80076c8:	f3bf 8f6f 	isb	sy
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	603b      	str	r3, [r7, #0]
 80076d2:	e7fe      	b.n	80076d2 <vPortEnterCritical+0x46>
	}
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr
 80076e0:	24000010 	.word	0x24000010
 80076e4:	e000ed04 	.word	0xe000ed04

080076e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076ee:	4b11      	ldr	r3, [pc, #68]	; (8007734 <vPortExitCritical+0x4c>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d109      	bne.n	800770a <vPortExitCritical+0x22>
 80076f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	607b      	str	r3, [r7, #4]
 8007708:	e7fe      	b.n	8007708 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800770a:	4b0a      	ldr	r3, [pc, #40]	; (8007734 <vPortExitCritical+0x4c>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	3b01      	subs	r3, #1
 8007710:	4a08      	ldr	r2, [pc, #32]	; (8007734 <vPortExitCritical+0x4c>)
 8007712:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007714:	4b07      	ldr	r3, [pc, #28]	; (8007734 <vPortExitCritical+0x4c>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d104      	bne.n	8007726 <vPortExitCritical+0x3e>
 800771c:	2300      	movs	r3, #0
 800771e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007726:	bf00      	nop
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	24000010 	.word	0x24000010
	...

08007740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007740:	f3ef 8009 	mrs	r0, PSP
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	4b15      	ldr	r3, [pc, #84]	; (80077a0 <pxCurrentTCBConst>)
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	f01e 0f10 	tst.w	lr, #16
 8007750:	bf08      	it	eq
 8007752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800775a:	6010      	str	r0, [r2, #0]
 800775c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007760:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007764:	f380 8811 	msr	BASEPRI, r0
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f7fe ffe2 	bl	8006738 <vTaskSwitchContext>
 8007774:	f04f 0000 	mov.w	r0, #0
 8007778:	f380 8811 	msr	BASEPRI, r0
 800777c:	bc09      	pop	{r0, r3}
 800777e:	6819      	ldr	r1, [r3, #0]
 8007780:	6808      	ldr	r0, [r1, #0]
 8007782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007786:	f01e 0f10 	tst.w	lr, #16
 800778a:	bf08      	it	eq
 800778c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007790:	f380 8809 	msr	PSP, r0
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	f3af 8000 	nop.w

080077a0 <pxCurrentTCBConst>:
 80077a0:	240006ec 	.word	0x240006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80077a4:	bf00      	nop
 80077a6:	bf00      	nop

080077a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80077c0:	f7fe ff02 	bl	80065c8 <xTaskIncrementTick>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d003      	beq.n	80077d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80077ca:	4b06      	ldr	r3, [pc, #24]	; (80077e4 <SysTick_Handler+0x3c>)
 80077cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	2300      	movs	r3, #0
 80077d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80077dc:	bf00      	nop
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	e000ed04 	.word	0xe000ed04

080077e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80077e8:	b480      	push	{r7}
 80077ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077ec:	4b0b      	ldr	r3, [pc, #44]	; (800781c <vPortSetupTimerInterrupt+0x34>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077f2:	4b0b      	ldr	r3, [pc, #44]	; (8007820 <vPortSetupTimerInterrupt+0x38>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077f8:	4b0a      	ldr	r3, [pc, #40]	; (8007824 <vPortSetupTimerInterrupt+0x3c>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a0a      	ldr	r2, [pc, #40]	; (8007828 <vPortSetupTimerInterrupt+0x40>)
 80077fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007802:	099b      	lsrs	r3, r3, #6
 8007804:	4a09      	ldr	r2, [pc, #36]	; (800782c <vPortSetupTimerInterrupt+0x44>)
 8007806:	3b01      	subs	r3, #1
 8007808:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800780a:	4b04      	ldr	r3, [pc, #16]	; (800781c <vPortSetupTimerInterrupt+0x34>)
 800780c:	2207      	movs	r2, #7
 800780e:	601a      	str	r2, [r3, #0]
}
 8007810:	bf00      	nop
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	e000e010 	.word	0xe000e010
 8007820:	e000e018 	.word	0xe000e018
 8007824:	24000000 	.word	0x24000000
 8007828:	10624dd3 	.word	0x10624dd3
 800782c:	e000e014 	.word	0xe000e014

08007830 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007830:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007840 <vPortEnableVFP+0x10>
 8007834:	6801      	ldr	r1, [r0, #0]
 8007836:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800783a:	6001      	str	r1, [r0, #0]
 800783c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800783e:	bf00      	nop
 8007840:	e000ed88 	.word	0xe000ed88

08007844 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800784a:	f3ef 8305 	mrs	r3, IPSR
 800784e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2b0f      	cmp	r3, #15
 8007854:	d913      	bls.n	800787e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007856:	4a16      	ldr	r2, [pc, #88]	; (80078b0 <vPortValidateInterruptPriority+0x6c>)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	4413      	add	r3, r2
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007860:	4b14      	ldr	r3, [pc, #80]	; (80078b4 <vPortValidateInterruptPriority+0x70>)
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	7afa      	ldrb	r2, [r7, #11]
 8007866:	429a      	cmp	r2, r3
 8007868:	d209      	bcs.n	800787e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	607b      	str	r3, [r7, #4]
 800787c:	e7fe      	b.n	800787c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800787e:	4b0e      	ldr	r3, [pc, #56]	; (80078b8 <vPortValidateInterruptPriority+0x74>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007886:	4b0d      	ldr	r3, [pc, #52]	; (80078bc <vPortValidateInterruptPriority+0x78>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	429a      	cmp	r2, r3
 800788c:	d909      	bls.n	80078a2 <vPortValidateInterruptPriority+0x5e>
 800788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	603b      	str	r3, [r7, #0]
 80078a0:	e7fe      	b.n	80078a0 <vPortValidateInterruptPriority+0x5c>
	}
 80078a2:	bf00      	nop
 80078a4:	3714      	adds	r7, #20
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	e000e3f0 	.word	0xe000e3f0
 80078b4:	24000d18 	.word	0x24000d18
 80078b8:	e000ed0c 	.word	0xe000ed0c
 80078bc:	24000d1c 	.word	0x24000d1c

080078c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b08a      	sub	sp, #40	; 0x28
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80078c8:	2300      	movs	r3, #0
 80078ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80078cc:	f7fe fdc2 	bl	8006454 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80078d0:	4b57      	ldr	r3, [pc, #348]	; (8007a30 <pvPortMalloc+0x170>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078d8:	f000 f90c 	bl	8007af4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078dc:	4b55      	ldr	r3, [pc, #340]	; (8007a34 <pvPortMalloc+0x174>)
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4013      	ands	r3, r2
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f040 808c 	bne.w	8007a02 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d01c      	beq.n	800792a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80078f0:	2208      	movs	r2, #8
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4413      	add	r3, r2
 80078f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f003 0307 	and.w	r3, r3, #7
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d013      	beq.n	800792a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f023 0307 	bic.w	r3, r3, #7
 8007908:	3308      	adds	r3, #8
 800790a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f003 0307 	and.w	r3, r3, #7
 8007912:	2b00      	cmp	r3, #0
 8007914:	d009      	beq.n	800792a <pvPortMalloc+0x6a>
 8007916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791a:	f383 8811 	msr	BASEPRI, r3
 800791e:	f3bf 8f6f 	isb	sy
 8007922:	f3bf 8f4f 	dsb	sy
 8007926:	617b      	str	r3, [r7, #20]
 8007928:	e7fe      	b.n	8007928 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d068      	beq.n	8007a02 <pvPortMalloc+0x142>
 8007930:	4b41      	ldr	r3, [pc, #260]	; (8007a38 <pvPortMalloc+0x178>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	429a      	cmp	r2, r3
 8007938:	d863      	bhi.n	8007a02 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800793a:	4b40      	ldr	r3, [pc, #256]	; (8007a3c <pvPortMalloc+0x17c>)
 800793c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800793e:	4b3f      	ldr	r3, [pc, #252]	; (8007a3c <pvPortMalloc+0x17c>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007944:	e004      	b.n	8007950 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	429a      	cmp	r2, r3
 8007958:	d903      	bls.n	8007962 <pvPortMalloc+0xa2>
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1f1      	bne.n	8007946 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007962:	4b33      	ldr	r3, [pc, #204]	; (8007a30 <pvPortMalloc+0x170>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007968:	429a      	cmp	r2, r3
 800796a:	d04a      	beq.n	8007a02 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800796c:	6a3b      	ldr	r3, [r7, #32]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2208      	movs	r2, #8
 8007972:	4413      	add	r3, r2
 8007974:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	6a3b      	ldr	r3, [r7, #32]
 800797c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	685a      	ldr	r2, [r3, #4]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	1ad2      	subs	r2, r2, r3
 8007986:	2308      	movs	r3, #8
 8007988:	005b      	lsls	r3, r3, #1
 800798a:	429a      	cmp	r2, r3
 800798c:	d91e      	bls.n	80079cc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800798e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4413      	add	r3, r2
 8007994:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	f003 0307 	and.w	r3, r3, #7
 800799c:	2b00      	cmp	r3, #0
 800799e:	d009      	beq.n	80079b4 <pvPortMalloc+0xf4>
 80079a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	613b      	str	r3, [r7, #16]
 80079b2:	e7fe      	b.n	80079b2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	1ad2      	subs	r2, r2, r3
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079c6:	69b8      	ldr	r0, [r7, #24]
 80079c8:	f000 f8f6 	bl	8007bb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079cc:	4b1a      	ldr	r3, [pc, #104]	; (8007a38 <pvPortMalloc+0x178>)
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	4a18      	ldr	r2, [pc, #96]	; (8007a38 <pvPortMalloc+0x178>)
 80079d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079da:	4b17      	ldr	r3, [pc, #92]	; (8007a38 <pvPortMalloc+0x178>)
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	4b18      	ldr	r3, [pc, #96]	; (8007a40 <pvPortMalloc+0x180>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d203      	bcs.n	80079ee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079e6:	4b14      	ldr	r3, [pc, #80]	; (8007a38 <pvPortMalloc+0x178>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a15      	ldr	r2, [pc, #84]	; (8007a40 <pvPortMalloc+0x180>)
 80079ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	4b10      	ldr	r3, [pc, #64]	; (8007a34 <pvPortMalloc+0x174>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	431a      	orrs	r2, r3
 80079f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fe:	2200      	movs	r2, #0
 8007a00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a02:	f7fe fd35 	bl	8006470 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	f003 0307 	and.w	r3, r3, #7
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d009      	beq.n	8007a24 <pvPortMalloc+0x164>
 8007a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	60fb      	str	r3, [r7, #12]
 8007a22:	e7fe      	b.n	8007a22 <pvPortMalloc+0x162>
	return pvReturn;
 8007a24:	69fb      	ldr	r3, [r7, #28]
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3728      	adds	r7, #40	; 0x28
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	24004928 	.word	0x24004928
 8007a34:	24004934 	.word	0x24004934
 8007a38:	2400492c 	.word	0x2400492c
 8007a3c:	24004920 	.word	0x24004920
 8007a40:	24004930 	.word	0x24004930

08007a44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d046      	beq.n	8007ae4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a56:	2308      	movs	r3, #8
 8007a58:	425b      	negs	r3, r3
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	685a      	ldr	r2, [r3, #4]
 8007a68:	4b20      	ldr	r3, [pc, #128]	; (8007aec <vPortFree+0xa8>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d109      	bne.n	8007a86 <vPortFree+0x42>
 8007a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	60fb      	str	r3, [r7, #12]
 8007a84:	e7fe      	b.n	8007a84 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d009      	beq.n	8007aa2 <vPortFree+0x5e>
 8007a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	60bb      	str	r3, [r7, #8]
 8007aa0:	e7fe      	b.n	8007aa0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	4b11      	ldr	r3, [pc, #68]	; (8007aec <vPortFree+0xa8>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4013      	ands	r3, r2
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d019      	beq.n	8007ae4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d115      	bne.n	8007ae4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	4b0b      	ldr	r3, [pc, #44]	; (8007aec <vPortFree+0xa8>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	43db      	mvns	r3, r3
 8007ac2:	401a      	ands	r2, r3
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ac8:	f7fe fcc4 	bl	8006454 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	4b07      	ldr	r3, [pc, #28]	; (8007af0 <vPortFree+0xac>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	4a06      	ldr	r2, [pc, #24]	; (8007af0 <vPortFree+0xac>)
 8007ad8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ada:	6938      	ldr	r0, [r7, #16]
 8007adc:	f000 f86c 	bl	8007bb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007ae0:	f7fe fcc6 	bl	8006470 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ae4:	bf00      	nop
 8007ae6:	3718      	adds	r7, #24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	24004934 	.word	0x24004934
 8007af0:	2400492c 	.word	0x2400492c

08007af4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007afa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007afe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b00:	4b27      	ldr	r3, [pc, #156]	; (8007ba0 <prvHeapInit+0xac>)
 8007b02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00c      	beq.n	8007b28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3307      	adds	r3, #7
 8007b12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 0307 	bic.w	r3, r3, #7
 8007b1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	4a1f      	ldr	r2, [pc, #124]	; (8007ba0 <prvHeapInit+0xac>)
 8007b24:	4413      	add	r3, r2
 8007b26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b2c:	4a1d      	ldr	r2, [pc, #116]	; (8007ba4 <prvHeapInit+0xb0>)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b32:	4b1c      	ldr	r3, [pc, #112]	; (8007ba4 <prvHeapInit+0xb0>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b40:	2208      	movs	r2, #8
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	1a9b      	subs	r3, r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f023 0307 	bic.w	r3, r3, #7
 8007b4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	4a15      	ldr	r2, [pc, #84]	; (8007ba8 <prvHeapInit+0xb4>)
 8007b54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b56:	4b14      	ldr	r3, [pc, #80]	; (8007ba8 <prvHeapInit+0xb4>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b5e:	4b12      	ldr	r3, [pc, #72]	; (8007ba8 <prvHeapInit+0xb4>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2200      	movs	r2, #0
 8007b64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	1ad2      	subs	r2, r2, r3
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b74:	4b0c      	ldr	r3, [pc, #48]	; (8007ba8 <prvHeapInit+0xb4>)
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	4a0a      	ldr	r2, [pc, #40]	; (8007bac <prvHeapInit+0xb8>)
 8007b82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	4a09      	ldr	r2, [pc, #36]	; (8007bb0 <prvHeapInit+0xbc>)
 8007b8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b8c:	4b09      	ldr	r3, [pc, #36]	; (8007bb4 <prvHeapInit+0xc0>)
 8007b8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b92:	601a      	str	r2, [r3, #0]
}
 8007b94:	bf00      	nop
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	24000d20 	.word	0x24000d20
 8007ba4:	24004920 	.word	0x24004920
 8007ba8:	24004928 	.word	0x24004928
 8007bac:	24004930 	.word	0x24004930
 8007bb0:	2400492c 	.word	0x2400492c
 8007bb4:	24004934 	.word	0x24004934

08007bb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007bc0:	4b28      	ldr	r3, [pc, #160]	; (8007c64 <prvInsertBlockIntoFreeList+0xac>)
 8007bc2:	60fb      	str	r3, [r7, #12]
 8007bc4:	e002      	b.n	8007bcc <prvInsertBlockIntoFreeList+0x14>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d8f7      	bhi.n	8007bc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	4413      	add	r3, r2
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d108      	bne.n	8007bfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	441a      	add	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	441a      	add	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d118      	bne.n	8007c40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	4b15      	ldr	r3, [pc, #84]	; (8007c68 <prvInsertBlockIntoFreeList+0xb0>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d00d      	beq.n	8007c36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	441a      	add	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	e008      	b.n	8007c48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c36:	4b0c      	ldr	r3, [pc, #48]	; (8007c68 <prvInsertBlockIntoFreeList+0xb0>)
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	e003      	b.n	8007c48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d002      	beq.n	8007c56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c56:	bf00      	nop
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	24004920 	.word	0x24004920
 8007c68:	24004928 	.word	0x24004928

08007c6c <__libc_init_array>:
 8007c6c:	b570      	push	{r4, r5, r6, lr}
 8007c6e:	4e0d      	ldr	r6, [pc, #52]	; (8007ca4 <__libc_init_array+0x38>)
 8007c70:	4c0d      	ldr	r4, [pc, #52]	; (8007ca8 <__libc_init_array+0x3c>)
 8007c72:	1ba4      	subs	r4, r4, r6
 8007c74:	10a4      	asrs	r4, r4, #2
 8007c76:	2500      	movs	r5, #0
 8007c78:	42a5      	cmp	r5, r4
 8007c7a:	d109      	bne.n	8007c90 <__libc_init_array+0x24>
 8007c7c:	4e0b      	ldr	r6, [pc, #44]	; (8007cac <__libc_init_array+0x40>)
 8007c7e:	4c0c      	ldr	r4, [pc, #48]	; (8007cb0 <__libc_init_array+0x44>)
 8007c80:	f000 f82c 	bl	8007cdc <_init>
 8007c84:	1ba4      	subs	r4, r4, r6
 8007c86:	10a4      	asrs	r4, r4, #2
 8007c88:	2500      	movs	r5, #0
 8007c8a:	42a5      	cmp	r5, r4
 8007c8c:	d105      	bne.n	8007c9a <__libc_init_array+0x2e>
 8007c8e:	bd70      	pop	{r4, r5, r6, pc}
 8007c90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c94:	4798      	blx	r3
 8007c96:	3501      	adds	r5, #1
 8007c98:	e7ee      	b.n	8007c78 <__libc_init_array+0xc>
 8007c9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c9e:	4798      	blx	r3
 8007ca0:	3501      	adds	r5, #1
 8007ca2:	e7f2      	b.n	8007c8a <__libc_init_array+0x1e>
 8007ca4:	08007ddc 	.word	0x08007ddc
 8007ca8:	08007ddc 	.word	0x08007ddc
 8007cac:	08007ddc 	.word	0x08007ddc
 8007cb0:	08007de0 	.word	0x08007de0

08007cb4 <memcpy>:
 8007cb4:	b510      	push	{r4, lr}
 8007cb6:	1e43      	subs	r3, r0, #1
 8007cb8:	440a      	add	r2, r1
 8007cba:	4291      	cmp	r1, r2
 8007cbc:	d100      	bne.n	8007cc0 <memcpy+0xc>
 8007cbe:	bd10      	pop	{r4, pc}
 8007cc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cc8:	e7f7      	b.n	8007cba <memcpy+0x6>

08007cca <memset>:
 8007cca:	4402      	add	r2, r0
 8007ccc:	4603      	mov	r3, r0
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d100      	bne.n	8007cd4 <memset+0xa>
 8007cd2:	4770      	bx	lr
 8007cd4:	f803 1b01 	strb.w	r1, [r3], #1
 8007cd8:	e7f9      	b.n	8007cce <memset+0x4>
	...

08007cdc <_init>:
 8007cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cde:	bf00      	nop
 8007ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ce2:	bc08      	pop	{r3}
 8007ce4:	469e      	mov	lr, r3
 8007ce6:	4770      	bx	lr

08007ce8 <_fini>:
 8007ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cea:	bf00      	nop
 8007cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cee:	bc08      	pop	{r3}
 8007cf0:	469e      	mov	lr, r3
 8007cf2:	4770      	bx	lr
